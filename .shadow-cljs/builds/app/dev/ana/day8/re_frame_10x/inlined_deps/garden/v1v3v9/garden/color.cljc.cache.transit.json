["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color');\r\n\r\n/**\r\n* @constructor\r\n * @implements {cljs.core.IRecord}\r\n * @implements {cljs.core.IKVReduce}\r\n * @implements {cljs.core.IEquiv}\r\n * @implements {cljs.core.IHash}\r\n * @implements {cljs.core.IFn}\r\n * @implements {cljs.core.ICollection}\r\n * @implements {cljs.core.ICounted}\r\n * @implements {cljs.core.ISeqable}\r\n * @implements {cljs.core.IMeta}\r\n * @implements {cljs.core.ICloneable}\r\n * @implements {cljs.core.IPrintWithWriter}\r\n * @implements {cljs.core.IIterable}\r\n * @implements {cljs.core.IWithMeta}\r\n * @implements {cljs.core.IAssociative}\r\n * @implements {cljs.core.IMap}\r\n * @implements {cljs.core.ILookup}\r\n*/\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor = (function (red,green,blue,hue,saturation,lightness,alpha,__meta,__extmap,__hash){\r\nthis.red = red;\r\nthis.green = green;\r\nthis.blue = blue;\r\nthis.hue = hue;\r\nthis.saturation = saturation;\r\nthis.lightness = lightness;\r\nthis.alpha = alpha;\r\nthis.__meta = __meta;\r\nthis.__extmap = __extmap;\r\nthis.__hash = __hash;\r\nthis.cljs$lang$protocol_mask$partition0$ = 2230716171;\r\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\r\n});\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4380__auto__,k__4381__auto__){\r\nvar self__ = this;\r\nvar this__4380__auto____$1 = this;\r\nreturn this__4380__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4381__auto__,null);\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4382__auto__,k58917,else__4383__auto__){\r\nvar self__ = this;\r\nvar this__4382__auto____$1 = this;\r\nvar G__58922 = k58917;\r\nvar G__58922__$1 = (((G__58922 instanceof cljs.core.Keyword))?G__58922.fqn:null);\r\nswitch (G__58922__$1) {\r\ncase \"red\":\r\nreturn self__.red;\r\n\r\nbreak;\r\ncase \"green\":\r\nreturn self__.green;\r\n\r\nbreak;\r\ncase \"blue\":\r\nreturn self__.blue;\r\n\r\nbreak;\r\ncase \"hue\":\r\nreturn self__.hue;\r\n\r\nbreak;\r\ncase \"saturation\":\r\nreturn self__.saturation;\r\n\r\nbreak;\r\ncase \"lightness\":\r\nreturn self__.lightness;\r\n\r\nbreak;\r\ncase \"alpha\":\r\nreturn self__.alpha;\r\n\r\nbreak;\r\ndefault:\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k58917,else__4383__auto__);\r\n\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4399__auto__,f__4400__auto__,init__4401__auto__){\r\nvar self__ = this;\r\nvar this__4399__auto____$1 = this;\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4402__auto__,p__58923){\r\nvar vec__58925 = p__58923;\r\nvar k__4403__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__58925,(0),null);\r\nvar v__4404__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__58925,(1),null);\r\nreturn (f__4400__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4400__auto__.cljs$core$IFn$_invoke$arity$3(ret__4402__auto__,k__4403__auto__,v__4404__auto__) : f__4400__auto__.call(null,ret__4402__auto__,k__4403__auto__,v__4404__auto__));\r\n}),init__4401__auto__,this__4399__auto____$1);\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4394__auto__,writer__4395__auto__,opts__4396__auto__){\r\nvar self__ = this;\r\nvar this__4394__auto____$1 = this;\r\nvar pr_pair__4397__auto__ = (function (keyval__4398__auto__){\r\nreturn cljs.core.pr_sequential_writer(writer__4395__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4396__auto__,keyval__4398__auto__);\r\n});\r\nreturn cljs.core.pr_sequential_writer(writer__4395__auto__,pr_pair__4397__auto__,\"#day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color.CSSColor{\",\", \",\"}\",opts__4396__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"red\",\"red\",-969428204),self__.red],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"green\",\"green\",-945526839),self__.green],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),self__.blue],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),self__.hue],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),self__.saturation],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),self__.lightness],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),self__.alpha],null))], null),self__.__extmap));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__58916){\r\nvar self__ = this;\r\nvar G__58916__$1 = this;\r\nreturn (new cljs.core.RecordIter((0),G__58916__$1,7,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4378__auto__){\r\nvar self__ = this;\r\nvar this__4378__auto____$1 = this;\r\nreturn self__.__meta;\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4375__auto__){\r\nvar self__ = this;\r\nvar this__4375__auto____$1 = this;\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,self__.__hash));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4384__auto__){\r\nvar self__ = this;\r\nvar this__4384__auto____$1 = this;\r\nreturn (7 + cljs.core.count(self__.__extmap));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4376__auto__){\r\nvar self__ = this;\r\nvar this__4376__auto____$1 = this;\r\nvar h__4238__auto__ = self__.__hash;\r\nif((!((h__4238__auto__ == null)))){\r\nreturn h__4238__auto__;\r\n} else {\r\nvar h__4238__auto____$1 = (function (coll__4377__auto__){\r\nreturn (782025744 ^ cljs.core.hash_unordered_coll(coll__4377__auto__));\r\n})(this__4376__auto____$1);\r\n(self__.__hash = h__4238__auto____$1);\r\n\r\nreturn h__4238__auto____$1;\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this58918,other58919){\r\nvar self__ = this;\r\nvar this58918__$1 = this;\r\nreturn (((!((other58919 == null)))) && ((this58918__$1.constructor === other58919.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this58918__$1.red,other58919.red)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this58918__$1.green,other58919.green)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this58918__$1.blue,other58919.blue)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this58918__$1.hue,other58919.hue)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this58918__$1.saturation,other58919.saturation)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this58918__$1.lightness,other58919.lightness)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this58918__$1.alpha,other58919.alpha)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this58918__$1.__extmap,other58919.__extmap)));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4389__auto__,k__4390__auto__){\r\nvar self__ = this;\r\nvar this__4389__auto____$1 = this;\r\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),null,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),null,new cljs.core.Keyword(null,\"green\",\"green\",-945526839),null,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),null,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),null,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),null,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),null], null), null),k__4390__auto__)){\r\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4389__auto____$1),self__.__meta),k__4390__auto__);\r\n} else {\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4390__auto__)),null));\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4387__auto__,k__4388__auto__,G__58916){\r\nvar self__ = this;\r\nvar this__4387__auto____$1 = this;\r\nvar pred__58949 = cljs.core.keyword_identical_QMARK_;\r\nvar expr__58950 = k__4388__auto__;\r\nif(cljs.core.truth_((pred__58949.cljs$core$IFn$_invoke$arity$2 ? pred__58949.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"red\",\"red\",-969428204),expr__58950) : pred__58949.call(null,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),expr__58950)))){\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(G__58916,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\r\n} else {\r\nif(cljs.core.truth_((pred__58949.cljs$core$IFn$_invoke$arity$2 ? pred__58949.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"green\",\"green\",-945526839),expr__58950) : pred__58949.call(null,new cljs.core.Keyword(null,\"green\",\"green\",-945526839),expr__58950)))){\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,G__58916,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\r\n} else {\r\nif(cljs.core.truth_((pred__58949.cljs$core$IFn$_invoke$arity$2 ? pred__58949.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),expr__58950) : pred__58949.call(null,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),expr__58950)))){\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,G__58916,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\r\n} else {\r\nif(cljs.core.truth_((pred__58949.cljs$core$IFn$_invoke$arity$2 ? pred__58949.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),expr__58950) : pred__58949.call(null,new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),expr__58950)))){\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,G__58916,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\r\n} else {\r\nif(cljs.core.truth_((pred__58949.cljs$core$IFn$_invoke$arity$2 ? pred__58949.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),expr__58950) : pred__58949.call(null,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),expr__58950)))){\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,G__58916,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\r\n} else {\r\nif(cljs.core.truth_((pred__58949.cljs$core$IFn$_invoke$arity$2 ? pred__58949.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),expr__58950) : pred__58949.call(null,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),expr__58950)))){\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,G__58916,self__.alpha,self__.__meta,self__.__extmap,null));\r\n} else {\r\nif(cljs.core.truth_((pred__58949.cljs$core$IFn$_invoke$arity$2 ? pred__58949.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),expr__58950) : pred__58949.call(null,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),expr__58950)))){\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,G__58916,self__.__meta,self__.__extmap,null));\r\n} else {\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4388__auto__,G__58916),null));\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4392__auto__){\r\nvar self__ = this;\r\nvar this__4392__auto____$1 = this;\r\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"red\",\"red\",-969428204),self__.red,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"green\",\"green\",-945526839),self__.green,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),self__.blue,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),self__.hue,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),self__.saturation,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),self__.lightness,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),self__.alpha,null))], null),self__.__extmap));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4379__auto__,G__58916){\r\nvar self__ = this;\r\nvar this__4379__auto____$1 = this;\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,G__58916,self__.__extmap,self__.__hash));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4385__auto__,entry__4386__auto__){\r\nvar self__ = this;\r\nvar this__4385__auto____$1 = this;\r\nif(cljs.core.vector_QMARK_(entry__4386__auto__)){\r\nreturn this__4385__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__4386__auto__,(0)),cljs.core._nth(entry__4386__auto__,(1)));\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4385__auto____$1,entry__4386__auto__);\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.call = (function (unused__26029__auto__){\r\nvar self__ = this;\r\nvar self__ = this;\r\nvar G__58969 = (arguments.length - (1));\r\nswitch (G__58969) {\r\ncase (0):\r\nreturn self__.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase (1):\r\nreturn self__.cljs$core$IFn$_invoke$arity$1((arguments[(1)]));\r\n\r\nbreak;\r\ncase (2):\r\nreturn self__.cljs$core$IFn$_invoke$arity$2((arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((arguments.length - (1)))].join('')));\r\n\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.apply = (function (self__,args58921){\r\nvar self__ = this;\r\nvar self____$1 = this;\r\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args58921)));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nvar self__ = this;\r\nvar this$ = this;\r\nreturn this$;\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){\r\nvar self__ = this;\r\nvar this$ = this;\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(this$,k);\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,missing){\r\nvar self__ = this;\r\nvar this$ = this;\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(this$,k,missing);\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.getBasis = (function (){\r\nreturn new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"red\",\"red\",671103323,null),new cljs.core.Symbol(null,\"green\",\"green\",695004688,null),new cljs.core.Symbol(null,\"blue\",\"blue\",1018430907,null),new cljs.core.Symbol(null,\"hue\",\"hue\",1132452679,null),new cljs.core.Symbol(null,\"saturation\",\"saturation\",1626283598,null),new cljs.core.Symbol(null,\"lightness\",\"lightness\",-400370403,null),new cljs.core.Symbol(null,\"alpha\",\"alpha\",65549086,null)], null);\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.cljs$lang$type = true);\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.cljs$lang$ctorPrSeq = (function (this__4423__auto__){\r\nreturn (new cljs.core.List(null,\"day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor\",null,(1),null));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.cljs$lang$ctorPrWriter = (function (this__4423__auto__,writer__4424__auto__){\r\nreturn cljs.core._write(writer__4424__auto__,\"day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor\");\r\n}));\r\n\r\n/**\r\n * Positional factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.__GT_CSSColor = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$__GT_CSSColor(red,green,blue,hue,saturation,lightness,alpha){\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(red,green,blue,hue,saturation,lightness,alpha,null,null,null));\r\n});\r\n\r\n/**\r\n * Factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor, taking a map of keywords to field values.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.map__GT_CSSColor = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$map__GT_CSSColor(G__58920){\r\nvar extmap__4419__auto__ = (function (){var G__58983 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__58920,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441)], 0));\r\nif(cljs.core.record_QMARK_(G__58920)){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__58983);\r\n} else {\r\nreturn G__58983;\r\n}\r\n})();\r\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(G__58920),new cljs.core.Keyword(null,\"green\",\"green\",-945526839).cljs$core$IFn$_invoke$arity$1(G__58920),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620).cljs$core$IFn$_invoke$arity$1(G__58920),new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848).cljs$core$IFn$_invoke$arity$1(G__58920),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929).cljs$core$IFn$_invoke$arity$1(G__58920),new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930).cljs$core$IFn$_invoke$arity$1(G__58920),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441).cljs$core$IFn$_invoke$arity$1(G__58920),null,cljs.core.not_empty(extmap__4419__auto__),null));\r\n});\r\n\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.map__GT_CSSColor;\r\n/**\r\n * Create an RGB color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb(var_args){\r\nvar G__58987 = arguments.length;\r\nswitch (G__58987) {\r\ncase 1:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1 = (function (p__58990){\r\nvar vec__58991 = p__58990;\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__58991,(0),null);\r\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__58991,(1),null);\r\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__58991,(2),null);\r\nvar vs = vec__58991;\r\nif(cljs.core.every_QMARK_((function (p1__58985_SHARP_){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(p1__58985_SHARP_,(0),(255));\r\n}),vs)){\r\nvar G__58995 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),r,new cljs.core.Keyword(null,\"green\",\"green\",-945526839),g,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),b], null);\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__58995) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__58995));\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"RGB values must be between 0 and 255\",cljs.core.PersistentArrayMap.EMPTY);\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$3 = (function (r,g,b){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Create an RGBA color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgba(var_args){\r\nvar G__59000 = arguments.length;\r\nswitch (G__59000) {\r\ncase 1:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 4:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$1 = (function (p__59001){\r\nvar vec__59002 = p__59001;\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59002,(0),null);\r\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59002,(1),null);\r\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59002,(2),null);\r\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59002,(3),null);\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(a,(0),(1))){\r\nvar G__59005 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null)),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),a);\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__59005) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__59005));\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Alpha value must be between 0 and 1\",cljs.core.PersistentArrayMap.EMPTY);\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$4 = (function (r,g,b,a){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b,a], null));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$lang$maxFixedArity = 4);\r\n\r\n/**\r\n * Create an HSL color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsl(var_args){\r\nvar G__59009 = arguments.length;\r\nswitch (G__59009) {\r\ncase 1:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1 = (function (p__59010){\r\nvar vec__59011 = p__59010;\r\nvar h = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59011,(0),null);\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59011,(1),null);\r\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59011,(2),null);\r\nvar vec__59014 = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__59006_SHARP_){\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(p1__59006_SHARP_,new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222),p1__59006_SHARP_);\r\n}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l], null));\r\nvar h__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59014,(0),null);\r\nvar s__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59014,(1),null);\r\nvar l__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59014,(2),null);\r\nif(((day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(s__$1,(0),(100))) && (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(l__$1,(0),(100))))){\r\nvar G__59017 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),cljs.core.mod(h__$1,(360)),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),s__$1,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),l__$1], null);\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__59017) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__59017));\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Saturation and lightness must be between 0(%) and 100(%)\",cljs.core.PersistentArrayMap.EMPTY);\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$3 = (function (h,s,l){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l], null));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Create an HSLA color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsla(var_args){\r\nvar G__59026 = arguments.length;\r\nswitch (G__59026) {\r\ncase 1:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 4:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$1 = (function (p__59027){\r\nvar vec__59028 = p__59027;\r\nvar h = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59028,(0),null);\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59028,(1),null);\r\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59028,(2),null);\r\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59028,(3),null);\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(a,(0),(1))){\r\nvar G__59031 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l], null)),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),a);\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__59031) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__59031));\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Alpha value must be between 0 and 1\",cljs.core.PersistentArrayMap.EMPTY);\r\n}\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$4 = (function (h,s,l,a){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l,a], null));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$lang$maxFixedArity = 4);\r\n\r\n/**\r\n * Return true if color is an RGB color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb_QMARK_(color){\r\nreturn ((cljs.core.map_QMARK_(color)) && (cljs.core.every_QMARK_(color,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"green\",\"green\",-945526839),null,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),null,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),null], null), null))));\r\n});\r\n/**\r\n * Return true if color is an HSL color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsl_QMARK_(color){\r\nreturn ((cljs.core.map_QMARK_(color)) && (cljs.core.every_QMARK_(color,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),null,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),null,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),null], null), null))));\r\n});\r\n/**\r\n * Return true if color is an HSLA color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsla_QMARK_(color){\r\nreturn ((cljs.core.map_QMARK_(color)) && (cljs.core.every_QMARK_(color,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),null,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),null,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),null,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),null], null), null))));\r\n});\r\n/**\r\n * Return true if x is a color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$color_QMARK_(x){\r\nreturn ((day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(x)) || (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(x)));\r\n});\r\n/**\r\n * Regular expression for matching a hexadecimal color.\r\n *           Matches hexadecimal colors of length three or six possibly\r\n *           lead by a \"#\". The color portion is captured.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_re = /#?([\\da-fA-F]{6}|[\\da-fA-F]{3})/;\r\n/**\r\n * Returns true if x is a hexadecimal color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hex_QMARK_(x){\r\nreturn cljs.core.boolean$(((typeof x === 'string')?cljs.core.re_matches(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_re,x):false));\r\n});\r\n/**\r\n * Convert a hexadecimal color to an RGB color map.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hex__GT_rgb(s){\r\nvar temp__5735__auto__ = cljs.core.re_matches(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_re,s);\r\nif(cljs.core.truth_(temp__5735__auto__)){\r\nvar vec__59040 = temp__5735__auto__;\r\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59040,(0),null);\r\nvar hex = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59040,(1),null);\r\nvar hex__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((3),cljs.core.count(hex)))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__59037_SHARP_){\r\nreturn (new cljs.core.List(null,p1__59037_SHARP_,(new cljs.core.List(null,p1__59037_SHARP_,null,(1),null)),(2),null));\r\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([hex], 0))):hex);\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__59038_SHARP_){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic(p1__59038_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(16)], 0));\r\n}),cljs.core.re_seq(/[\\da-fA-F]{2}/,hex__$1)));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Convert an RGB color map to a hexadecimal color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb__GT_hex(p__59047){\r\nvar map__59048 = p__59047;\r\nvar map__59048__$1 = (((((!((map__59048 == null))))?(((((map__59048.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59048.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59048):map__59048);\r\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59048__$1,new cljs.core.Keyword(null,\"red\",\"red\",-969428204));\r\nvar g = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59048__$1,new cljs.core.Keyword(null,\"green\",\"green\",-945526839));\r\nvar b = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59048__$1,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620));\r\nvar hex_part = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb__GT_hex_$_hex_part(v){\r\nreturn clojure.string.replace(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.format.cljs$core$IFn$_invoke$arity$variadic(\"%2s\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(16)], 0))], 0)),\" \",\"0\");\r\n});\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.str,\"#\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(hex_part,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null)));\r\n});\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.trim_one = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$trim_one(x){\r\nif(((1) < x)){\r\nreturn (1);\r\n} else {\r\nreturn x;\r\n}\r\n});\r\n/**\r\n * Convert an RGB color map to an HSL color map.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hsl = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb__GT_hsl(p__59060){\r\nvar map__59061 = p__59060;\r\nvar map__59061__$1 = (((((!((map__59061 == null))))?(((((map__59061.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59061.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59061):map__59061);\r\nvar color = map__59061__$1;\r\nvar red = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59061__$1,new cljs.core.Keyword(null,\"red\",\"red\",-969428204));\r\nvar green = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59061__$1,new cljs.core.Keyword(null,\"green\",\"green\",-945526839));\r\nvar blue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59061__$1,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620));\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(color)){\r\nreturn color;\r\n} else {\r\nvar vec__59068 = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__59057_SHARP_){\r\nreturn (p1__59057_SHARP_ / (255));\r\n}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [red,green,blue], null));\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59068,(0),null);\r\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59068,(1),null);\r\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59068,(2),null);\r\nvar mx = (function (){var x__4214__auto__ = (function (){var x__4214__auto__ = r;\r\nvar y__4215__auto__ = g;\r\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\r\n})();\r\nvar y__4215__auto__ = b;\r\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\r\n})();\r\nvar mn = (function (){var x__4217__auto__ = (function (){var x__4217__auto__ = r;\r\nvar y__4218__auto__ = g;\r\nreturn ((x__4217__auto__ < y__4218__auto__) ? x__4217__auto__ : y__4218__auto__);\r\n})();\r\nvar y__4218__auto__ = b;\r\nreturn ((x__4217__auto__ < y__4218__auto__) ? x__4217__auto__ : y__4218__auto__);\r\n})();\r\nvar d = (mx - mn);\r\nvar h = (function (){var pred__59073 = cljs.core._EQ_;\r\nvar expr__59074 = mx;\r\nif(cljs.core.truth_((pred__59073.cljs$core$IFn$_invoke$arity$2 ? pred__59073.cljs$core$IFn$_invoke$arity$2(mn,expr__59074) : pred__59073.call(null,mn,expr__59074)))){\r\nreturn (0);\r\n} else {\r\nif(cljs.core.truth_((pred__59073.cljs$core$IFn$_invoke$arity$2 ? pred__59073.cljs$core$IFn$_invoke$arity$2(r,expr__59074) : pred__59073.call(null,r,expr__59074)))){\r\nreturn ((60) * ((g - b) / d));\r\n} else {\r\nif(cljs.core.truth_((pred__59073.cljs$core$IFn$_invoke$arity$2 ? pred__59073.cljs$core$IFn$_invoke$arity$2(g,expr__59074) : pred__59073.call(null,g,expr__59074)))){\r\nreturn (((60) * ((b - r) / d)) + (120));\r\n} else {\r\nif(cljs.core.truth_((pred__59073.cljs$core$IFn$_invoke$arity$2 ? pred__59073.cljs$core$IFn$_invoke$arity$2(b,expr__59074) : pred__59073.call(null,b,expr__59074)))){\r\nreturn (((60) * ((r - g) / d)) + (240));\r\n} else {\r\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__59074)].join('')));\r\n}\r\n}\r\n}\r\n}\r\n})();\r\nvar l = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.trim_one(((mx + mn) / (2)));\r\nvar s = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.trim_one(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(mx,mn))?(0):(((l < 0.5))?(d / ((2) * l)):(d / ((2) - ((2) * l)))\r\n)));\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$3(cljs.core.mod(h,(360)),((100) * s),((100) * l));\r\n}\r\n});\r\n/**\r\n * Convert an HSL color map to an RGB color map.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsl__GT_rgb(p__59083){\r\nvar map__59084 = p__59083;\r\nvar map__59084__$1 = (((((!((map__59084 == null))))?(((((map__59084.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59084.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59084):map__59084);\r\nvar color = map__59084__$1;\r\nvar hue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59084__$1,new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848));\r\nvar saturation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59084__$1,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929));\r\nvar lightness = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59084__$1,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930));\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(color)){\r\nreturn color;\r\n} else {\r\nvar h = (hue / 360.0);\r\nvar s = (saturation / 100.0);\r\nvar l = (lightness / 100.0);\r\nvar m2 = (((l <= 0.5))?(l * (s + (1))):((l + s) - (l * s)));\r\nvar m1 = (((2) * l) - m2);\r\nvar vec__59089 = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__59080_SHARP_){\r\nreturn Math.round((p1__59080_SHARP_ * (255)));\r\n}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__59094 = m1;\r\nvar G__59095 = m2;\r\nvar G__59096 = (h + (1.0 / (3)));\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3(G__59094,G__59095,G__59096) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.call(null,G__59094,G__59095,G__59096));\r\n})(),(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3(m1,m2,h) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.call(null,m1,m2,h)),(function (){var G__59099 = m1;\r\nvar G__59100 = m2;\r\nvar G__59101 = (h - (1.0 / (3)));\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3(G__59099,G__59100,G__59101) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.call(null,G__59099,G__59100,G__59101));\r\n})()], null));\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59089,(0),null);\r\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59089,(1),null);\r\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59089,(2),null);\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null));\r\n}\r\n});\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hue__GT_rgb(m1,m2,h){\r\nvar h__$1 = (((h < (0)))?(h + (1)):(((h > (1)))?(h - (1)):h\r\n));\r\nif((((6) * h__$1) < (1))){\r\nreturn (m1 + (((m2 - m1) * h__$1) * (6)));\r\n} else {\r\nif((((2) * h__$1) < (1))){\r\nreturn m2;\r\n} else {\r\nif((((3) * h__$1) < (2))){\r\nreturn (m1 + (((m2 - m1) * ((2.0 / (3)) - h__$1)) * (6)));\r\n} else {\r\nreturn m1;\r\n\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Convert an HSL color map to a hexadecimal string.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsl__GT_hex(color){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hex(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_rgb(color));\r\n});\r\n/**\r\n * Convert a hexadecimal color to an HSL color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_hsl = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hex__GT_hsl(color){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hsl(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_rgb(color));\r\n});\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip,(0),(100));\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip,0.0,1.0);\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_clip = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip,(0),(255));\r\n/**\r\n * Convert a color to a hexadecimal string.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$as_hex(x){\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_QMARK_(x)){\r\nreturn x;\r\n} else {\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(x)){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hex(x);\r\n} else {\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(x)){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_hex(x);\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Can't convert \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" to a color.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\r\n\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Convert a color to a RGB.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$as_rgb(x){\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(x)){\r\nreturn x;\r\n} else {\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(x)){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_rgb(x);\r\n} else {\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_QMARK_(x)){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_rgb(x);\r\n} else {\r\nif(typeof x === 'number'){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_clip,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,x,x], null)));\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Can't convert \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" to a color.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\r\n\r\n}\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Convert a color to a HSL.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsl = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$as_hsl(x){\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(x)){\r\nreturn x;\r\n} else {\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(x)){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hsl(x);\r\n} else {\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_QMARK_(x)){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_hsl(x);\r\n} else {\r\nif(typeof x === 'number'){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip(x),day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip(x)], null));\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Can't convert \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" to a color.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\r\n\r\n}\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\r\n *   currently set on color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsla = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$as_hsla(color){\r\nvar current_alpha = cljs.core.get.cljs$core$IFn$_invoke$arity$3(color,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),1.0);\r\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla_QMARK_(color)){\r\nreturn color;\r\n} else {\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsl(color),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),current_alpha);\r\n}\r\n});\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$restrict_rgb(m){\r\nreturn cljs.core.select_keys(m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620)], null));\r\n});\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation(op){\r\nreturn (function() {\r\nvar day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op = null;\r\nvar day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__1 = (function (a){\r\nreturn a;\r\n});\r\nvar day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__2 = (function (a,b){\r\nvar o = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_clip,op);\r\nvar a__$1 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(a));\r\nvar b__$1 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(b));\r\nvar G__59121 = cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(o,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a__$1,b__$1], 0));\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__59121) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__59121));\r\n});\r\nvar day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__3 = (function() { \r\nvar G__59310__delegate = function (a,b,more){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op,day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2(a,b),more);\r\n};\r\nvar G__59310 = function (a,b,var_args){\r\nvar more = null;\r\nif (arguments.length > 2) {\r\nvar G__59311__i = 0, G__59311__a = new Array(arguments.length -  2);\r\nwhile (G__59311__i < G__59311__a.length) {G__59311__a[G__59311__i] = arguments[G__59311__i + 2]; ++G__59311__i;}\r\n  more = new cljs.core.IndexedSeq(G__59311__a,0,null);\r\n} \r\nreturn G__59310__delegate.call(this,a,b,more);};\r\nG__59310.cljs$lang$maxFixedArity = 2;\r\nG__59310.cljs$lang$applyTo = (function (arglist__59312){\r\nvar a = cljs.core.first(arglist__59312);\r\narglist__59312 = cljs.core.next(arglist__59312);\r\nvar b = cljs.core.first(arglist__59312);\r\nvar more = cljs.core.rest(arglist__59312);\r\nreturn G__59310__delegate(a,b,more);\r\n});\r\nG__59310.cljs$core$IFn$_invoke$arity$variadic = G__59310__delegate;\r\nreturn G__59310;\r\n})()\r\n;\r\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op = function(a,b,var_args){\r\nvar more = var_args;\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__1.call(this,a);\r\ncase 2:\r\nreturn day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__2.call(this,a,b);\r\ndefault:\r\nvar G__59313 = null;\r\nif (arguments.length > 2) {\r\nvar G__59314__i = 0, G__59314__a = new Array(arguments.length -  2);\r\nwhile (G__59314__i < G__59314__a.length) {G__59314__a[G__59314__i] = arguments[G__59314__i + 2]; ++G__59314__i;}\r\nG__59313 = new cljs.core.IndexedSeq(G__59314__a,0,null);\r\n}\r\nreturn day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__3.cljs$core$IFn$_invoke$arity$variadic(a,b, G__59313);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$lang$maxFixedArity = 2;\r\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$lang$applyTo = day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__3.cljs$lang$applyTo;\r\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$1 = day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__1;\r\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__2;\r\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$variadic = day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__3.cljs$core$IFn$_invoke$arity$variadic;\r\nreturn day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op;\r\n})()\r\n});\r\n/**\r\n * Add the RGB components of two or more colors.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_PLUS_ = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation(cljs.core._PLUS_);\r\n/**\r\n * Subtract the RGB components of two or more colors.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_ = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation(cljs.core._);\r\n/**\r\n * Multiply the RGB components of two or more colors.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_STAR_ = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation(cljs.core._STAR_);\r\n/**\r\n * Multiply the RGB components of two or more colors.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_div = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation(cljs.core._SLASH_);\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$update_hsla_field(color,field,f,v){\r\nvar v__$1 = new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222).cljs$core$IFn$_invoke$arity$2(v,v);\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsla(color),field,f,v__$1);\r\n});\r\n/**\r\n * Rotates the hue value of a given color by amount.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rotate_hue(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),cljs.core.comp.cljs$core$IFn$_invoke$arity$2((function (p1__59140_SHARP_){\r\nreturn cljs.core.mod(p1__59140_SHARP_,(360));\r\n}),cljs.core._PLUS_),amount);\r\n});\r\n/**\r\n * Increase the saturation value of a given color by amount.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.saturate = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$saturate(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip,cljs.core._PLUS_),amount);\r\n});\r\n/**\r\n * Decrease the saturation value of a given color by amount.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.desaturate = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$desaturate(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip,cljs.core._),amount);\r\n});\r\n/**\r\n * Increase the lightness value a given color by amount.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.lighten = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$lighten(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip,cljs.core._PLUS_),amount);\r\n});\r\n/**\r\n * Decrease the lightness value a given color by amount.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.darken = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$darken(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip,cljs.core._),amount);\r\n});\r\n/**\r\n * Decreases the alpha value of a given color by amount.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.transparentize = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$transparentize(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip,cljs.core._),amount);\r\n});\r\n/**\r\n * Increases the alpha value of a given color by amount.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.opacify = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$opacify(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip,cljs.core._PLUS_),amount);\r\n});\r\n/**\r\n * Return the inversion of a color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.invert = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$invert(color){\r\nvar G__59153 = cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(cljs.core._,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(255),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),(255),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),(255)], null),day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(color)], 0));\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__59153) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__59153));\r\n});\r\n/**\r\n * Mix two or more colors by averaging their RGB channels.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$mix(var_args){\r\nvar G__59158 = arguments.length;\r\nswitch (G__59158) {\r\ncase 2:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__4757__auto__ = [];\r\nvar len__4736__auto___59323 = arguments.length;\r\nvar i__4737__auto___59324 = (0);\r\nwhile(true){\r\nif((i__4737__auto___59324 < len__4736__auto___59323)){\r\nargs_arr__4757__auto__.push((arguments[i__4737__auto___59324]));\r\n\r\nvar G__59326 = (i__4737__auto___59324 + (1));\r\ni__4737__auto___59324 = G__59326;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((2)),(0),null));\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4758__auto__);\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$2 = (function (color_1,color_2){\r\nvar c1 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(color_1));\r\nvar c2 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(color_2));\r\nvar G__59163 = cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.average,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([c1,c2], 0));\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__59163) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__59163));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$variadic = (function (color_1,color_2,more){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix,day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$2(color_1,color_2),more);\r\n}));\r\n\r\n/** @this {Function} */\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$lang$applyTo = (function (seq59155){\r\nvar G__59156 = cljs.core.first(seq59155);\r\nvar seq59155__$1 = cljs.core.next(seq59155);\r\nvar G__59157 = cljs.core.first(seq59155__$1);\r\nvar seq59155__$2 = cljs.core.next(seq59155__$1);\r\nvar self__4723__auto__ = this;\r\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__59156,G__59157,seq59155__$2);\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$lang$maxFixedArity = (2));\r\n\r\n/**\r\n * Return the complement of a color.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.complement = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$complement(color){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue(color,(180));\r\n});\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hue_rotations(var_args){\r\nvar args__4742__auto__ = [];\r\nvar len__4736__auto___59327 = arguments.length;\r\nvar i__4737__auto___59328 = (0);\r\nwhile(true){\r\nif((i__4737__auto___59328 < len__4736__auto___59327)){\r\nargs__4742__auto__.push((arguments[i__4737__auto___59328]));\r\n\r\nvar G__59329 = (i__4737__auto___59328 + (1));\r\ni__4737__auto___59328 = G__59329;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic = (function (color,amounts){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue,color),amounts);\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$lang$applyTo = (function (seq59169){\r\nvar G__59170 = cljs.core.first(seq59169);\r\nvar seq59169__$1 = cljs.core.next(seq59169);\r\nvar self__4723__auto__ = this;\r\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__59170,seq59169__$1);\r\n}));\r\n\r\n/**\r\n * Given a color return a triple of colors which are 0, 30, and 60\r\n *   degrees clockwise from it. If a second falsy argument is passed the\r\n *   returned values will be in a counter-clockwise direction.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$analogous(var_args){\r\nvar G__59182 = arguments.length;\r\nswitch (G__59182) {\r\ncase 1:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$1 = (function (color){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$2(color,true);\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$2 = (function (color,clockwise_QMARK_){\r\nvar sign = (cljs.core.truth_(clockwise_QMARK_)?cljs.core._PLUS_:cljs.core._);\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(color,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0),(sign.cljs$core$IFn$_invoke$arity$1 ? sign.cljs$core$IFn$_invoke$arity$1((30)) : sign.call(null,(30))),(sign.cljs$core$IFn$_invoke$arity$1 ? sign.cljs$core$IFn$_invoke$arity$1((60)) : sign.call(null,(60)))], 0));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Given a color return a triple of colors which are equidistance apart\r\n *   on the color wheel.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.triad = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$triad(color){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(color,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0),(120),(240)], 0));\r\n});\r\n/**\r\n * Given a color return a triple of the color and the two colors on\r\n *   either side of it's complement.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$split_complement(var_args){\r\nvar G__59190 = arguments.length;\r\nswitch (G__59190) {\r\ncase 1:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$1 = (function (color){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2(color,(130));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2 = (function (color,distance_from_complement){\r\nvar d = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip((1),(179),distance_from_complement);\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(color,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0),d,(- d)], 0));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Given a color return a quadruple of four colors which are\r\n *   equidistance on the color wheel (ie. a pair of complements). An\r\n *   optional angle may be given for color of the second complement in the\r\n *   pair (this defaults to 90 when only color is passed).\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$tetrad(var_args){\r\nvar G__59195 = arguments.length;\r\nswitch (G__59195) {\r\ncase 1:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$1 = (function (color){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2(color,(90));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2 = (function (color,angle){\r\nvar a = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip((1),(90),Math.abs(new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222).cljs$core$IFn$_invoke$arity$2(angle,angle)));\r\nvar color_2 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue(color,a);\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue(color,(0)),day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.complement(color),color_2,day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.complement(color_2)], null);\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Given a color return a list of shades from lightest to darkest by\r\n *   a step. By default the step is 10. White and black are excluded from\r\n *   the returned list.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$shades(var_args){\r\nvar G__59201 = arguments.length;\r\nswitch (G__59201) {\r\ncase 1:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$1 = (function (color){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$2(color,(10));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$2 = (function (color,step){\r\nvar c = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsl(color);\r\nvar iter__4529__auto__ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$iter__59203(s__59204){\r\nreturn (new cljs.core.LazySeq(null,(function (){\r\nvar s__59204__$1 = s__59204;\r\nwhile(true){\r\nvar temp__5735__auto__ = cljs.core.seq(s__59204__$1);\r\nif(temp__5735__auto__){\r\nvar s__59204__$2 = temp__5735__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(s__59204__$2)){\r\nvar c__4527__auto__ = cljs.core.chunk_first(s__59204__$2);\r\nvar size__4528__auto__ = cljs.core.count(c__4527__auto__);\r\nvar b__59206 = cljs.core.chunk_buffer(size__4528__auto__);\r\nif((function (){var i__59205 = (0);\r\nwhile(true){\r\nif((i__59205 < size__4528__auto__)){\r\nvar i = cljs.core._nth(c__4527__auto__,i__59205);\r\ncljs.core.chunk_append(b__59206,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(c,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),(i * step)));\r\n\r\nvar G__59344 = (i__59205 + (1));\r\ni__59205 = G__59344;\r\ncontinue;\r\n} else {\r\nreturn true;\r\n}\r\nbreak;\r\n}\r\n})()){\r\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__59206),day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$iter__59203(cljs.core.chunk_rest(s__59204__$2)));\r\n} else {\r\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__59206),null);\r\n}\r\n} else {\r\nvar i = cljs.core.first(s__59204__$2);\r\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(c,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),(i * step)),day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$iter__59203(cljs.core.rest(s__59204__$2)));\r\n}\r\n} else {\r\nreturn null;\r\n}\r\nbreak;\r\n}\r\n}),null,null));\r\n});\r\nreturn iter__4529__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),Math.floor((100.0 / step))));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$lang$maxFixedArity = 2);\r\n\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"aquamarine\",\"aquamarine\",263648544),new cljs.core.Keyword(null,\"lime\",\"lime\",-1796425088),new cljs.core.Keyword(null,\"deepskyblue\",\"deepskyblue\",-1691758944),new cljs.core.Keyword(null,\"darksalmon\",\"darksalmon\",-896495551),new cljs.core.Keyword(null,\"antiquewhite\",\"antiquewhite\",-1702201183),new cljs.core.Keyword(null,\"mediumturquoise\",\"mediumturquoise\",2112212449),new cljs.core.Keyword(null,\"slategrey\",\"slategrey\",-1531406687),new cljs.core.Keyword(null,\"slategray\",\"slategray\",-178672671),new cljs.core.Keyword(null,\"sienna\",\"sienna\",-1559699358),new cljs.core.Keyword(null,\"orange\",\"orange\",73816386),new cljs.core.Keyword(null,\"navajowhite\",\"navajowhite\",1463125346),new cljs.core.Keyword(null,\"lavenderblush\",\"lavenderblush\",667482818),new cljs.core.Keyword(null,\"firebrick\",\"firebrick\",-214380606),new cljs.core.Keyword(null,\"orangered\",\"orangered\",-1851964317),new cljs.core.Keyword(null,\"palevioletred\",\"palevioletred\",-1198100061),new cljs.core.Keyword(null,\"lawngreen\",\"lawngreen\",672111043),new cljs.core.Keyword(null,\"seashell\",\"seashell\",1208259012),new cljs.core.Keyword(null,\"lightpink\",\"lightpink\",808485476),new cljs.core.Keyword(null,\"darkolivegreen\",\"darkolivegreen\",-2098617596),new cljs.core.Keyword(null,\"aliceblue\",\"aliceblue\",-1185534108),new cljs.core.Keyword(null,\"gray\",\"gray\",1013268388),new cljs.core.Keyword(null,\"lightsteelblue\",\"lightsteelblue\",-209586236),new cljs.core.Keyword(null,\"whitesmoke\",\"whitesmoke\",1847137252),new cljs.core.Keyword(null,\"darkgoldenrod\",\"darkgoldenrod\",-1115778811),new cljs.core.Keyword(null,\"tan\",\"tan\",1273609893),new cljs.core.Keyword(null,\"bisque\",\"bisque\",-862836634),new cljs.core.Keyword(null,\"white\",\"white\",-483998618),new cljs.core.Keyword(null,\"lightgreen\",\"lightgreen\",-1542529498),new cljs.core.Keyword(null,\"darkseagreen\",\"darkseagreen\",410063911),new cljs.core.Keyword(null,\"crimson\",\"crimson\",-1192060857),new cljs.core.Keyword(null,\"darkslategray\",\"darkslategray\",348576839),new cljs.core.Keyword(null,\"mistyrose\",\"mistyrose\",-619815737),new cljs.core.Keyword(null,\"chocolate\",\"chocolate\",772404615),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"cadetblue\",\"cadetblue\",1126335112),new cljs.core.Keyword(null,\"navy\",\"navy\",1626342120),new cljs.core.Keyword(null,\"ghostwhite\",\"ghostwhite\",-1030428888),new cljs.core.Keyword(null,\"dimgrey\",\"dimgrey\",265814984),new cljs.core.Keyword(null,\"seagreen\",\"seagreen\",1345424905),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"mediumseagreen\",\"mediumseagreen\",2130779146),new cljs.core.Keyword(null,\"indigo\",\"indigo\",-280252374),new cljs.core.Keyword(null,\"olivedrab\",\"olivedrab\",477000042),new cljs.core.Keyword(null,\"cyan\",\"cyan\",1118839274),new cljs.core.Keyword(null,\"peachpuff\",\"peachpuff\",-1932127734),new cljs.core.Keyword(null,\"limegreen\",\"limegreen\",-121735638),new cljs.core.Keyword(null,\"mediumslateblue\",\"mediumslateblue\",-900241526),new cljs.core.Keyword(null,\"violet\",\"violet\",-1351470549),new cljs.core.Keyword(null,\"sandybrown\",\"sandybrown\",-417646484),new cljs.core.Keyword(null,\"yellowgreen\",\"yellowgreen\",844595052),new cljs.core.Keyword(null,\"mediumspringgreen\",\"mediumspringgreen\",-257604339),new cljs.core.Keyword(null,\"steelblue\",\"steelblue\",1620562381),new cljs.core.Keyword(null,\"rosybrown\",\"rosybrown\",1634897517),new cljs.core.Keyword(null,\"cornflowerblue\",\"cornflowerblue\",-1713148307),new cljs.core.Keyword(null,\"ivory\",\"ivory\",-1259182451),new cljs.core.Keyword(null,\"lightgoldenrodyellow\",\"lightgoldenrodyellow\",1849392877),new cljs.core.Keyword(null,\"salmon\",\"salmon\",-1093653298),new cljs.core.Keyword(null,\"darkcyan\",\"darkcyan\",-1999655442),new cljs.core.Keyword(null,\"peru\",\"peru\",1147074382),new cljs.core.Keyword(null,\"cornsilk\",\"cornsilk\",-1628976146),new cljs.core.Keyword(null,\"lightslategray\",\"lightslategray\",-1109503825),new cljs.core.Keyword(null,\"blueviolet\",\"blueviolet\",887936463),new cljs.core.Keyword(null,\"forestgreen\",\"forestgreen\",1609185807),new cljs.core.Keyword(null,\"lightseagreen\",\"lightseagreen\",-1503692817),new cljs.core.Keyword(null,\"gold\",\"gold\",-806826416),new cljs.core.Keyword(null,\"gainsboro\",\"gainsboro\",-218568880),new cljs.core.Keyword(null,\"darkorchid\",\"darkorchid\",-1255783536),new cljs.core.Keyword(null,\"burlywood\",\"burlywood\",1747294160),new cljs.core.Keyword(null,\"lightskyblue\",\"lightskyblue\",397352944),new cljs.core.Keyword(null,\"chartreuse\",\"chartreuse\",-1626529775),new cljs.core.Keyword(null,\"snow\",\"snow\",1266930033),new cljs.core.Keyword(null,\"moccasin\",\"moccasin\",885646097),new cljs.core.Keyword(null,\"honeydew\",\"honeydew\",297211825),new cljs.core.Keyword(null,\"aqua\",\"aqua\",745022417),new cljs.core.Keyword(null,\"darkred\",\"darkred\",1564487633),new cljs.core.Keyword(null,\"mediumorchid\",\"mediumorchid\",114416082),new cljs.core.Keyword(null,\"lightsalmon\",\"lightsalmon\",278000114),new cljs.core.Keyword(null,\"saddlebrown\",\"saddlebrown\",-1556765006),new cljs.core.Keyword(null,\"wheat\",\"wheat\",783520466),new cljs.core.Keyword(null,\"springgreen\",\"springgreen\",-1241565454),new cljs.core.Keyword(null,\"lightslategrey\",\"lightslategrey\",1806136178),new cljs.core.Keyword(null,\"darkblue\",\"darkblue\",511597490),new cljs.core.Keyword(null,\"powderblue\",\"powderblue\",65928114),new cljs.core.Keyword(null,\"turquoise\",\"turquoise\",876845491),new cljs.core.Keyword(null,\"blanchedalmond\",\"blanchedalmond\",-1397674477),new cljs.core.Keyword(null,\"papayawhip\",\"papayawhip\",-330388621),new cljs.core.Keyword(null,\"slateblue\",\"slateblue\",79472627),new cljs.core.Keyword(null,\"lightblue\",\"lightblue\",-1333083084),new cljs.core.Keyword(null,\"skyblue\",\"skyblue\",-2076132812),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"lightyellow\",\"lightyellow\",1576303380),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"palegreen\",\"palegreen\",1360601109),new cljs.core.Keyword(null,\"greenyellow\",\"greenyellow\",1380924629),new cljs.core.Keyword(null,\"khaki\",\"khaki\",-1417823979),new cljs.core.Keyword(null,\"maroon\",\"maroon\",-952210123),new cljs.core.Keyword(null,\"darkgrey\",\"darkgrey\",-860992715),new cljs.core.Keyword(null,\"midnightblue\",\"midnightblue\",688164725),new cljs.core.Keyword(null,\"floralwhite\",\"floralwhite\",1656937461),new cljs.core.Keyword(null,\"deeppink\",\"deeppink\",1577828374),new cljs.core.Keyword(null,\"paleturquoise\",\"paleturquoise\",1255621750),new cljs.core.Keyword(null,\"darkkhaki\",\"darkkhaki\",1599585526),new cljs.core.Keyword(null,\"azure\",\"azure\",1864287702),new cljs.core.Keyword(null,\"indianred\",\"indianred\",-1829312906),new cljs.core.Keyword(null,\"darkviolet\",\"darkviolet\",552615766),new cljs.core.Keyword(null,\"mediumpurple\",\"mediumpurple\",-1891751018),new cljs.core.Keyword(null,\"fuchsia\",\"fuchsia\",990719926),new cljs.core.Keyword(null,\"coral\",\"coral\",1082484055),new cljs.core.Keyword(null,\"mediumvioletred\",\"mediumvioletred\",-1767902505),new cljs.core.Keyword(null,\"lemonchiffon\",\"lemonchiffon\",1115945815),new cljs.core.Keyword(null,\"mediumblue\",\"mediumblue\",-1579936616),new cljs.core.Keyword(null,\"darkmagenta\",\"darkmagenta\",-1534491240),new cljs.core.Keyword(null,\"goldenrod\",\"goldenrod\",2000666104),new cljs.core.Keyword(null,\"darkorange\",\"darkorange\",1453996632),new cljs.core.Keyword(null,\"orchid\",\"orchid\",-1953715528),new cljs.core.Keyword(null,\"plum\",\"plum\",2022177528),new cljs.core.Keyword(null,\"pink\",\"pink\",393815864),new cljs.core.Keyword(null,\"teal\",\"teal\",1231496088),new cljs.core.Keyword(null,\"magenta\",\"magenta\",1687937081),new cljs.core.Keyword(null,\"lightgrey\",\"lightgrey\",-729897351),new cljs.core.Keyword(null,\"purple\",\"purple\",-876021126),new cljs.core.Keyword(null,\"dodgerblue\",\"dodgerblue\",-1678389350),new cljs.core.Keyword(null,\"darkturquoise\",\"darkturquoise\",-80977765),new cljs.core.Keyword(null,\"mintcream\",\"mintcream\",1437895067),new cljs.core.Keyword(null,\"hotpink\",\"hotpink\",1103829723),new cljs.core.Keyword(null,\"thistle\",\"thistle\",1477120028),new cljs.core.Keyword(null,\"royalblue\",\"royalblue\",978912636),new cljs.core.Keyword(null,\"darkgreen\",\"darkgreen\",2002841276),new cljs.core.Keyword(null,\"darkslateblue\",\"darkslateblue\",807219996),new cljs.core.Keyword(null,\"silver\",\"silver\",1044501468),new cljs.core.Keyword(null,\"darkgray\",\"darkgray\",-1229776547),new cljs.core.Keyword(null,\"oldlace\",\"oldlace\",-966038915),new cljs.core.Keyword(null,\"mediumaquamarine\",\"mediumaquamarine\",1476241181),new cljs.core.Keyword(null,\"brown\",\"brown\",1414854429),new cljs.core.Keyword(null,\"lightgray\",\"lightgray\",-845833379),new cljs.core.Keyword(null,\"olive\",\"olive\",-2080542466),new cljs.core.Keyword(null,\"lightcoral\",\"lightcoral\",-988903010),new cljs.core.Keyword(null,\"tomato\",\"tomato\",1086708254),new cljs.core.Keyword(null,\"lightcyan\",\"lightcyan\",-481418530),new cljs.core.Keyword(null,\"linen\",\"linen\",-1305214018),new cljs.core.Keyword(null,\"darkslategrey\",\"darkslategrey\",-114797409),new cljs.core.Keyword(null,\"lavender\",\"lavender\",-1469567809),new cljs.core.Keyword(null,\"dimgray\",\"dimgray\",-412750241),new cljs.core.Keyword(null,\"palegoldenrod\",\"palegoldenrod\",-2067529985),new cljs.core.Keyword(null,\"beige\",\"beige\",836725695),new cljs.core.Keyword(null,\"black\",\"black\",1294279647)],[\"#7fffd4\",\"#00ff00\",\"#00bfff\",\"#e9967a\",\"#faebd7\",\"#48d1cc\",\"#708090\",\"#708090\",\"#a0522d\",\"#ffa500\",\"#ffdead\",\"#fff0f5\",\"#b22222\",\"#ff4500\",\"#db7093\",\"#7cfc00\",\"#fff5ee\",\"#ffb6c1\",\"#556b2f\",\"#f0f8ff\",\"#808080\",\"#b0c4de\",\"#f5f5f5\",\"#b8860b\",\"#d2b48c\",\"#ffe4c4\",\"#ffffff\",\"#90ee90\",\"#8fbc8f\",\"#dc143c\",\"#2f4f4f\",\"#ffe4e1\",\"#d2691e\",\"#ffff00\",\"#5f9ea0\",\"#000080\",\"#f8f8ff\",\"#696969\",\"#2e8b57\",\"#008000\",\"#3cb371\",\"#4b0082\",\"#6b8e23\",\"#00ffff\",\"#ffdab9\",\"#32cd32\",\"#7b68ee\",\"#ee82ee\",\"#f4a460\",\"#9acd32\",\"#00fa9a\",\"#4682b4\",\"#bc8f8f\",\"#6495ed\",\"#fffff0\",\"#fafad2\",\"#fa8072\",\"#008b8b\",\"#cd853f\",\"#fff8dc\",\"#778899\",\"#8a2be2\",\"#228b22\",\"#20b2aa\",\"#ffd700\",\"#dcdcdc\",\"#9932cc\",\"#deb887\",\"#87cefa\",\"#7fff00\",\"#fffafa\",\"#ffe4b5\",\"#f0fff0\",\"#00ffff\",\"#8b0000\",\"#ba55d3\",\"#ffa07a\",\"#8b4513\",\"#f5deb3\",\"#00ff7f\",\"#778899\",\"#00008b\",\"#b0e0e6\",\"#40e0d0\",\"#ffebcd\",\"#ffefd5\",\"#6a5acd\",\"#add8e6\",\"#87ceeb\",\"#ff0000\",\"#ffffe0\",\"#0000ff\",\"#98fb98\",\"#adff2f\",\"#f0e68c\",\"#800000\",\"#a9a9a9\",\"#191970\",\"#fffaf0\",\"#ff1493\",\"#afeeee\",\"#bdb76b\",\"#f0ffff\",\"#cd5c5c\",\"#9400d3\",\"#9370db\",\"#ff00ff\",\"#ff7f50\",\"#c71585\",\"#fffacd\",\"#0000cd\",\"#8b008b\",\"#daa520\",\"#ff8c00\",\"#da70d6\",\"#dda0dd\",\"#ffc0cb\",\"#008080\",\"#ff00ff\",\"#d3d3d3\",\"#800080\",\"#1e90ff\",\"#00ced1\",\"#f5fffa\",\"#ff69b4\",\"#d8bfd8\",\"#4169e1\",\"#006400\",\"#483d8b\",\"#c0c0c0\",\"#a9a9a9\",\"#fdf5e6\",\"#66cdaa\",\"#a52a2a\",\"#d3d3d3\",\"#808000\",\"#f08080\",\"#ff6347\",\"#e0ffff\",\"#faf0e6\",\"#2f4f4f\",\"#e6e6fa\",\"#696969\",\"#eee8aa\",\"#f5f5dc\",\"#000000\"]);\r\n/**\r\n * Helper function for from-name. Returns an instance of ExceptionInfo\r\n *   for unknown colors.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.ex_info_color_name = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$ex_info_color_name(n){\r\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Unknown color \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([n], 0)),\" see (:expected (ex-data e)) for a list of color names\"].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"given\",\"given\",716253602),n,new cljs.core.Keyword(null,\"expected\",\"expected\",1583670997),cljs.core.set(cljs.core.keys(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex))], null));\r\n});\r\n/**\r\n * Helper function for from-name.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_color = cljs.core.memoize((function (k){\r\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex.cljs$core$IFn$_invoke$arity$1(k) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex.call(null,k));\r\n}));\r\n/**\r\n * Given a CSS color name n return an instance of CSSColor.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.from_name = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$from_name(n){\r\nvar temp__5733__auto__ = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_color(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(n));\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar h = temp__5733__auto__;\r\nreturn h;\r\n} else {\r\nthrow day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.ex_info_color_name(n);\r\n}\r\n});\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$scale_color_value(var_args){\r\nvar G__59227 = arguments.length;\r\nswitch (G__59227) {\r\ncase 2:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 4:\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$2 = (function (value,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$4(value,amount,(0),(100));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$4 = (function (value,amount,min_val,max_val){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip(min_val,max_val,(value * ((1) + (amount / (100)))));\r\n}));\r\n\r\n(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$lang$maxFixedArity = 4);\r\n\r\n/**\r\n * Scales the lightness of a color by amount, which is treated as a percentage.\r\n *   Supply positive values to scale upwards and negative values to scale downwards.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_lightness = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$scale_lightness(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value,amount);\r\n});\r\n/**\r\n * Scales the saturation of a color by amount, which is treated as a percentage.\r\n *   Supply positive values to scale upwards and negative values to scale downwards.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_saturation = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$scale_saturation(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value,amount);\r\n});\r\n/**\r\n * Scales the alpha of a color by amount, which is treated as a percentage.\r\n *   Supply positive values to scale upwards and negative values to scale downwards.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_alpha = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$scale_alpha(color,amount){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),(function (p1__59230_SHARP_,p2__59231_SHARP_){\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip((p1__59230_SHARP_ * ((1) + (p2__59231_SHARP_ / (100)))));\r\n}),amount);\r\n});\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.decrown_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$decrown_hex(hex){\r\nreturn clojure.string.replace(hex,/^#/,\"\");\r\n});\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.crown_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$crown_hex(hex){\r\nif(cljs.core.truth_(cljs.core.re_find(/^#/,hex))){\r\nreturn hex;\r\n} else {\r\nreturn [\"#\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex)].join('');\r\n}\r\n});\r\n/**\r\n * (expand-hex \"#abc\") -> \"aabbcc\"\r\n * (expand-hex \"333333\") -> \"333333\"\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.expand_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$expand_hex(hex){\r\nvar _ = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.decrown_hex(hex);\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((3),((_).length))){\r\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.vector,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([_,_], 0)));\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),((_).length))){\r\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((6),_));\r\n} else {\r\nreturn _;\r\n\r\n}\r\n}\r\n});\r\n/**\r\n * (hex->long \"#abc\") -> 11189196\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_long = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hex__GT_long(hex){\r\nreturn parseInt(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.expand_hex(clojure.string.replace(hex,/^#/,\"\")),(16));\r\n});\r\n/**\r\n * (long->hex 11189196) -> \"aabbcc\"\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.long__GT_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$long__GT_hex(long$){\r\nreturn long$.toString((16));\r\n});\r\n/**\r\n * `weight` is number 0 to 100 (%).\r\n * At 0, it weighs color-1 at 100%.\r\n * At 100, it weighs color-2 at 100%.\r\n * Returns hex string.\r\n */\r\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.weighted_mix = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$weighted_mix(color_1,color_2,weight){\r\nvar vec__59247 = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__59244_SHARP_){\r\nreturn (p1__59244_SHARP_ / (100));\r\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((100) - weight),weight], null));\r\nvar weight_1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59247,(0),null);\r\nvar weight_2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59247,(1),null);\r\nvar vec__59250 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_long,day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hex),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [color_1,color_2], null));\r\nvar long_1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59250,(0),null);\r\nvar long_2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59250,(1),null);\r\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.crown_hex(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.expand_hex(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.long__GT_hex(((long_1 * weight_1) + (long_2 * weight_2)))));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Utilities for color creation, conversion, and manipulation.","~:file","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","~:line",1,"~:column",33,"~:end-line",1,"~:end-column",90,"~:mranderson/inlined",true],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",["^ ","~$defcolor-operation","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color"],"~:excludes",["~#set",["~$complement"]],"~:macros",["^ "],"~:name","^L","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^V","~$string","^V","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util","^X","~$util","^X","~$cljs.core","^Z","~$goog","^["],"~:seen",["^N",["~:require","~:require-macros"]],"~:uses",null,"^12",["^ ","^L","^L","^Z","^Z"],"~:form",["~#list",["~$ns","^L","Utilities for color creation, conversion, and manipulation.",["^15",["~:refer-clojure","~:exclude",["^O"]]],["^15",["^12",["^L","~:refer",["^K"]]]],["^15",["^11",["^V","~:as","^W"],["^X","^1:","^Y"]]]]],"~:flags",["^ ","^12",["^N",[]],"^11",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^[","^Z","^V","^X"]],"^S","^L","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc"],"~:compiled-at",1597165877208,"~:resource-name","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","~:warnings",[],"~:source","(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color\n  \"Utilities for color creation, conversion, and manipulation.\"\n  (:refer-clojure :exclude [complement])\n  #?(:cljs\n     (:require-macros\n      [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color :refer [defcolor-operation]]))\n  (:require\n   [clojure.string :as string]\n   [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util :as util])\n  #?(:clj\n     (:import clojure.lang.IFn)))\n\n;; Many of the functions in this namespace were ported or inspired by\n;; the implementations included with Sass\n;; (http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html).\n;; Some additional functions have been added such as `triad` and\n;; `tetrad` for generating sets of colors.\n\n;; Converts a color to a hexadecimal string (implementation below).\n(declare as-hex)\n\n(defrecord CSSColor [red green blue hue saturation lightness alpha]\n  IFn\n  #?(:clj\n      (invoke [this] this))\n  #?(:clj\n      (invoke [this k]\n              (get this k)))\n  #?(:clj\n      (invoke [this k missing]\n              (get this k missing)))\n  #?(:cljs\n      (-invoke [this] this))\n  #?(:cljs\n      (-invoke [this k]\n               (get this k)))\n  #?(:cljs\n      (-invoke [this k missing]\n               (get this k missing)))\n  #?(:clj\n      (applyTo [this args]\n               (clojure.lang.AFn/applyToHelper this args))))\n\n(def as-color map->CSSColor)\n\n(defn rgb\n  \"Create an RGB color.\"\n  ([[r g b :as vs]]\n     (if (every? #(util/between? % 0 255) vs)\n       (as-color {:red r :green g :blue b})\n       (throw\n        (ex-info \"RGB values must be between 0 and 255\" {}))))\n  ([r g b]\n     (rgb [r g b])))\n\n(defn rgba\n  \"Create an RGBA color.\"\n  ([[r g b a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (rgb [r g b]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([r g b a]\n     (rgba [r g b a])))\n\n(defn hsl\n  \"Create an HSL color.\"\n  ([[h s l]]\n     ;; Handle CSSUnits.\n     (let [[h s l] (map #(get % :magnitude %) [h s l])]\n       (if (and (util/between? s 0 100)\n                (util/between? l 0 100))\n         (as-color {:hue (mod h 360) :saturation s :lightness l})\n         (throw\n          (ex-info \"Saturation and lightness must be between 0(%) and 100(%)\" {})))))\n  ([h s l]\n     (hsl [h s l])))\n\n(defn hsla\n  \"Create an HSLA color.\"\n  ([[h s l a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (hsl [h s l]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([h s l a]\n     (hsla [h s l a])))\n\n(defn rgb?\n  \"Return true if color is an RGB color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:red :green :blue})))\n\n(defn hsl?\n  \"Return true if color is an HSL color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness})))\n\n(defn hsla?\n  \"Return true if color is an HSLA color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness :alpha})))\n\n(defn color?\n  \"Return true if x is a color.\"\n  [x]\n  (or (rgb? x) (hsl? x)))\n\n(def ^{:doc \"Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \\\"#\\\". The color portion is captured.\"}\n  ;; Quantifier must be in this order or JavaScript engines will match\n  ;; 3 chars even when 6 are provided (failing re-matches).\n  hex-re #\"#?([\\da-fA-F]{6}|[\\da-fA-F]{3})\")\n\n(defn hex?\n  \"Returns true if x is a hexadecimal color.\"\n  [x]\n  (boolean (and (string? x) (re-matches hex-re x))))\n\n(defn hex->rgb\n  \"Convert a hexadecimal color to an RGB color map.\"\n  [s]\n  (when-let [[_ hex] (re-matches hex-re s)]\n    (let [hex (if (= 3 (count hex))\n                (apply str (mapcat #(list % %) hex))\n                hex)]\n      (->> (re-seq #\"[\\da-fA-F]{2}\" hex)\n           (map #(util/string->int % 16))\n           (rgb)))))\n\n(defn rgb->hex\n  \"Convert an RGB color map to a hexadecimal color.\"\n  [{r :red g :green b :blue}]\n  (letfn [(hex-part [v]\n            (-> (util/format \"%2s\" (util/int->string v 16))\n                (string/replace \" \" \"0\")))]\n    (apply str \"#\" (map hex-part [r g b]))))\n\n(defn trim-one [x]\n  (if (< 1 x) 1 x))\n\n(defn rgb->hsl\n  \"Convert an RGB color map to an HSL color map.\"\n  [{:keys [red green blue] :as color}]\n  (if (hsl? color)\n    color\n    (let [[r g b] (map #(/ % 255) [red green blue])\n          mx (max r g b)\n          mn (min r g b)\n          d (- mx mn)\n          h (condp = mx\n              mn 0\n              r (* 60 (/ (- g b) d))\n              g (+ (* 60 (/ (- b r) d)) 120)\n              b (+ (* 60 (/ (- r g) d)) 240))\n          l (trim-one (/ (+ mx mn) 2))\n          s (trim-one\n              (cond\n                (= mx mn) 0\n                (< l 0.5) (/ d (* 2 l))\n                :else (/ d (- 2 (* 2 l)))))]\n      (hsl (mod h 360) (* 100 s) (* 100 l)))))\n\n(declare hue->rgb)\n\n;; SEE: http://www.w3.org/TR/css3-color/#hsl-color.\n(defn hsl->rgb\n  \"Convert an HSL color map to an RGB color map.\"\n  [{:keys  [hue saturation lightness] :as color}]\n  (if (rgb? color)\n    color\n    (let [h (/ hue 360.0)\n          s (/ saturation 100.0)\n          l (/ lightness 100.0)\n          m2 (if (<= l 0.5)\n               (* l (inc s))\n               (- (+ l s) (* l s)))\n          m1 (- (* 2 l) m2)\n          [r g b] (map #(Math/round (* % 0xff))\n                       [(hue->rgb m1 m2 (+ h (/ 1.0 3)))\n                        (hue->rgb m1 m2 h)\n                        (hue->rgb m1 m2 (- h (/ 1.0 3)))])]\n      (rgb [r g b]))))\n\n(defn- hue->rgb\n  [m1 m2 h]\n  (let [h (cond\n           (< h 0) (inc h)\n           (> h 1) (dec h)\n           :else h)]\n    (cond\n     (< (* 6 h) 1) (+ m1 (* (- m2 m1) h 6))\n     (< (* 2 h) 1) m2\n     (< (* 3 h) 2) (+ m1 (* (- m2 m1) (- (/ 2.0 3) h) 6))\n     :else m1)))\n\n(defn hsl->hex\n  \"Convert an HSL color map to a hexadecimal string.\"\n  [color]\n  (-> color hsl->rgb rgb->hex))\n\n(defn hex->hsl\n  \"Convert a hexadecimal color to an HSL color.\"\n  [color]\n  (-> color hex->rgb rgb->hsl))\n\n(def percent-clip\n  (partial util/clip 0 100))\n\n(def ^{:arglists '([n])\n       :private true}\n  zero-to-one-clip\n  (partial util/clip 0.0 1.0))\n\n(def rgb-clip\n  (partial util/clip 0 255))\n\n(defn as-hex\n  \"Convert a color to a hexadecimal string.\"\n  [x]\n  (cond\n   (hex? x) x\n   (rgb? x) (rgb->hex x)\n   (hsl? x) (hsl->hex x)\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-rgb\n  \"Convert a color to a RGB.\"\n  [x]\n  (cond\n   (rgb? x) x\n   (hsl? x) (hsl->rgb x)\n   (hex? x) (hex->rgb x)\n   (number? x) (rgb (map rgb-clip [x x x]))\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsl\n  \"Convert a color to a HSL.\"\n  [x]\n  (cond\n   (hsl? x) x\n   (rgb? x) (rgb->hsl x)\n   (hex? x) (hex->hsl x)\n   (number? x) (hsl [x (percent-clip x) (percent-clip x)])\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsla\n  \"Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\n  currently set on color.\"\n  [color]\n  (let [current-alpha (get color :alpha 1.00)]\n    (if (hsla? color)\n      color\n      (-> color as-hsl (assoc :alpha current-alpha)))))\n\n(defn- restrict-rgb\n  [m]\n  (select-keys m [:red :green :blue]))\n\n(defn- make-color-operation\n  [op]\n  (fn color-op\n    ([a] a)\n    ([a b]\n       (let [o (comp rgb-clip op)\n             a (restrict-rgb (as-rgb a))\n             b (restrict-rgb (as-rgb b))]\n         (as-color (merge-with o a b))))\n    ([a b & more]\n       (reduce color-op (color-op a b) more))))\n\n#?(:clj\n   (defmacro ^:private defcolor-operation [name operator]\n     `(def ~name (make-color-operation ~operator))))\n\n(defcolor-operation\n  ^{:doc \"Add the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color+ +)\n\n(defcolor-operation\n  ^{:doc \"Subtract the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color- -)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color* *)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color-div /)\n\n(defn- update-hsla-field\n  [color field f v]\n  (let [v (:magnitude v v)]\n    (-> color as-hsla (update field f v))))\n\n(defn rotate-hue\n  \"Rotates the hue value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :hue (comp #(mod % 360) +) amount))\n\n(defn saturate\n  \"Increase the saturation value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :saturation (comp percent-clip +) amount))\n\n(defn desaturate\n  \"Decrease the saturation value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :saturation (comp percent-clip -) amount))\n\n(defn lighten\n  \"Increase the lightness value a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :lightness (comp percent-clip +) amount))\n\n(defn darken\n  \"Decrease the lightness value a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :lightness (comp percent-clip -) amount))\n\n(defn transparentize\n  \"Decreases the alpha value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :alpha (comp zero-to-one-clip -) amount))\n\n(defn opacify\n  \"Increases the alpha value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :alpha (comp zero-to-one-clip +) amount))\n\n(defn invert\n  \"Return the inversion of a color.\"\n  [color]\n  (as-color (merge-with - {:red 255 :green 255 :blue 255} (as-rgb color))))\n\n(defn mix\n  \"Mix two or more colors by averaging their RGB channels.\"\n  ([color-1 color-2]\n     (let [c1 (restrict-rgb (as-rgb color-1))\n           c2 (restrict-rgb (as-rgb color-2))]\n       (as-color (merge-with util/average c1 c2))))\n  ([color-1 color-2 & more]\n     (reduce mix (mix color-1 color-2) more)))\n\n;;;; Color wheel functions.\n\n(defn complement\n  \"Return the complement of a color.\"\n  [color]\n  (rotate-hue color 180))\n\n(defn- hue-rotations\n  ([color & amounts]\n     (map (partial rotate-hue color) amounts)))\n\n(defn analogous\n  \"Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.\"\n  ([color]\n     (analogous color true))\n  ([color clockwise?]\n     (let [sign (if clockwise? + -)]\n       (hue-rotations color 0 (sign 30) (sign 60)))))\n\n(defn triad\n  \"Given a color return a triple of colors which are equidistance apart\n  on the color wheel.\"\n  [color]\n  (hue-rotations color 0 120 240))\n\n(defn split-complement\n  \"Given a color return a triple of the color and the two colors on\n  either side of it's complement.\"\n  ([color]\n     (split-complement color 130))\n  ([color distance-from-complement]\n     (let [d (util/clip 1 179 distance-from-complement)]\n         (hue-rotations color 0 d (- d)))))\n\n(defn tetrad\n  \"Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).\"\n  ([color]\n     (tetrad color 90))\n  ([color angle]\n     (let [a (util/clip 1 90 (Math/abs (:magnitude angle angle)))\n           color-2 (rotate-hue color a)]\n       [(rotate-hue color 0)\n        (complement color)\n        color-2\n        (complement color-2)])))\n\n(defn shades\n  \"Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.\"\n  ([color]\n     (shades color 10))\n  ([color step]\n     (let [c (as-hsl color)]\n       (for [i (range 1 (Math/floor (/ 100.0 step)))]\n         (assoc c :lightness (* i step))))))\n\n;; ---------------------------------------------------------------------\n;; CSS color name conversion\n\n(def color-name->hex\n  {:aquamarine \"#7fffd4\"\n   :aliceblue \"#f0f8ff\"\n   :antiquewhite \"#faebd7\"\n   :aqua \"#00ffff\"\n   :azure \"#f0ffff\"\n   :beige \"#f5f5dc\"\n   :bisque \"#ffe4c4\"\n   :black \"#000000\"\n   :blanchedalmond \"#ffebcd\"\n   :blue \"#0000ff\"\n   :blueviolet \"#8a2be2\"\n   :brown \"#a52a2a\"\n   :burlywood \"#deb887\"\n   :cadetblue \"#5f9ea0\"\n   :chartreuse \"#7fff00\"\n   :chocolate \"#d2691e\"\n   :coral \"#ff7f50\"\n   :cornflowerblue \"#6495ed\"\n   :cornsilk \"#fff8dc\"\n   :crimson \"#dc143c\"\n   :cyan \"#00ffff\"\n   :darkblue \"#00008b\"\n   :darkcyan \"#008b8b\"\n   :darkgoldenrod \"#b8860b\"\n   :darkgray \"#a9a9a9\"\n   :darkgreen \"#006400\"\n   :darkgrey \"#a9a9a9\"\n   :darkkhaki \"#bdb76b\"\n   :darkmagenta \"#8b008b\"\n   :darkolivegreen \"#556b2f\"\n   :darkorange \"#ff8c00\"\n   :darkorchid \"#9932cc\"\n   :darkred \"#8b0000\"\n   :darksalmon \"#e9967a\"\n   :darkseagreen \"#8fbc8f\"\n   :darkslateblue \"#483d8b\"\n   :darkslategray \"#2f4f4f\"\n   :darkslategrey \"#2f4f4f\"\n   :darkturquoise \"#00ced1\"\n   :darkviolet \"#9400d3\"\n   :deeppink \"#ff1493\"\n   :deepskyblue \"#00bfff\"\n   :dimgray \"#696969\"\n   :dimgrey \"#696969\"\n   :dodgerblue \"#1e90ff\"\n   :firebrick \"#b22222\"\n   :floralwhite \"#fffaf0\"\n   :forestgreen \"#228b22\"\n   :fuchsia \"#ff00ff\"\n   :gainsboro \"#dcdcdc\"\n   :ghostwhite \"#f8f8ff\"\n   :gold \"#ffd700\"\n   :goldenrod \"#daa520\"\n   :gray \"#808080\"\n   :green \"#008000\"\n   :greenyellow \"#adff2f\"\n   :honeydew \"#f0fff0\"\n   :hotpink \"#ff69b4\"\n   :indianred \"#cd5c5c\"\n   :indigo \"#4b0082\"\n   :ivory \"#fffff0\"\n   :khaki \"#f0e68c\"\n   :lavender \"#e6e6fa\"\n   :lavenderblush \"#fff0f5\"\n   :lawngreen \"#7cfc00\"\n   :lemonchiffon \"#fffacd\"\n   :lightblue \"#add8e6\"\n   :lightcoral \"#f08080\"\n   :lightcyan \"#e0ffff\"\n   :lightgoldenrodyellow \"#fafad2\"\n   :lightgray \"#d3d3d3\"\n   :lightgreen \"#90ee90\"\n   :lightgrey \"#d3d3d3\"\n   :lightpink \"#ffb6c1\"\n   :lightsalmon \"#ffa07a\"\n   :lightseagreen \"#20b2aa\"\n   :lightskyblue \"#87cefa\"\n   :lightslategray \"#778899\"\n   :lightslategrey \"#778899\"\n   :lightsteelblue \"#b0c4de\"\n   :lightyellow \"#ffffe0\"\n   :lime \"#00ff00\"\n   :limegreen \"#32cd32\"\n   :linen \"#faf0e6\"\n   :magenta \"#ff00ff\"\n   :maroon \"#800000\"\n   :mediumaquamarine \"#66cdaa\"\n   :mediumblue \"#0000cd\"\n   :mediumorchid \"#ba55d3\"\n   :mediumpurple \"#9370db\"\n   :mediumseagreen \"#3cb371\"\n   :mediumslateblue \"#7b68ee\"\n   :mediumspringgreen \"#00fa9a\"\n   :mediumturquoise \"#48d1cc\"\n   :mediumvioletred \"#c71585\"\n   :midnightblue \"#191970\"\n   :mintcream \"#f5fffa\"\n   :mistyrose \"#ffe4e1\"\n   :moccasin \"#ffe4b5\"\n   :navajowhite \"#ffdead\"\n   :navy \"#000080\"\n   :oldlace \"#fdf5e6\"\n   :olive \"#808000\"\n   :olivedrab \"#6b8e23\"\n   :orange \"#ffa500\"\n   :orangered \"#ff4500\"\n   :orchid \"#da70d6\"\n   :palegoldenrod \"#eee8aa\"\n   :palegreen \"#98fb98\"\n   :paleturquoise \"#afeeee\"\n   :palevioletred \"#db7093\"\n   :papayawhip \"#ffefd5\"\n   :peachpuff \"#ffdab9\"\n   :peru \"#cd853f\"\n   :pink \"#ffc0cb\"\n   :plum \"#dda0dd\"\n   :powderblue \"#b0e0e6\"\n   :purple \"#800080\"\n   :red \"#ff0000\"\n   :rosybrown \"#bc8f8f\"\n   :royalblue \"#4169e1\"\n   :saddlebrown \"#8b4513\"\n   :salmon \"#fa8072\"\n   :sandybrown \"#f4a460\"\n   :seagreen \"#2e8b57\"\n   :seashell \"#fff5ee\"\n   :sienna \"#a0522d\"\n   :silver \"#c0c0c0\"\n   :skyblue \"#87ceeb\"\n   :slateblue \"#6a5acd\"\n   :slategray \"#708090\"\n   :slategrey \"#708090\"\n   :snow \"#fffafa\"\n   :springgreen \"#00ff7f\"\n   :steelblue \"#4682b4\"\n   :tan \"#d2b48c\"\n   :teal \"#008080\"\n   :thistle \"#d8bfd8\"\n   :tomato \"#ff6347\"\n   :turquoise \"#40e0d0\"\n   :violet \"#ee82ee\"\n   :wheat \"#f5deb3\"\n   :white \"#ffffff\"\n   :whitesmoke \"#f5f5f5\"\n   :yellow \"#ffff00\"\n   :yellowgreen \"#9acd32\"})\n\n(defn- ex-info-color-name\n  \"Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors.\"\n  [n]\n  (ex-info\n   (str \"Unknown color \" (pr-str n) \" see (:expected (ex-data e)) for a list of color names\")\n   {:given n\n    :expected (set (keys color-name->hex))}))\n\n(def\n  ^{:private true\n    :doc \"Helper function for from-name.\"}\n  color-name->color\n  (memoize (fn [k] (color-name->hex k))))\n\n(defn from-name\n  \"Given a CSS color name n return an instance of CSSColor.\"\n  [n]\n  (if-let [h (color-name->color (keyword n))]\n    h\n    (throw (ex-info-color-name n))))\n\n(defn- scale-color-value\n  ([value amount]\n    (scale-color-value value amount 0 100))\n  ([value amount min-val max-val]\n    (util/clip min-val max-val (* value (+ 1 (/ amount 100))))))\n\n\n(defn scale-lightness\n  \"Scales the lightness of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :lightness scale-color-value amount))\n\n(defn scale-saturation\n  \"Scales the saturation of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :saturation scale-color-value amount))\n\n(defn scale-alpha\n  \"Scales the alpha of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :alpha #(zero-to-one-clip (* %1 (+ 1 (/ %2 100)))) amount))\n\n(defn- decrown-hex [hex]\n  (string/replace hex #\"^#\" \"\"))\n\n(defn- crown-hex [hex]\n  (if (re-find #\"^#\" hex)\n    hex\n    (str \"#\" hex)))\n\n(defn- expand-hex\n  \"(expand-hex \\\"#abc\\\") -> \\\"aabbcc\\\"\n   (expand-hex \\\"333333\\\") -> \\\"333333\\\"\"\n  [hex]\n  (as-> (decrown-hex hex) _\n        (cond\n         (= 3 (count _)) (string/join (mapcat vector _ _))\n         (= 1 (count _)) (string/join (repeat 6 _))\n         :else _)))\n\n(defn- hex->long\n  \"(hex->long \\\"#abc\\\") -> 11189196\"\n  [hex]\n  (-> hex\n      (string/replace #\"^#\" \"\")\n      (expand-hex)\n      #?(:clj (Long/parseLong 16)\n         :cljs (js/parseInt 16))))\n\n(defn- long->hex\n  \"(long->hex 11189196) -> \\\"aabbcc\\\"\"\n  [long]\n  #?(:clj (Integer/toHexString long)\n     :cljs (.toString long 16)))\n\n(defn weighted-mix\n  \"`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string.\"\n  [color-1 color-2 weight]\n  (let [[weight-1 weight-2] (map #(/ % 100) [(- 100 weight) weight])\n        [long-1 long-2] (map (comp hex->long as-hex)\n                             [color-1 color-2])]\n    (-> (+ (* long-1 weight-1) (* long-2 weight-2))\n        (long->hex)\n        (expand-hex)\n        (crown-hex))))\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA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","names",["this__4380__auto__","k__4381__auto__","this__4382__auto__","k58917","else__4383__auto__","G__58922","cljs.core/Keyword","red","green","blue","hue","saturation","lightness","alpha","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__58923","vec__58925","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__58916","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this58918","other58919","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__58949","cljs.core/keyword-identical?","expr__58950","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","unused__26029__auto__","self__","G__58969","js/Error","args58921","cljs.core/aclone","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__58920","extmap__4419__auto__","G__58983","cljs.core/record?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/->CSSColor","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/map->CSSColor","this","k","missing","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-color","var_args","G__58987","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb","p__58990","vec__58991","r","g","b","vs","p1__58985#","cljs.core/every?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/between?","G__58995","cljs.core.ex_info","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb","G__59000","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgba","p__59001","vec__59002","a","G__59005","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba","G__59009","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl","p__59010","vec__59011","h","s","l","vec__59014","p1__59006#","cljs.core.map","G__59017","cljs.core/mod","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl","G__59026","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsla","p__59027","vec__59028","G__59031","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb?","color","cljs.core/map?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsla?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color?","x","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex-re","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex?","cljs.core/boolean","cljs.core/re-matches","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->rgb","temp__5735__auto__","vec__59040","_","hex","cljs.core.apply","cljs.core/str","p1__59037#","cljs.core.mapcat","cljs.core/re-seq","p1__59038#","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.string__GT_int","p__59047","map__59048","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb->hex","v","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.format","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.int__GT_string","clojure.string/replace","hex-part","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/trim-one","p__59060","map__59061","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb->hsl","vec__59068","p1__59057#","mx","x__4214__auto__","y__4215__auto__","mn","x__4217__auto__","y__4218__auto__","d","pred__59073","expr__59074","cljs.core/=","p__59083","map__59084","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl->rgb","vec__59089","m2","m1","p1__59080#","Math/round","G__59094","G__59095","G__59096","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hue->rgb","G__59099","G__59100","G__59101","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl->hex","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->hsl","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/percent-clip","cljs.core.partial","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/clip","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/zero-to-one-clip","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb-clip","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hex","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-rgb","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hsl","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hsla","current-alpha","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/restrict-rgb","m","cljs.core/select-keys","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/make-color-operation","op","o","cljs.core.comp","G__59121","cljs.core.merge_with","more","color-op","day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color+","cljs.core/+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-","cljs.core/-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color*","cljs.core/*","cljs.core//","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/update-hsla-field","field","f","cljs.core.update","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rotate-hue","amount","p1__59140#","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/saturate","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/desaturate","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/lighten","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/darken","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/transparentize","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/opacify","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/invert","G__59153","G__59158","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/mix","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq59155","G__59156","cljs.core/first","cljs.core/next","G__59157","self__4723__auto__","color-1","color-2","c1","c2","G__59163","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/average","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/complement","args__4742__auto__","argseq__4743__auto__","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hue-rotations","seq59169","G__59170","amounts","G__59182","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/analogous","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous","clockwise?","sign","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/triad","G__59190","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/split-complement","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement","distance-from-complement","G__59195","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/tetrad","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad","angle","Math/abs","G__59201","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/shades","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades","step","c","iter__4529__auto__","s__59204","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__59206","cljs.core/chunk-buffer","i__59205","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59203","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","i","cljs.core.range","Math/floor","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-name->hex","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/ex-info-color-name","n","cljs.core.pr_str","cljs.core/set","cljs.core/keys","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-name->color","cljs.core/memoize","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/from-name","temp__5733__auto__","cljs.core.keyword","G__59227","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-color-value","value","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value","min-val","max-val","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-lightness","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-saturation","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-alpha","p1__59230#","p2__59231#","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/decrown-hex","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/crown-hex","cljs.core/re-find","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/expand-hex","clojure.string.join","cljs.core/vector","cljs.core.repeat","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->long","js/parseInt","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/long->hex","long","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/weighted-mix","weight","vec__59247","vec__59250","weight-1","weight-2","p1__59244#","long-1","long-2","cljs.core/chunk-first"]],"~:used-vars",["^N",["~$cljs.core/mapcat","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex-re","~$clojure.string/join","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb?","~$cljs.core/comp","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/ex-info-color-name","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-color","~$cljs.core/str","~$cljs.core/re-seq","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/lighten","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/tetrad","~$cljs.core/pr-sequential-writer","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/update-hsla-field","~$cljs.core/vector?","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/transparentize","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color?","~$cljs.core/=","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hue-rotations","~$cljs.core/keys","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb","~$cljs.core/-assoc","~$cljs.core/re-matches","~$cljs.core/partial","~$cljs.core/-write","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/triad","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb->hsl","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex?","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/restrict-rgb","~$cljs.core/-iterator","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb-clip","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/from-name","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/crown-hex","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/shades","~$cljs.core/aclone","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/map->CSSColor","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl->rgb","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-color-value","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/split-complement","~$cljs.core/MapEntry","~$cljs.core/dissoc","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/weighted-mix","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-alpha","~$cljs.core/-with-meta","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/desaturate","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->rgb","~$cljs.core/concat","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-saturation","~$cljs.core/pr-str","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/zero-to-one-clip","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsla","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/make-color-operation","~$cljs.core/set","~$Math/floor","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/complement","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/saturate","~$cljs.core/memoize","~$cljs.core/-","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/-conj","~$cljs.core/update","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/trim-one","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/->CSSColor","~$cljs.core/map","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/decrown-hex","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/percent-clip","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hsl","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-","~$cljs.core/PersistentVector","~$cljs.core//","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-name->color","~$cljs.core/List","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hsla","~$js/parseInt","~$cljs.core/get","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-div","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/expand-hex","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsla?","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/mix","~$cljs.core/-nth","~$cljs.core/not-empty","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/opacify","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color+","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl->hex","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/between?","~$cljs.core/mod","~$cljs.core/*","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/clip","~$cljs.core/re-find","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/invert","~$cljs.core/-lookup","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rotate-hue","~$cljs.core/ex-info","~$cljs.core/nil-iter","~$clojure.string/replace","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color*","~$cljs.core/RecordIter","~$cljs.core/select-keys","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->long","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb->hex","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/long->hex","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-lightness","~$cljs.core/not","~$cljs.core/assoc","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgba","~$cljs.core/range","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-name->hex","~$cljs.core/repeat","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-rgb","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/darken","~$cljs.core/+","~$cljs.core/every?","~$js/Error","~$cljs.core/vector","~$cljs.core/boolean","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/string->int","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hue->rgb","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hex","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/analogous","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->hsl","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl?"]]],"~:cache-keys",["~#cmap",[["^1?","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^[","~$goog.dom.HtmlElement"]]],["^1?","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","~$goog.array","~$goog.asserts"]]],["^1?","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","~$goog.string"]]],["^1?","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4N","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1?","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4O","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4S"]]],["^1?","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4O"]]],["^1?","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4O"]]],"~:SHADOW-TIMESTAMP",[1596134675000,1596134675000,1594142852000],["^1?","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4O","~$goog.reflect"]]],["^1?","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4O","~$goog.html.trustedtypes","^4V","^4W","^4X","^4Y"]]],["^1?","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc"],["b4130a91660ba19f2a9934384b29294a566bfd5d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^Z","^V","^X"]]],["^1?","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4N","^4O","~$goog.html.SafeUrl","^4X","^4Y","^4S"]]],["^1?","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4O","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^51","^4U","~$goog.html.uncheckedconversions","^4X","^4S"]]],["^1?","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1?","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4N","^4O","~$goog.dom.TagName","~$goog.dom.tags","^55","^56","~$goog.html.SafeStyleSheet","^51","^4U","^50","^4V","^4W","~$goog.labs.userAgent.browser","^4R","^4X","^4Y","^4S"]]],["^1?","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4R"]]],["^1?","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1?","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4N","^4O","^4P","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1?","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",[]]],["^1?","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4N","^4R"]]],["^1?","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^Z","^4P","~$goog.string.StringBuffer"]]],["^1?","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","~$goog.dom.safe","^57","^4X","^4S"]]],["^1?","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/types.cljc"],["b4130a91660ba19f2a9934384b29294a566bfd5d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^Z"]]],["^1?","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4S"]]],["^1?","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/util.cljc"],["b4130a91660ba19f2a9934384b29294a566bfd5d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^Z","^V","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.types","^4P","~$goog.string.format"]]],["^1?","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4N","^4O","^53","~$goog.math"]]],["^1?","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4O","^54","^55","^56","^5<","^51","^4U","^4X","^4S"]]],["^1?","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^["]]],["^1?","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","~$goog.math.Long","~$goog.math.Integer","^4P","^4R","^4N","~$goog.Uri","^5E"]]],["^1?","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4O","^50","^4X","^4Y"]]],["^1?","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4N","^4O","^56","^4R","^4X","^4Y","^4S"]]],["^1?","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4["]]],["^1?","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4N","^4O","^4P"]]],["^1?","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4I",["^ ","^4J",null,"^4K",["^N",[]],"^4L",["^[","^4O","^4Y"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/day8/re-frame/re-frame-10x/0.7.0/re-frame-10x-0.7.0.jar!/day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc",1596223609000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/day8/re-frame/re-frame-10x/0.7.0/re-frame-10x-0.7.0.jar!/day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/util.cljc",1596223609000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1594134806000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/day8/re-frame/re-frame-10x/0.7.0/re-frame-10x-0.7.0.jar!/day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/types.cljc",1596223609000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1594142858000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Utilities for color creation, conversion, and manipulation.","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",1,"^9",33,"^:",1,"^;",90,"^<",true],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",["^ ","^K","^L"],"^M",["^N",["^O"]],"^P",["^ "],"^Q","^L","^T",null,"^U",["^ ","^V","^V","^W","^V","^X","^X","^Y","^X","^Z","^Z","^[","^["],"^10",["^N",["^11","^12"]],"~:shadow/js-access-global",["^N",["Error","parseInt"]],"^13",null,"~:defs",["^ ","~$color+",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",283,"^9",3,"^:",283,"^;",9,"^6","Add the RGB components of two or more colors.","~:arglists",["^15",["~$quote",["^15",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","~$more"]]]]]],"^Q","^3L","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",9,"^9",1,"^8",280,"^:",283,"~:tag","~$function","^6B",["^15",["^6C",["^15",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^6D"]]]]],"^6","Add the RGB components of two or more colors."],"~$as-hsla",["^ ","~:protocol-inline",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",251,"^9",7,"^:",251,"^;",14,"^6B",["^15",["^6C",["^15",[["~$color"]]]]],"^6","Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\n  currently set on color."],"^Q","^3B","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",14,"~:method-params",["^15",[["^6I"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^9",1,"~:variadic?",false,"^8",251,"~:ret-tag",["^N",[null,"~$clj","~$any"]],"^:",251,"~:max-fixed-arity",1,"~:fn-var",true,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\n  currently set on color."],"~$opacify",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",335,"^9",7,"^:",335,"^;",14,"^6B",["^15",["^6C",["^15",[["^6I","~$amount"]]]]],"^6","Increases the alpha value of a given color by amount."],"^Q","^3K","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",14,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",335,"^6N",["^N",["^6O","^6P"]],"^:",335,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Increases the alpha value of a given color by amount."],"~$mix",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",345,"^9",7,"^:",345,"^;",10,"^6B",["^15",["^6C",["^15",[["~$color-1","~$color-2"],["^6V","^6W","~$&","^6D"]]]]],"^6","Mix two or more colors by averaging their RGB channels.","~:top-fn",["^ ","^6M",true,"~:fixed-arity",2,"^6Q",2,"^6J",[["^6V","^6W"]],"^6B",["^15",[["^6V","^6W"],["^6V","^6W","~$&","^6D"]]],"^6L",["^15",[null,null]]]],"^Q","^3H","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",10,"^6X",["^ ","^6M",true,"^6Y",2,"^6Q",2,"^6J",[["^6V","^6W"]],"^6B",["^15",[["^6V","^6W"],["^6V","^6W","~$&","^6D"]]],"^6L",["^15",[null,null]]],"^6J",[["^6V","^6W"]],"^6K",null,"^6Y",2,"^6L",["^15",[null,null]],"^9",1,"^6M",true,"~:methods",[["^ ","^6Y",2,"^6M",false,"^6E","^6P"],["^ ","^6Y",2,"^6M",true,"^6E",["^N",[null,"^6P"]]]],"^8",345,"^:",345,"^6Q",2,"^6R",true,"^6B",["^15",[["^6V","^6W"],["^6V","^6W","~$&","^6D"]]],"^6","Mix two or more colors by averaging their RGB channels."],"~$hsla?",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",101,"^9",7,"^:",101,"^;",12,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return true if color is an HSLA color."],"^Q","^3G","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",12,"^6J",["^15",[["^6I"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",101,"^6N","~$boolean","^:",101,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return true if color is an HSLA color."],"~$color-name->color",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",579,"^9",3,"^:",579,"^;",20,"~:private",true,"^6","Helper function for from-name."],"^72",true,"^Q","^3@","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^9",1,"^8",576,"^:",579,"^6E","^6F","^6","Helper function for from-name."],"~$expand-hex",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",622,"^9",8,"^:",622,"^;",18,"^72",true,"^6B",["^15",["^6C",["^15",[["~$hex"]]]]],"^6","(expand-hex \"#abc\") -> \"aabbcc\"\n   (expand-hex \"333333\") -> \"333333\""],"^72",true,"^Q","^3F","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",18,"^6J",["^15",[["^74"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",622,"^6N","^W","^:",622,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^74"]]]]],"^6","(expand-hex \"#abc\") -> \"aabbcc\"\n   (expand-hex \"333333\") -> \"333333\""],"~$invert",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",340,"^9",7,"^:",340,"^;",13,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return the inversion of a color."],"^Q","^3S","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^6J",["^15",[["^6I"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",340,"^6N","^6P","^:",340,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return the inversion of a color."],"~$rotate-hue",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",305,"^9",7,"^:",305,"^;",17,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Rotates the hue value of a given color by amount."],"^Q","^3U","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",305,"^6N",["^N",["^6O","^6P"]],"^:",305,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Rotates the hue value of a given color by amount."],"~$color*",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",293,"^9",3,"^:",293,"^;",9,"^6","Multiply the RGB components of two or more colors.","^6B",["^15",["^6C",["^15",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^6D"]]]]]],"^Q","^3Y","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",9,"^9",1,"^8",290,"^:",293,"^6E","^6F","^6B",["^15",["^6C",["^15",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^6D"]]]]],"^6","Multiply the RGB components of two or more colors."],"~$hsl->hex",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",201,"^9",7,"^:",201,"^;",15,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Convert an HSL color map to a hexadecimal string."],"^Q","^3M","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^6J",["^15",[["^6I"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",201,"^6N","^6P","^:",201,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Convert an HSL color map to a hexadecimal string."],"~$rgb->hex",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",135,"^9",7,"^:",135,"^;",15,"^6B",["^15",["^6C",["^15",[[["^ ","~$r","~:red","~$g","~:green","~$b","~:blue"]]]]]],"^6","Convert an RGB color map to a hexadecimal color."],"^Q","^41","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^6J",["^15",[["~$p__59047"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",135,"^:",135,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[[["^ ","~$r","^7:","~$g","^7;","~$b","^7<"]]]]]],"^6","Convert an RGB color map to a hexadecimal color."],"~$as-hex",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",222,"^9",7,"^:",222,"^;",13,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Convert a color to a hexadecimal string."],"^Q","^4C","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^6J",["^15",[["~$x"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",222,"^6N",["^N",[null,"^6P"]],"^:",222,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Convert a color to a hexadecimal string."],"~$analogous",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",365,"^9",7,"^:",365,"^;",16,"^6B",["^15",["^6C",["^15",[["^6I"],["^6I","~$clockwise?"]]]]],"^6","Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.","^6X",["^ ","^6M",false,"^6Y",2,"^6Q",2,"^6J",[["^6I"],["^6I","^7@"]],"^6B",["^15",[["^6I"],["^6I","^7@"]]],"^6L",["^15",[null,null]]]],"^Q","^4D","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",16,"^6X",["^ ","^6M",false,"^6Y",2,"^6Q",2,"^6J",[["^6I"],["^6I","^7@"]],"^6B",["^15",[["^6I"],["^6I","^7@"]]],"^6L",["^15",[null,null]]],"^6J",[["^6I"],["^6I","^7@"]],"^6K",null,"^6Y",2,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^6Z",[["^ ","^6Y",1,"^6M",false,"^6E","^6P"],["^ ","^6Y",2,"^6M",false,"^6E","~$cljs.core/LazySeq"]],"^8",365,"^:",365,"^6Q",2,"^6R",true,"^6B",["^15",[["^6I"],["^6I","^7@"]]],"^6","Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction."],"~$long->hex",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",641,"^9",8,"^:",641,"^;",17,"^72",true,"^6B",["^15",["^6C",["^15",[["~$long"]]]]],"^6","(long->hex 11189196) -> \"aabbcc\""],"^72",true,"^Q","^42","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^6J",["^15",[["^7C"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",641,"^6N","^6P","^:",641,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^7C"]]]]],"^6","(long->hex 11189196) -> \"aabbcc\""],"~$rgba",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",56,"^9",7,"^:",56,"^;",11,"^6B",["^15",["^6C",["^15",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]]]],"^6","Create an RGBA color.","^6X",["^ ","^6M",false,"^6Y",4,"^6Q",4,"^6J",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]],"^6B",["^15",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^6L",["^15",[null,null]]]],"^Q","^46","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^6X",["^ ","^6M",false,"^6Y",4,"^6Q",4,"^6J",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]],"^6B",["^15",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^6L",["^15",[null,null]]],"^6J",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]],"^6K",null,"^6Y",4,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^6Z",[["^ ","^6Y",1,"^6M",false,"^6E","^6P"],["^ ","^6Y",4,"^6M",false,"^6E","^6P"]],"^8",56,"^:",56,"^6Q",4,"^6R",true,"^6B",["^15",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^6","Create an RGBA color."],"~$color-name->hex",["^ ","^Q","^48","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",419,"^9",1,"^:",419,"^;",21,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",419,"^9",6,"^:",419,"^;",21],"^6E","~$cljs.core/IMap"],"~$hex->long",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",632,"^9",8,"^:",632,"^;",17,"^72",true,"^6B",["^15",["^6C",["^15",[["^74"]]]]],"^6","(hex->long \"#abc\") -> 11189196"],"^72",true,"^Q","^40","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^6J",["^15",[["^74"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",632,"^6N","~$js","^:",632,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^74"]]]]],"^6","(hex->long \"#abc\") -> 11189196"],"~$scale-lightness",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",596,"^9",7,"^:",596,"^;",22,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Scales the lightness of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"^Q","^43","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",22,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",596,"^6N",["^N",["^6O","^6P"]],"^:",596,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Scales the lightness of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"~$darken",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",325,"^9",7,"^:",325,"^;",13,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Decrease the lightness value a given color by amount."],"^Q","^4;","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",325,"^6N",["^N",["^6O","^6P"]],"^:",325,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Decrease the lightness value a given color by amount."],"~$hue->rgb",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",189,"^9",8,"^:",189,"^;",16,"^72",true,"^6B",["^15",["^6C",["^15",[["~$m1","~$m2","~$h"]]]]]],"^72",true,"^Q","^4B","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",16,"^6J",["^15",[["^7L","^7M","~$h"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",189,"^6N",["^N",[null,"~$number"]],"^:",189,"^6Q",3,"^6R",true,"^6B",["^15",["^6C",["^15",[["^7L","^7M","~$h"]]]]]],"~$hsl?",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",95,"^9",7,"^:",95,"^;",11,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return true if color is an HSL color."],"^Q","^4F","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^6J",["^15",[["^6I"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",95,"^6N","^70","^:",95,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return true if color is an HSL color."],"~$hex->hsl",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",206,"^9",7,"^:",206,"^;",15,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Convert a hexadecimal color to an HSL color."],"^Q","^4E","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^6J",["^15",[["^6I"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",206,"^6N",["^N",[null,"^6P"]],"^:",206,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Convert a hexadecimal color to an HSL color."],"~$as-rgb",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",231,"^9",7,"^:",231,"^;",13,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Convert a color to a RGB."],"^Q","^4:","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^6J",["^15",[["~$x"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",231,"^6N",["^N",[null,"^6P","~$clj-nil"]],"^:",231,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Convert a color to a RGB."],"~$from-name",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",582,"^9",7,"^:",582,"^;",16,"^6B",["^15",["^6C",["^15",[["~$n"]]]]],"^6","Given a CSS color name n return an instance of CSSColor."],"^Q","^2>","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",16,"^6J",["^15",[["~$n"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",582,"^6N","^6P","^:",582,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$n"]]]]],"^6","Given a CSS color name n return an instance of CSSColor."],"~$as-color",["^ ","^Q","^1Q","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",44,"^9",1,"^:",44,"^;",14,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",44,"^9",6,"^:",44,"^;",14]],"~$restrict-rgb",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",260,"^9",8,"^:",260,"^;",20,"^72",true,"^6B",["^15",["^6C",["^15",[["~$m"]]]]]],"^72",true,"^Q","^2;","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^6J",["^15",[["~$m"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",260,"^6N","^6O","^:",260,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$m"]]]]]],"~$rgb->hsl",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",146,"^9",7,"^:",146,"^;",15,"^6B",["^15",["^6C",["^15",[[["^ ","~:keys",["~$red","~$green","~$blue"],"^1:","^6I"]]]]]],"^6","Convert an RGB color map to an HSL color map."],"^Q","^29","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^6J",["^15",[["~$p__59060"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",146,"^6N",["^N",[null,"^6P"]],"^:",146,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[[["^ ","^7W",["^7X","^7Y","^7Z"],"^1:","^6I"]]]]]],"^6","Convert an RGB color map to an HSL color map."],"~$ex-info-color-name",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",567,"^9",8,"^:",567,"^;",26,"^72",true,"^6B",["^15",["^6C",["^15",[["~$n"]]]]],"^6","Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors."],"^72",true,"^Q","^1P","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",26,"^6J",["^15",[["~$n"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",567,"^6N","^6P","^:",567,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$n"]]]]],"^6","Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors."],"~$rgb",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",46,"^9",7,"^:",46,"^;",10,"^6B",["^15",["^6C",["^15",[[["~$r","~$g","~$b","^1:","~$vs"]],["~$r","~$g","~$b"]]]]],"^6","Create an RGB color.","^6X",["^ ","^6M",false,"^6Y",3,"^6Q",3,"^6J",[[["~$r","~$g","~$b","^1:","^82"]],["~$r","~$g","~$b"]],"^6B",["^15",[[["~$r","~$g","~$b","^1:","^82"]],["~$r","~$g","~$b"]]],"^6L",["^15",[null,null]]]],"^Q","^23","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",10,"^6X",["^ ","^6M",false,"^6Y",3,"^6Q",3,"^6J",[[["~$r","~$g","~$b","^1:","^82"]],["~$r","~$g","~$b"]],"^6B",["^15",[[["~$r","~$g","~$b","^1:","^82"]],["~$r","~$g","~$b"]]],"^6L",["^15",[null,null]]],"^6J",[[["~$r","~$g","~$b","^1:","^82"]],["~$r","~$g","~$b"]],"^6K",null,"^6Y",3,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^6Z",[["^ ","^6Y",1,"^6M",false,"^6E","^6P"],["^ ","^6Y",3,"^6M",false,"^6E","^6P"]],"^8",46,"^:",46,"^6Q",3,"^6R",true,"^6B",["^15",[[["~$r","~$g","~$b","^1:","^82"]],["~$r","~$g","~$b"]]],"^6","Create an RGB color."],"~$tetrad",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",390,"^9",7,"^:",390,"^;",13,"^6B",["^15",["^6C",["^15",[["^6I"],["^6I","~$angle"]]]]],"^6","Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).","^6X",["^ ","^6M",false,"^6Y",2,"^6Q",2,"^6J",[["^6I"],["^6I","^84"]],"^6B",["^15",[["^6I"],["^6I","^84"]]],"^6L",["^15",[null,null]]]],"^Q","^1V","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^6X",["^ ","^6M",false,"^6Y",2,"^6Q",2,"^6J",[["^6I"],["^6I","^84"]],"^6B",["^15",[["^6I"],["^6I","^84"]]],"^6L",["^15",[null,null]]],"^6J",[["^6I"],["^6I","^84"]],"^6K",null,"^6Y",2,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^6Z",[["^ ","^6Y",1,"^6M",false,"^6E","^6P"],["^ ","^6Y",2,"^6M",false,"^6E","~$cljs.core/IVector"]],"^8",390,"^:",390,"^6Q",2,"^6R",true,"^6B",["^15",[["^6I"],["^6I","^84"]]],"^6","Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed)."],"~$hsl",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",66,"^9",7,"^:",66,"^;",10,"^6B",["^15",["^6C",["^15",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]]]],"^6","Create an HSL color.","^6X",["^ ","^6M",false,"^6Y",3,"^6Q",3,"^6J",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]],"^6B",["^15",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^6L",["^15",[null,null]]]],"^Q","^1U","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",10,"^6X",["^ ","^6M",false,"^6Y",3,"^6Q",3,"^6J",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]],"^6B",["^15",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^6L",["^15",[null,null]]],"^6J",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]],"^6K",null,"^6Y",3,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^6Z",[["^ ","^6Y",1,"^6M",false,"^6E","^6P"],["^ ","^6Y",3,"^6M",false,"^6E","^6P"]],"^8",66,"^:",66,"^6Q",3,"^6R",true,"^6B",["^15",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^6","Create an HSL color."],"~$hex-re",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",117,"^9",3,"^:",117,"^;",9,"^6","Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \"#\". The color portion is captured."],"^Q","^1L","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",9,"^9",1,"^8",112,"^:",117,"^6E","^6P","^6","Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \"#\". The color portion is captured."],"~$rgb?",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",89,"^9",7,"^:",89,"^;",11,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return true if color is an RGB color."],"^Q","^1N","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^6J",["^15",[["^6I"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",89,"^6N","^70","^:",89,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return true if color is an RGB color."],"~$color?",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",107,"^9",7,"^:",107,"^;",13,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Return true if x is a color."],"^Q","^1[","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^6J",["^15",[["~$x"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",107,"^6N","^70","^:",107,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Return true if x is a color."],"~$hue-rotations",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",361,"^9",8,"^:",361,"^;",21,"^72",true,"^6B",["^15",["^6C",["^15",[["^6I","~$&","~$amounts"]]]]],"^6X",["^ ","^6M",true,"^6Y",1,"^6Q",1,"^6J",[["^15",["^6I","^8;"]]],"^6B",["^15",[["^6I","~$&","^8;"]]],"^6L",["^15",[null]]]],"^72",true,"^Q","^21","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",21,"^6X",["^ ","^6M",true,"^6Y",1,"^6Q",1,"^6J",[["^15",["^6I","^8;"]]],"^6B",["^15",[["^6I","~$&","^8;"]]],"^6L",["^15",[null]]],"^6J",[["^15",["^6I","^8;"]]],"^6K",null,"^6Y",1,"^6L",["^15",[null]],"^9",1,"^6M",true,"^6Z",[["^ ","^6Y",1,"^6M",true,"^6E","^7A"]],"^8",361,"^6N","^6P","^:",361,"^6Q",1,"^6R",true,"^6B",["^15",[["^6I","~$&","^8;"]]]],"~$lighten",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",320,"^9",7,"^:",320,"^;",14,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Increase the lightness value a given color by amount."],"^Q","^1T","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",14,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",320,"^6N",["^N",["^6O","^6P"]],"^:",320,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Increase the lightness value a given color by amount."],"~$crown-hex",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",617,"^9",8,"^:",617,"^;",17,"^72",true,"^6B",["^15",["^6C",["^15",[["^74"]]]]]],"^72",true,"^Q","^2C","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^6J",["^15",[["^74"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",617,"^6N",["^N",[null,"^W"]],"^:",617,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^74"]]]]]],"~$transparentize",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",330,"^9",7,"^:",330,"^;",21,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Decreases the alpha value of a given color by amount."],"^Q","^1Z","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",21,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",330,"^6N",["^N",["^6O","^6P"]],"^:",330,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Decreases the alpha value of a given color by amount."],"~$hex?",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",119,"^9",7,"^:",119,"^;",11,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Returns true if x is a hexadecimal color."],"^Q","^2:","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^6J",["^15",[["~$x"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",119,"^6N","^70","^:",119,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Returns true if x is a hexadecimal color."],"~$update-hsla-field",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",300,"^9",8,"^:",300,"^;",25,"^72",true,"^6B",["^15",["^6C",["^15",[["^6I","~$field","~$f","~$v"]]]]]],"^72",true,"^Q","^1X","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",25,"^6J",["^15",[["^6I","^8A","~$f","~$v"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",300,"^6N",["^N",["^6O","^6P"]],"^:",300,"^6Q",4,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^8A","~$f","~$v"]]]]]],"~$scale-color-value",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",589,"^9",8,"^:",589,"^;",25,"^72",true,"^6B",["^15",["^6C",["^15",[["~$value","^6T"],["^8C","^6T","~$min-val","~$max-val"]]]]],"^6X",["^ ","^6M",false,"^6Y",4,"^6Q",4,"^6J",[["^8C","^6T"],["^8C","^6T","^8D","^8E"]],"^6B",["^15",[["^8C","^6T"],["^8C","^6T","^8D","^8E"]]],"^6L",["^15",[null,null]]]],"^72",true,"^Q","^2H","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",25,"^6X",["^ ","^6M",false,"^6Y",4,"^6Q",4,"^6J",[["^8C","^6T"],["^8C","^6T","^8D","^8E"]],"^6B",["^15",[["^8C","^6T"],["^8C","^6T","^8D","^8E"]]],"^6L",["^15",[null,null]]],"^6J",[["^8C","^6T"],["^8C","^6T","^8D","^8E"]],"^6K",null,"^6Y",4,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^6Z",[["^ ","^6Y",2,"^6M",false,"^6E","^6P"],["^ ","^6Y",4,"^6M",false,"^6E","^6P"]],"^8",589,"^:",589,"^6Q",4,"^6R",true,"^6B",["^15",[["^8C","^6T"],["^8C","^6T","^8D","^8E"]]]],"~$rgb-clip",["^ ","^Q","^2=","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",219,"^9",1,"^:",219,"^;",14,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",219,"^9",6,"^:",219,"^;",14],"^6E","^6F"],"~$triad",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",375,"^9",7,"^:",375,"^;",12,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Given a color return a triple of colors which are equidistance apart\n  on the color wheel."],"^Q","^28","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",12,"^6J",["^15",[["^6I"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",375,"^6N","^7A","^:",375,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Given a color return a triple of colors which are equidistance apart\n  on the color wheel."],"~$make-color-operation",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",264,"^9",8,"^:",264,"^;",28,"^72",true,"^6B",["^15",["^6C",["^15",[["~$op"]]]]]],"^72",true,"^Q","^2V","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",28,"^6J",["^15",[["^8I"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",264,"^6N","^6F","^:",264,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^8I"]]]]]],"~$as-hsl",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",241,"^9",7,"^:",241,"^;",13,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Convert a color to a HSL."],"^Q","^3<","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^6J",["^15",[["~$x"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",241,"^6N",["^N",[null,"^6P"]],"^:",241,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$x"]]]]],"^6","Convert a color to a HSL."],"~$scale-alpha",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",608,"^9",7,"^:",608,"^;",18,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Scales the alpha of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"^Q","^2M","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",18,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",608,"^6N",["^N",["^6O","^6P"]],"^:",608,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Scales the alpha of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"~$split-complement",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",381,"^9",7,"^:",381,"^;",23,"^6B",["^15",["^6C",["^15",[["^6I"],["^6I","~$distance-from-complement"]]]]],"^6","Given a color return a triple of the color and the two colors on\n  either side of it's complement.","^6X",["^ ","^6M",false,"^6Y",2,"^6Q",2,"^6J",[["^6I"],["^6I","^8M"]],"^6B",["^15",[["^6I"],["^6I","^8M"]]],"^6L",["^15",[null,null]]]],"^Q","^2I","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",23,"^6X",["^ ","^6M",false,"^6Y",2,"^6Q",2,"^6J",[["^6I"],["^6I","^8M"]],"^6B",["^15",[["^6I"],["^6I","^8M"]]],"^6L",["^15",[null,null]]],"^6J",[["^6I"],["^6I","^8M"]],"^6K",null,"^6Y",2,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^6Z",[["^ ","^6Y",1,"^6M",false,"^6E","^6P"],["^ ","^6Y",2,"^6M",false,"^6E","^7A"]],"^8",381,"^:",381,"^6Q",2,"^6R",true,"^6B",["^15",[["^6I"],["^6I","^8M"]]],"^6","Given a color return a triple of the color and the two colors on\n  either side of it's complement."],"~$weighted-mix",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",647,"^9",7,"^:",647,"^;",19,"^6B",["^15",["^6C",["^15",[["^6V","^6W","~$weight"]]]]],"^6","~`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string."],"^Q","^2L","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",19,"^6J",["^15",[["^6V","^6W","^8O"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",647,"^6N",["^N",[null,"^W"]],"^:",647,"^6Q",3,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6V","^6W","^8O"]]]]],"^6","~`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string."],"~$percent-clip",["^ ","^Q","^3;","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",211,"^9",1,"^:",211,"^;",18,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",211,"^9",6,"^:",211,"^;",18],"^6E","^6F"],"~$hsl->rgb",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",171,"^9",7,"^:",171,"^;",15,"^6B",["^15",["^6C",["^15",[[["^ ","^7W",["~$hue","~$saturation","~$lightness"],"^1:","^6I"]]]]]],"^6","Convert an HSL color map to an RGB color map."],"^Q","^2G","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^6J",["^15",[["~$p__59083"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",171,"^6N",["^N",[null,"^6P"]],"^:",171,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[[["^ ","^7W",["^8R","^8S","^8T"],"^1:","^6I"]]]]]],"^6","Convert an HSL color map to an RGB color map."],"~$shades",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",405,"^9",7,"^:",405,"^;",13,"^6B",["^15",["^6C",["^15",[["^6I"],["^6I","~$step"]]]]],"^6","Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.","^6X",["^ ","^6M",false,"^6Y",2,"^6Q",2,"^6J",[["^6I"],["^6I","^8W"]],"^6B",["^15",[["^6I"],["^6I","^8W"]]],"^6L",["^15",[null,null]]]],"^Q","^2D","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^6X",["^ ","^6M",false,"^6Y",2,"^6Q",2,"^6J",[["^6I"],["^6I","^8W"]],"^6B",["^15",[["^6I"],["^6I","^8W"]]],"^6L",["^15",[null,null]]],"^6J",[["^6I"],["^6I","^8W"]],"^6K",null,"^6Y",2,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^6Z",[["^ ","^6Y",1,"^6M",false,"^6E","^6P"],["^ ","^6Y",2,"^6M",false,"^6E","^7A"]],"^8",405,"^:",405,"^6Q",2,"^6R",true,"^6B",["^15",[["^6I"],["^6I","^8W"]]],"^6","Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list."],"~$hex->rgb",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",124,"^9",7,"^:",124,"^;",15,"^6B",["^15",["^6C",["^15",[["~$s"]]]]],"^6","Convert a hexadecimal color to an RGB color map."],"^Q","^2P","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^6J",["^15",[["~$s"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",124,"^6N",["^N",["^6P","^7R"]],"^:",124,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$s"]]]]],"^6","Convert a hexadecimal color to an RGB color map."],"~$map->CSSColor",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^9",12,"~:internal-ctor",true,"~:factory","~:map","^8",22,"^:",22,"^6B",["^15",["^6C",["^15",[["~$G__58920"]]]]],"^6","Factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor, taking a map of keywords to field values."],"^Q","^2F","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^6J",["^15",[["^91"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^8Z",true,"^6M",false,"^8[","^90","^8",22,"^6N","^2Y","^:",22,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^91"]]]]],"^6","Factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor, taking a map of keywords to field values."],"~$zero-to-one-clip",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",216,"^9",3,"^:",216,"^;",19,"^6B",["^15",["^6C",["^15",[["~$n"]]]]],"^72",true],"^72",true,"^Q","^2T","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",19,"^9",1,"^8",214,"^:",216,"^6E","^6F","^6B",["^15",["^6C",["^15",[["~$n"]]]]]],"~$scale-saturation",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",602,"^9",7,"^:",602,"^;",23,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Scales the saturation of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"^Q","^2R","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",23,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",602,"^6N",["^N",["^6O","^6P"]],"^:",602,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Scales the saturation of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"~$desaturate",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",315,"^9",7,"^:",315,"^;",17,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Decrease the saturation value of a given color by amount."],"^Q","^2O","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",315,"^6N",["^N",["^6O","^6P"]],"^:",315,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Decrease the saturation value of a given color by amount."],"~$hsla",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",79,"^9",7,"^:",79,"^;",11,"^6B",["^15",["^6C",["^15",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]]]],"^6","Create an HSLA color.","^6X",["^ ","^6M",false,"^6Y",4,"^6Q",4,"^6J",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]],"^6B",["^15",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^6L",["^15",[null,null]]]],"^Q","^2U","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^6X",["^ ","^6M",false,"^6Y",4,"^6Q",4,"^6J",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]],"^6B",["^15",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^6L",["^15",[null,null]]],"^6J",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]],"^6K",null,"^6Y",4,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^6Z",[["^ ","^6Y",1,"^6M",false,"^6E","^6P"],["^ ","^6Y",4,"^6M",false,"^6E","^6P"]],"^8",79,"^:",79,"^6Q",4,"^6R",true,"^6B",["^15",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^6","Create an HSLA color."],"~$->CSSColor",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^9",12,"^8Z",true,"^8[","~:positional","^8",22,"^:",22,"^6B",["^15",["^6C",["^15",[["^7X","^7Y","^7Z","^8R","^8S","^8T","~$alpha"]]]]],"^6","Positional factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor."],"^Q","^38","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^6J",["^15",[["^7X","^7Y","^7Z","^8R","^8S","^8T","^98"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^8Z",true,"^6M",false,"^8[","^97","^8",22,"^6N","^2Y","^:",22,"^6Q",7,"^6R",true,"^6B",["^15",["^6C",["^15",[["^7X","^7Y","^7Z","^8R","^8S","^8T","^98"]]]]],"^6","Positional factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor."],"~$CSSColor",["^ ","~:num-fields",7,"~:protocols",["^N",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/IFn","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","^7F","~$cljs.core/ILookup"]],"^Q","^2Y","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"~:type",true,"^9",12,"^8Z",true,"^8",22,"~:record",true,"^:",22,"^6E","^6F","~:skip-protocol-flag",["^N",["^9<","^9=","^9>","^9?","^9@","^9A","^9B","^9C","^9D","^9E","^9F","^9G","^9H","^9I","^7F","^9J"]]],"^O",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",356,"^9",7,"^:",356,"^;",17,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return the complement of a color."],"^Q","^2Z","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^6J",["^15",[["^6I"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",356,"^6N",["^N",["^6O","^6P"]],"^:",356,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I"]]]]],"^6","Return the complement of a color."],"~$saturate",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",310,"^9",7,"^:",310,"^;",15,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Increase the saturation value of a given color by amount."],"^Q","^2[","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^6J",["^15",[["^6I","^6T"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",310,"^6N",["^N",["^6O","^6P"]],"^:",310,"^6Q",2,"^6R",true,"^6B",["^15",["^6C",["^15",[["^6I","^6T"]]]]],"^6","Increase the saturation value of a given color by amount."],"~$color-div",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",298,"^9",3,"^:",298,"^;",12,"^6","Multiply the RGB components of two or more colors.","^6B",["^15",["^6C",["^15",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^6D"]]]]]],"^Q","^3E","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",12,"^9",1,"^8",295,"^:",298,"^6E","^6F","^6B",["^15",["^6C",["^15",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^6D"]]]]],"^6","Multiply the RGB components of two or more colors."],"~$color-",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",288,"^9",3,"^:",288,"^;",9,"^6","Subtract the RGB components of two or more colors.","^6B",["^15",["^6C",["^15",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^6D"]]]]]],"^Q","^3=","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",9,"^9",1,"^8",285,"^:",288,"^6E","^6F","^6B",["^15",["^6C",["^15",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^6D"]]]]],"^6","Subtract the RGB components of two or more colors."],"~$decrown-hex",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",614,"^9",8,"^:",614,"^;",19,"^72",true,"^6B",["^15",["^6C",["^15",[["^74"]]]]]],"^72",true,"^Q","^3:","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",19,"^6J",["^15",[["^74"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",614,"^6N","^W","^:",614,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["^74"]]]]]],"~$trim-one",["^ ","^6H",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",143,"^9",7,"^:",143,"^;",15,"^6B",["^15",["^6C",["^15",[["~$x"]]]]]],"^Q","^37","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^6J",["^15",[["~$x"]]],"^6K",null,"^6L",["^15",[null,null]],"^9",1,"^6M",false,"^8",143,"^6N",["^N",[null,"^7N"]],"^:",143,"^6Q",1,"^6R",true,"^6B",["^15",["^6C",["^15",[["~$x"]]]]]]],"^12",["^ ","^L","^L","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^10",["^N",["~:hue","~:aquamarine","~:lime","~:deepskyblue","~:darksalmon","~:antiquewhite","~:mediumturquoise","~:slategrey","~:slategray","~:sienna","~:orange","~:navajowhite","~:given","~:lavenderblush","~:firebrick","~:orangered","~:palevioletred","~:lawngreen","~:seashell","~:lightpink","~:darkolivegreen","~:aliceblue","~:gray","~:lightsteelblue","~:whitesmoke","~:darkgoldenrod","~:tan","~:bisque","~:white","~:else","~:lightgreen","~:saturation","~:darkseagreen","~:crimson","~:darkslategray","~:mistyrose","~:chocolate","^8R","~:yellow","~:cadetblue","~:navy","~:ghostwhite","~:dimgrey","~:seagreen","^7;","~:mediumseagreen","~:indigo","~:olivedrab","~:cyan","~:peachpuff","~:limegreen","~:mediumslateblue","~:violet","~:sandybrown","~:yellowgreen","~:mediumspringgreen","~:steelblue","~:rosybrown","~:cornflowerblue","~:ivory","~:lightgoldenrodyellow","~:magnitude","~:salmon","~:darkcyan","^8S","~:peru","~:cornsilk","~:lightslategray","~:blueviolet","~:forestgreen","~:lightseagreen","^7Y","~:gold","~:gainsboro","~:darkorchid","~:burlywood","~:lightskyblue","~:chartreuse","~:snow","~:moccasin","~:honeydew","~:aqua","~:darkred","~:mediumorchid","~:lightsalmon","~:saddlebrown","~:wheat","~:springgreen","~:lightslategrey","~:darkblue","~:powderblue","~:turquoise","~:blanchedalmond","~:papayawhip","~:slateblue","~:lightblue","~:skyblue","^7:","~:lightyellow","^7<","~:palegreen","~:greenyellow","~:khaki","~:maroon","~:expected","~:darkgrey","~:midnightblue","~:floralwhite","~:deeppink","~:paleturquoise","~:darkkhaki","~:azure","~:indianred","~:lightness","~:darkviolet","~:mediumpurple","~:fuchsia","~:alpha","~:coral","~:mediumvioletred","~:lemonchiffon","~:mediumblue","~:darkmagenta","~:goldenrod","~:darkorange","~:orchid","~:plum","~:pink","~:teal","~:magenta","~:lightgrey","~:purple","~:dodgerblue","~:darkturquoise","^7X","~:mintcream","^7Z","~:hotpink","~:thistle","~:royalblue","~:darkgreen","~:darkslateblue","~:silver","^8T","~:darkgray","~:oldlace","~:mediumaquamarine","~:brown","~:lightgray","~:olive","~:lightcoral","~:tomato","~:lightcyan","^98","~:linen","~:darkslategrey","~:lavender","~:dimgray","~:palegoldenrod","~:beige","~:black"]],"~:order",["^7:","^7;","^7<","^9T","^:G","^<;","^<?","^7X","^7Y","^7Z","^8R","^8S","^8T","^98","^;7","^:E","^9U","^9V","^9W","^9X","^9Y","^9Z","^9[","^:0","^:1","^:2","^:3","^:5","^:6","^:7","^:8","^:9","^::","^:;","^:<","^:=","^:>","^:?","^:@","^:A","^:B","^:C","^:D","^:F","^:H","^:I","^:J","^:K","^:L","^:M","^:N","^:O","^:P","^:Q","^:R","^:S","^:T","^:U","^:V","^:W","^:X","^:Y","^:Z","^:[","^;0","^;1","^;2","^;3","^;4","^;5","^;6","^;8","^;9","^;:","^;;","^;<","^;=","^;>","^;?","^;@","^;A","^;B","^;C","^;D","^;E","^;F","^;G","^;H","^;I","^;J","^;K","^;L","^;M","^;N","^;O","^;P","^;Q","^;R","^;S","^;T","^;U","^;V","^;W","^;X","^;Y","^;Z","^;[","^<0","^<1","^<3","^<4","^<5","^<6","^<7","^<8","^<9","^<:","^<<","^<=","^<>","^<@","^<A","^<B","^<C","^<D","^<E","^<F","^<G","^<H","^<I","^<J","^<K","^<L","^<M","^<N","^<O","^<P","^<Q","^<R","^<S","^<T","^<U","^<V","^<W","^<X","^<Y","^<Z","^<[","^=0","^=1","^=2","^=3","^=4","^=5","^=6","^=7","^=8","^=9","^=:","^:4","^<2"]],"^1;",["^ ","^12",["^N",[]],"^11",["^N",[]]],"^1<",["^ "],"^1=",["^[","^Z","^V","^X"]],"^S","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^N",[]],"~:compiler-options",["^4H",[["^=>","~:static-fns"],true,["^=>","~:shadow-tweaks"],null,["^=>","~:source-map-inline"],null,["^=>","~:elide-asserts"],false,["^=>","~:optimize-constants"],null,["^=>","^1B"],null,["^=>","~:external-config"],null,["^=>","~:tooling-config"],null,["^=>","~:emit-constants"],null,["^=>","~:load-tests"],null,["^=>","~:form-size-threshold"],null,["^=>","~:data-readers"],null,["^=>","~:infer-externs"],"~:auto",["^=>","^1D"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^=>","~:fn-invoke-direct"],null,["^=>","~:source-map"],"/dev/null"]]]