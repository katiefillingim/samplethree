["^ ","~:output",["^ ","~:js","goog.provide('markdown.links');\r\nmarkdown.links.href = (function markdown$links$href(text,link,state){\r\nvar vec__74147 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),link);\r\nvar link__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74147,(0),null);\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74147,(1),null);\r\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"<a href='\"),link__$1,cljs.core.seq(\"'\"),(cljs.core.truth_(cljs.core.not_empty(title))?cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.str,\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(title)),\">\")):cljs.core.seq(\">\")),text,cljs.core.seq(\"</a>\"),state], 0));\r\n});\r\nmarkdown.links.img = (function markdown$links$img(var_args){\r\nvar args__4742__auto__ = [];\r\nvar len__4736__auto___74346 = arguments.length;\r\nvar i__4737__auto___74347 = (0);\r\nwhile(true){\r\nif((i__4737__auto___74347 < len__4736__auto___74346)){\r\nargs__4742__auto__.push((arguments[i__4737__auto___74347]));\r\n\r\nvar G__74348 = (i__4737__auto___74347 + (1));\r\ni__4737__auto___74347 = G__74348;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);\r\nreturn markdown.links.img.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);\r\n});\r\n\r\n(markdown.links.img.cljs$core$IFn$_invoke$arity$variadic = (function (alt,url,state,p__74167){\r\nvar vec__74169 = p__74167;\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74169,(0),null);\r\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"<img src=\\\"\"),url,cljs.core.seq(\"\\\" alt=\\\"\"),alt,(cljs.core.truth_(cljs.core.not_empty(title))?cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.str,\"\\\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(title),\" />\")):cljs.core.seq(\"\\\" />\")),state], 0));\r\n}));\r\n\r\n(markdown.links.img.cljs$lang$maxFixedArity = (3));\r\n\r\n/** @this {Function} */\r\n(markdown.links.img.cljs$lang$applyTo = (function (seq74155){\r\nvar G__74156 = cljs.core.first(seq74155);\r\nvar seq74155__$1 = cljs.core.next(seq74155);\r\nvar G__74157 = cljs.core.first(seq74155__$1);\r\nvar seq74155__$2 = cljs.core.next(seq74155__$1);\r\nvar G__74158 = cljs.core.first(seq74155__$2);\r\nvar seq74155__$3 = cljs.core.next(seq74155__$2);\r\nvar self__4723__auto__ = this;\r\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__74156,G__74157,G__74158,seq74155__$3);\r\n}));\r\n\r\nmarkdown.links.handle_img_link = (function markdown$links$handle_img_link(xs,state){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"[\",\"!\",\"[\"], null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),xs))){\r\nvar xs__$1 = cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),xs);\r\nvar vec__74176 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"]\"),xs__$1);\r\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74176,(0),null);\r\nvar xy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74176,(1),null);\r\nvar vec__74179 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\")\"),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),xy));\r\nvar url_title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74179,(0),null);\r\nvar zy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74179,(1),null);\r\nvar vec__74182 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),url_title);\r\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74182,(0),null);\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74182,(1),null);\r\nvar vec__74185 = markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(alt,url,state,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.not_empty(title)], 0));\r\nvar new_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74185,(0),null);\r\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74185,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(\"[\",new_text,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.rest(zy)], 0)),new_state], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xs,state], null);\r\n}\r\n});\r\nmarkdown.links.process_link_title = (function markdown$links$process_link_title(title,state){\r\nreturn cljs.core.first(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__74189_SHARP_,p2__74188_SHARP_){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(p2__74188_SHARP_,p1__74189_SHARP_);\r\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [title,state], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.common.italics,markdown.common.em,markdown.common.strong,markdown.common.bold,markdown.common.strikethrough], null)));\r\n});\r\nmarkdown.links.make_link = (function markdown$links$make_link(img_QMARK_){\r\nreturn (function markdown$links$make_link_$_link(text,p__74198){\r\nvar map__74199 = p__74198;\r\nvar map__74199__$1 = (((((!((map__74199 == null))))?(((((map__74199.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74199.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74199):map__74199);\r\nvar state = map__74199__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74199__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74199__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = code;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn codeblock;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar out = cljs.core.PersistentVector.EMPTY;\r\nvar tokens = cljs.core.seq(text);\r\nvar loop_state = state;\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(tokens)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(out),loop_state], null);\r\n} else {\r\nvar vec__74273 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"[\"),tokens);\r\nvar head = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74273,(0),null);\r\nvar xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74273,(1),null);\r\nvar vec__74276 = markdown.links.handle_img_link(xs,loop_state);\r\nvar xs__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74276,(0),null);\r\nvar loop_state__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74276,(1),null);\r\nvar vec__74279 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"]\"),xs__$1);\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74279,(0),null);\r\nvar ys = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74279,(1),null);\r\nvar vec__74282 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"(\"),ys);\r\nvar dud = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74282,(0),null);\r\nvar zs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74282,(1),null);\r\nvar vec__74285 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\")\"),zs);\r\nvar link__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74285,(0),null);\r\nvar tail = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74285,(1),null);\r\nif((((cljs.core.count(tail) < (1))) || ((cljs.core.count(link__$1) < (2))) || ((cljs.core.count(dud) > (1))))){\r\nvar G__74352 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title], 0));\r\nvar G__74353 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(dud,link__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([tail], 0));\r\nvar G__74354 = loop_state__$1;\r\nout = G__74352;\r\ntokens = G__74353;\r\nloop_state = G__74354;\r\ncontinue;\r\n} else {\r\nif(((cljs.core.not(img_QMARK_)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.last(head),\"!\")))){\r\nvar vec__74288 = markdown.links.href(cljs.core.rest(markdown.links.process_link_title(title,state)),cljs.core.rest(link__$1),loop_state__$1);\r\nvar link_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74288,(0),null);\r\nvar new_loop_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74288,(1),null);\r\nvar G__74355 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([link_text], 0));\r\nvar G__74356 = cljs.core.rest(tail);\r\nvar G__74357 = new_loop_state;\r\nout = G__74355;\r\ntokens = G__74356;\r\nloop_state = G__74357;\r\ncontinue;\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4115__auto__ = img_QMARK_;\r\nif(cljs.core.truth_(and__4115__auto__)){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.last(head),\"!\");\r\n} else {\r\nreturn and__4115__auto__;\r\n}\r\n})())){\r\nvar alt = cljs.core.rest(title);\r\nvar vec__74294 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),cljs.core.rest(link__$1));\r\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74294,(0),null);\r\nvar title__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74294,(1),null);\r\nvar title__$2 = markdown.links.process_link_title(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(title__$1)),loop_state__$1);\r\nvar vec__74297 = markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(alt,url,loop_state__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title__$2], 0));\r\nvar img_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74297,(0),null);\r\nvar new_loop_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74297,(1),null);\r\nvar G__74361 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.butlast(head),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([img_text], 0));\r\nvar G__74362 = cljs.core.rest(tail);\r\nvar G__74363 = new_loop_state;\r\nout = G__74361;\r\ntokens = G__74362;\r\nloop_state = G__74363;\r\ncontinue;\r\n} else {\r\nvar G__74364 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title,dud,link__$1], 0));\r\nvar G__74365 = tail;\r\nvar G__74366 = loop_state__$1;\r\nout = G__74364;\r\ntokens = G__74365;\r\nloop_state = G__74366;\r\ncontinue;\r\n\r\n}\r\n}\r\n}\r\n}\r\nbreak;\r\n}\r\n}\r\n});\r\n});\r\nmarkdown.links.link = markdown.links.make_link(false);\r\nmarkdown.links.image = markdown.links.make_link(true);\r\nmarkdown.links.reference = (function markdown$links$reference(text){\r\nreturn cljs.core.re_find(/^\\[[a-zA-Z0-9 \\-_\\.]+\\]:/,text);\r\n});\r\nmarkdown.links.parse_reference = (function markdown$links$parse_reference(reference,start){\r\nreturn clojure.string.split.cljs$core$IFn$_invoke$arity$3(clojure.string.trim(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(reference,start)),/\\s+/,(2));\r\n});\r\nmarkdown.links.parse_reference_link = (function markdown$links$parse_reference_link(line,references){\r\nvar trimmed = clojure.string.trim(line);\r\nvar temp__5735__auto__ = markdown.links.reference(trimmed);\r\nif(cljs.core.truth_(temp__5735__auto__)){\r\nvar link = temp__5735__auto__;\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(references,cljs.core.assoc,cljs.core.subs.cljs$core$IFn$_invoke$arity$3(link,(0),(cljs.core.count(link) - (1))),markdown.links.parse_reference(trimmed,(cljs.core.count(link) + (1))));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.links.replace_reference_link = (function markdown$links$replace_reference_link(references,reference){\r\nvar vec__74306 = clojure.string.split.cljs$core$IFn$_invoke$arity$3(reference,/\\]\\s*/,(2));\r\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74306,(0),null);\r\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74306,(1),null);\r\nvar vec__74309 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(references,id);\r\nvar link = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74309,(0),null);\r\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74309,(1),null);\r\nreturn [\"<a href='\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(link),\"'\",(cljs.core.truth_(alt)?[\" title='\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(alt,(1),(cljs.core.count(alt) - (1))),\"'\"].join(''):null),\">\",cljs.core.subs.cljs$core$IFn$_invoke$arity$2(title,(1)),\"</a>\"].join('');\r\n});\r\nmarkdown.links.encode_links = (function markdown$links$encode_links(links,i){\r\nreturn cljs.core.second(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__74312,link){\r\nvar vec__74313 = p__74312;\r\nvar i__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74313,(0),null);\r\nvar encoded = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74313,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(i__$1 + (1)),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(encoded,markdown.common.gen_token(i__$1),link)], null);\r\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i,cljs.core.PersistentArrayMap.EMPTY], null),links));\r\n});\r\nmarkdown.links.parse_links = (function markdown$links$parse_links(references,links){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__74317){\r\nvar vec__74318 = p__74317;\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74318,(0),null);\r\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74318,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,markdown.links.replace_reference_link(references,v)], null);\r\n}),links));\r\n});\r\nmarkdown.links.freeze_links = (function markdown$links$freeze_links(references,text,state){\r\nvar links = cljs.core.re_seq(/\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.]+\\]/,text);\r\nvar encoded_links = markdown.links.encode_links(links,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.count,cljs.core.PersistentVector.EMPTY)(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state)));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,p__74321){\r\nvar vec__74322 = p__74321;\r\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74322,(0),null);\r\nvar link = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74322,(1),null);\r\nreturn clojure.string.replace(s,link,id);\r\n}),text,encoded_links),cljs.core.update.cljs$core$IFn$_invoke$arity$4(state,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),cljs.core.merge,markdown.links.parse_links(references,encoded_links))], null);\r\n});\r\nmarkdown.links.reference_link = (function markdown$links$reference_link(text,p__74325){\r\nvar map__74326 = p__74325;\r\nvar map__74326__$1 = (((((!((map__74326 == null))))?(((((map__74326.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74326.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74326):map__74326);\r\nvar state = map__74326__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74326__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74326__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar references = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74326__$1,new cljs.core.Keyword(null,\"references\",\"references\",882562509));\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = (references == null);\r\nif(or__4126__auto__){\r\nreturn or__4126__auto__;\r\n} else {\r\nvar or__4126__auto____$1 = code;\r\nif(cljs.core.truth_(or__4126__auto____$1)){\r\nreturn or__4126__auto____$1;\r\n} else {\r\nreturn codeblock;\r\n}\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(markdown.links.reference(clojure.string.trim(text)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",state], null);\r\n} else {\r\nreturn markdown.links.freeze_links(references,text,state);\r\n\r\n}\r\n}\r\n});\r\nmarkdown.links.implicit_reference_link = (function markdown$links$implicit_reference_link(text,state){\r\nvar replacement_text = clojure.string.replace(text,/\\[([^\\]]+)\\]\\[\\]/,\"[$1][$1]\");\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [replacement_text,state], null);\r\n});\r\nmarkdown.links.footnote = (function markdown$links$footnote(text){\r\nreturn cljs.core.re_find(/^\\[\\^[a-zA-Z0-9_-]+\\]:/,text);\r\n});\r\nmarkdown.links.parse_footnote_link = (function markdown$links$parse_footnote_link(line,footnotes){\r\nvar trimmed = clojure.string.trim(line);\r\nvar temp__5735__auto__ = markdown.links.footnote(trimmed);\r\nif(cljs.core.truth_(temp__5735__auto__)){\r\nvar link = temp__5735__auto__;\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(footnotes,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972),cljs.core.subs.cljs$core$IFn$_invoke$arity$3(link,(0),(cljs.core.count(link) - (1)))], null),markdown.links.parse_reference(trimmed,(cljs.core.count(link) + (1))));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.links.replace_footnote_link = (function markdown$links$replace_footnote_link(footnotes,footnote){\r\nvar next_fn_id = new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636).cljs$core$IFn$_invoke$arity$1(footnotes);\r\nvar link = [\"#fn-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id)].join('');\r\nreturn [\"<a href='\",link,\"' id='fnref\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id),\"'><sup>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id),\"</sup></a>\"].join('');\r\n});\r\nmarkdown.links.replace_all_footnote_links = (function markdown$links$replace_all_footnote_links(text,p__74328){\r\nwhile(true){\r\nvar map__74329 = p__74328;\r\nvar map__74329__$1 = (((((!((map__74329 == null))))?(((((map__74329.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74329.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74329):map__74329);\r\nvar state = map__74329__$1;\r\nvar footnotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74329__$1,new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205));\r\nvar matcher = /\\[\\^[a-zA-Z0-9_-]+\\]/;\r\nvar match = cljs.core.re_find(matcher,text);\r\nif((match == null)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar next_text = clojure.string.replace_first(text,matcher,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(markdown.links.replace_footnote_link,footnotes));\r\nvar next_state = cljs.core.assoc_in(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636)], null),cljs.core.inc),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"processed\",\"processed\",800622264),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636)], null))], null),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972),match], null)));\r\nvar G__74379 = next_text;\r\nvar G__74380 = next_state;\r\ntext = G__74379;\r\np__74328 = G__74380;\r\ncontinue;\r\n}\r\nbreak;\r\n}\r\n});\r\nmarkdown.links.footnote_link = (function markdown$links$footnote_link(text,p__74331){\r\nvar map__74332 = p__74331;\r\nvar map__74332__$1 = (((((!((map__74332 == null))))?(((((map__74332.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74332.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74332):map__74332);\r\nvar state = map__74332__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74332__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74332__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar footnotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74332__$1,new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205));\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = (new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972).cljs$core$IFn$_invoke$arity$1(footnotes) == null);\r\nif(or__4126__auto__){\r\nreturn or__4126__auto__;\r\n} else {\r\nvar or__4126__auto____$1 = code;\r\nif(cljs.core.truth_(or__4126__auto____$1)){\r\nreturn or__4126__auto____$1;\r\n} else {\r\nreturn codeblock;\r\n}\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(markdown.links.footnote(clojure.string.trim(text)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",state], null);\r\n} else {\r\nvar vec__74334 = markdown.links.replace_all_footnote_links(text,state);\r\nvar text__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74334,(0),null);\r\nvar state__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74334,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text__$1,state__$1], null);\r\n\r\n}\r\n}\r\n});\r\nmarkdown.links.make_image_reference = (function markdown$links$make_image_reference(src,alt,title){\r\nvar title_text = (cljs.core.truth_(title)?[\"\\\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(title),\"\"].join(''):\"\\\"\");\r\nreturn [\"<img src=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(src),\"\\\" alt=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(alt),title_text,\" />\"].join('');\r\n});\r\nmarkdown.links.image_reference_link = (function markdown$links$image_reference_link(text,p__74337){\r\nvar map__74338 = p__74337;\r\nvar map__74338__$1 = (((((!((map__74338 == null))))?(((((map__74338.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74338.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74338):map__74338);\r\nvar state = map__74338__$1;\r\nvar references = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74338__$1,new cljs.core.Keyword(null,\"references\",\"references\",882562509));\r\nif(((cljs.core.not(new cljs.core.Keyword(null,\"reference-links?\",\"reference-links?\",-2003778981).cljs$core$IFn$_invoke$arity$1(state))) || (cljs.core.empty_QMARK_(references)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar matcher = /!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])/;\r\nvar matches = cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.re_seq(matcher,text));\r\nvar ms = matches;\r\nvar new_text = text;\r\nwhile(true){\r\nif(cljs.core.seq(ms)){\r\nvar vec__74343 = cljs.core.first(ms);\r\nvar m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74343,(0),null);\r\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74343,(1),null);\r\nvar ref = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74343,(2),null);\r\nvar refval = cljs.core.get.cljs$core$IFn$_invoke$arity$2(references,ref);\r\nvar im = markdown.links.make_image_reference(cljs.core.first(refval),alt,cljs.core.second(refval));\r\nvar G__74384 = cljs.core.rest(ms);\r\nvar G__74385 = clojure.string.replace(new_text,m,im);\r\nms = G__74384;\r\nnew_text = G__74385;\r\ncontinue;\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_text,state], null);\r\n}\r\nbreak;\r\n}\r\n}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/links.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.links","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^Q","~$string","^Q","~$markdown.common","^S","~$cljs.core","^T","~$goog","^U"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$freeze-string","^S","~$gen-token","^S","~$strong","^S","~$bold","^S","~$em","^S","~$italics","^S","~$strikethrough","^S"],"~:require-macros",["^ ","^T","^T"],"~:form",["~#list",["~$ns","^L",["^16",["^W",["^Q","~:as","^R"],["^S","~:refer",["^Y","^Z","^[","^10","^11","^12","^13"]]]]]],"~:flags",["^ ","^W",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^Q","^S"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","markdown/links.cljc"],"~:compiled-at",1597165959122,"~:resource-name","markdown/links.cljc","~:warnings",[],"~:source","(ns markdown.links\n  (:require [clojure.string :as string]\n            [markdown.common\n             :refer\n             [freeze-string\n              gen-token\n              strong\n              bold\n              em\n              italics\n              strikethrough]]))\n\n(defn href [text link state]\n  (let [[link title] (split-with (partial not= \\space) link)]\n    (freeze-string\n     (seq \"<a href='\") link (seq \"'\")\n     (if (not-empty title)\n       (seq (apply str \" title=\" (string/join (rest title)) \">\"))\n       (seq \">\"))\n     text (seq \"</a>\") state)))\n\n(defn img [alt url state & [title]]\n  (freeze-string\n    (seq \"<img src=\\\"\") url (seq \"\\\" alt=\\\"\") alt\n    (if (not-empty title)\n      (seq (apply str \"\\\" title=\" (string/join title) \" />\"))\n      (seq \"\\\" />\"))\n    state))\n\n(defn handle-img-link [xs state]\n  (if (= [\\[ \\! \\[] (take 3 xs))\n    (let [xs (drop 3 xs)\n          [alt xy] (split-with (partial not= \\]) xs)\n          [url-title zy] (->> xy (drop 2) (split-with (partial not= \\))))\n          [url title] (split-with (partial not= \\space) url-title)\n          [new-text new-state] (img alt url state (not-empty title))]\n      [(concat \"[\" new-text (rest zy)) new-state])\n    [xs state]))\n\n(defn process-link-title [title state]\n  (first\n    (reduce\n      #(apply %2 %1)\n      [title state]\n      [italics em strong bold strikethrough])))\n\n(defn make-link\n  [img?]\n  (fn link [text {:keys [code codeblock] :as state}]\n    (if (or code codeblock)\n      [text state]\n      (loop [out []\n             tokens (seq text)\n             loop-state state]\n        (if (empty? tokens)\n          [(string/join out) loop-state]\n          (let [[head xs] (split-with (partial not= \\[) tokens)\n                ;; Overwriting the loop-state here\n                [xs loop-state] (handle-img-link xs loop-state)\n                [title ys] (split-with (partial not= \\]) xs)\n                [dud zs] (split-with (partial not= \\() ys)\n                [link tail] (split-with (partial not= \\)) zs)]\n\n            (cond\n              ;; Skip invalid tags and continue\n              (or (< (count tail) 1) ;; nothing after closing parens, i.e. no link/image found\n                  (< (count link) 2) ;; empty link contents, e.g. [missing link]()\n                  (> (count dud) 1)) ;; content between ] and ( means not a link/image\n              (recur (concat out head title) (concat dud link tail) loop-state)\n              \n              ;; Process Link if needed\n              (and (not img?) (not= (last head) \\!))\n              (let [[link-text new-loop-state] (href\n                                                (rest (process-link-title title state))\n                                                (rest link) loop-state)]\n                (recur (concat out head link-text) (rest tail) new-loop-state))\n              \n              ;; Process Image if needed\n              (and img? (= (last head) \\!))\n              (let [alt (rest title)\n                    [url title] (split-with (partial not= \\space) (rest link))\n                    title (process-link-title (string/join (rest title)) loop-state)\n                    ;; Now process / generate the img data\n                    [img-text new-loop-state] (img alt url loop-state title)]\n                (recur (concat out (butlast head) img-text) (rest tail) new-loop-state))\n              \n              ;; Otherwise skip link and continue\n              :else (recur (concat out head title dud link) tail loop-state))))))))\n\n(def link (make-link false))\n(def image (make-link true))\n\n(defn reference [text]\n  (re-find #\"^\\[[a-zA-Z0-9 \\-_\\.]+\\]:\" text))\n\n(defn parse-reference [reference start]\n  (-> reference\n      (subs start)\n      (string/trim)\n      (string/split #\"\\s+\" 2)))\n\n(defn parse-reference-link [line references]\n  (let [trimmed (string/trim line)]\n    (when-let [link (reference trimmed)]\n      (swap! references assoc (subs link 0 (dec (count link)))\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-reference-link [references reference]\n  (let [[title id] (string/split reference #\"\\]\\s*\" 2)\n        [link alt] (get references id)]\n    (str \"<a href='\" link \"'\" (when alt (str \" title='\" (subs alt 1 (dec (count alt))) \"'\")) \">\" (subs title 1) \"</a>\")))\n\n(defn encode-links [links i]\n  (second\n    (reduce\n      (fn [[i encoded] link]\n        [(inc i) (assoc encoded (gen-token i) link)])\n      [i {}]\n      links)))\n\n(defn parse-links [references links]\n  (into {} (map\n             (fn [[k v]]\n               [k (replace-reference-link references v)])\n             links)))\n\n(defn freeze-links [references text state]\n  (let [links\n        (re-seq\n          #\"\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.]+\\]\"\n          text)\n        encoded-links\n        (encode-links links ((fnil count []) (:frozen-strings state)))]\n    [(reduce\n       (fn [s [id link]]\n         (string/replace s link id))\n       text encoded-links)\n     (update state :frozen-strings merge (parse-links references encoded-links))]))\n\n(defn reference-link [text {:keys [code codeblock references] :as state}]\n  (cond\n    (or (nil? references) code codeblock)\n    [text state]\n\n    (reference (string/trim text))\n    [\"\" state]\n\n    :else\n    (freeze-links references text state)))\n\n(defn implicit-reference-link [text state]\n  (let [replacement-text (string/replace text #\"\\[([^\\]]+)\\]\\[\\]\" \"[$1][$1]\")]\n    [replacement-text state]))\n\n(defn footnote [text]\n  (re-find #\"^\\[\\^[a-zA-Z0-9_-]+\\]:\" text))\n\n(defn parse-footnote-link [line footnotes]\n  (let [trimmed (string/trim line)]\n    (when-let [link (footnote trimmed)]\n      (swap! footnotes assoc-in [:unprocessed (subs link 0 (dec (count link)))]\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-footnote-link [footnotes footnote]\n  (let [next-fn-id (:next-fn-id footnotes)\n        link (str \"#fn-\" next-fn-id)]\n    (str \"<a href='\" link \"' id='fnref\" next-fn-id \"'><sup>\" next-fn-id \"</sup></a>\")))\n\n(defn replace-all-footnote-links [text {:keys [footnotes] :as state}]\n  (let [matcher #\"\\[\\^[a-zA-Z0-9_-]+\\]\"\n        match (re-find matcher text)]\n    (if (nil? match)\n      [text state]\n      (let [next-text (string/replace-first text matcher (partial replace-footnote-link footnotes))\n            next-state (-> state\n                           (update-in [:footnotes :next-fn-id] inc)\n                           (assoc-in [:footnotes :processed (get-in state [:footnotes :next-fn-id])]\n                                     (get-in state [:footnotes :unprocessed match])))]\n        (recur next-text next-state)))))\n\n(defn footnote-link [text {:keys [code codeblock footnotes] :as state}]\n  (cond\n    (or (nil? (:unprocessed footnotes)) code codeblock)\n    [text state]\n\n    (footnote (string/trim text))\n    [\"\" state]\n\n    :else\n    (let [[text state] (replace-all-footnote-links text state)]\n      [text state])))\n\n(defn make-image-reference [src alt title]\n  (let [title-text (str (if title (str \"\\\" title=\" (string/join title) \"\") \"\\\"\"))]\n    (str \"<img src=\\\"\" src \"\\\" alt=\\\"\" alt title-text \" />\")))\n\n(defn image-reference-link [text {:keys [references] :as state}]\n  (if (or (not (:reference-links? state)) (empty? references))\n    [text state]\n    (let [matcher #\"!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])\"\n          matches (distinct (re-seq matcher text))]\n      (loop [ms matches\n             new-text text]\n        (if (seq ms)\n          (let [[m alt ref] (first ms)\n                refval (get references ref)\n                im (make-image-reference (first refval) alt (second refval))]\n            (recur (rest ms) (string/replace new-text m im)))\n          [new-text state])))))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.links/href","text","link","state","vec__74147","cljs.core.nth","title","cljs.core/split-with","cljs.core.partial","cljs.core/not=","markdown.common.freeze_string","cljs.core/seq","cljs.core/not-empty","cljs.core.apply","cljs.core/str","clojure.string.join","cljs.core/rest","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","markdown.links/img","p__74167","vec__74169","seq74155","G__74156","cljs.core/first","cljs.core/next","G__74157","G__74158","self__4723__auto__","alt","url","markdown.links/handle-img-link","xs","cljs.core._EQ_","cljs.core.take","vec__74176","vec__74179","vec__74182","vec__74185","cljs.core.drop","xy","url-title","zy","new-text","new-state","markdown.links.img","cljs.core.concat","markdown.links/process-link-title","p1__74189#","p2__74188#","cljs.core.reduce","markdown.common/italics","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.links/make-link","img?","p__74198","map__74199","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","code","codeblock","or__4126__auto__","out","tokens","loop-state","cljs.core/empty?","vec__74273","vec__74276","vec__74279","vec__74282","vec__74285","head","ys","dud","zs","tail","cljs.core/count","cljs.core/not","cljs.core.not_EQ_","cljs.core/last","vec__74288","link-text","new-loop-state","and__4115__auto__","vec__74294","vec__74297","img-text","cljs.core/butlast","markdown.links/link","markdown.links/image","markdown.links/reference","cljs.core/re-find","markdown.links/parse-reference","reference","start","cljs.core.subs","clojure.string/trim","clojure.string.split","markdown.links/parse-reference-link","line","references","trimmed","temp__5735__auto__","cljs.core.swap_BANG_","cljs.core/assoc","markdown.links/replace-reference-link","vec__74306","vec__74309","id","markdown.links/encode-links","links","i","cljs.core/second","p__74312","vec__74313","encoded","cljs.core.assoc","markdown.common/gen-token","markdown.links/parse-links","cljs.core.into","cljs.core.map","p__74317","vec__74318","k","v","markdown.links/freeze-links","cljs.core/re-seq","encoded-links","cljs.core.fnil","p__74321","vec__74322","s","clojure.string/replace","cljs.core.update","cljs.core/merge","p__74325","map__74326","markdown.links/reference-link","markdown.links/implicit-reference-link","replacement-text","markdown.links/footnote","markdown.links/parse-footnote-link","footnotes","cljs.core/assoc-in","markdown.links/replace-footnote-link","footnote","next-fn-id","p__74328","map__74329","markdown.links/replace-all-footnote-links","matcher","match","next-text","clojure.string/replace-first","next-state","cljs.core.update_in","cljs.core/inc","cljs.core.get_in","p__74331","map__74332","markdown.links/footnote-link","vec__74334","markdown.links/make-image-reference","src","title-text","p__74337","map__74338","markdown.links/image-reference-link","matches","cljs.core.distinct","ms","vec__74343","m","ref","refval","im"]],"~:used-vars",["^J",["~$clojure.string/join","~$cljs.core/rest","~$markdown.links/link","~$markdown.links/footnote-link","~$cljs.core/str","~$markdown.common/freeze-string","~$markdown.links/href","~$clojure.string/split","~$cljs.core/=","~$markdown.links/image","~$markdown.links/process-link-title","~$markdown.common/bold","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$markdown.links/replace-reference-link","~$cljs.core/take","~$cljs.core/last","~$cljs.core/not=","~$markdown.links/handle-img-link","~$cljs.core/concat","~$markdown.links/replace-all-footnote-links","~$markdown.common/em","~$markdown.links/footnote","~$cljs.core/empty?","~$markdown.common/strikethrough","~$cljs.core/into","~$markdown.links/parse-reference-link","~$cljs.core/update","~$cljs.core/map","~$markdown.links/img","~$markdown.links/parse-links","~$cljs.core/swap!","~$markdown.links/freeze-links","~$markdown.links/parse-reference","~$cljs.core/not-empty","~$markdown.common/gen-token","~$markdown.links/image-reference-link","~$cljs.core/re-find","~$markdown.common/strong","~$cljs.core/second","~$clojure.string/replace","~$markdown.common/italics","~$markdown.links/encode-links","~$markdown.links/parse-footnote-link","~$markdown.links/replace-footnote-link","~$cljs.core/not","~$cljs.core/assoc","~$markdown.links/implicit-reference-link","~$cljs.core/assoc-in","~$markdown.links/make-image-reference","~$clojure.string/trim","~$cljs.core/first","~$markdown.links/make-link","~$cljs.core/butlast","~$cljs.core/subs","~$cljs.core/merge","~$markdown.links/reference-link","~$markdown.links/reference"]]],"~:cache-keys",["~#cmap",[["^1>","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^U","~$goog.dom.HtmlElement"]]],["^1>","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","~$goog.array","~$goog.asserts"]]],["^1>","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^35","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1>","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^36","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^39"]]],["^1>","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^36"]]],["^1>","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","markdown/common.cljc"],["c28b65ccc617b6c356403c4c3d9a9e0ca9bd4dd7","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^T","^Q"]]],["^1>","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^36"]]],"~:SHADOW-TIMESTAMP",[1596134675000,1596134675000,1594142852000],["^1>","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^36","~$goog.reflect"]]],["^1>","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^36","~$goog.html.trustedtypes","^3<","^3=","^3>","^3?"]]],["^1>","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^35","^36","~$goog.html.SafeUrl","^3>","^3?","^39"]]],["^1>","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^36","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3C","^3;","~$goog.html.uncheckedconversions","^3>","^39"]]],["^1>","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1>","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^35","^36","~$goog.dom.TagName","~$goog.dom.tags","^3G","^3H","~$goog.html.SafeStyleSheet","^3C","^3;","^3B","^3<","^3=","~$goog.labs.userAgent.browser","^38","^3>","^3?","^39"]]],["^1>","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^38"]]],["^1>","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1>","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^35","^36","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",[]]],["^1>","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^35","^38"]]],["^1>","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^T","^3R","~$goog.string.StringBuffer"]]],["^1>","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","~$goog.dom.safe","^3I","^3>","^39"]]],["^1>","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^39"]]],["^1>","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^35","^36","^3E","~$goog.math"]]],["^1>","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^36","^3F","^3G","^3H","^3N","^3C","^3;","^3>","^39"]]],["^1>","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U"]]],["^1>","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","~$goog.math.Long","~$goog.math.Integer","^3R","^38","^35","~$goog.Uri","^3X"]]],["^1>","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^36","^3B","^3>","^3?"]]],["^1>","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^35","^36","^3H","^38","^3>","^3?","^39"]]],["^1>","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^3A"]]],["^1>","markdown/links.cljc"],["c28b65ccc617b6c356403c4c3d9a9e0ca9bd4dd7","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^T","^Q","^S"]]],["^1>","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^35","^36","^3R"]]],["^1>","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^30",["^ ","^31",null,"^32",["^J",[]],"^33",["^U","^36","^3?"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1594134806000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1594142858000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/links.cljc","^7",1,"^8",5,"^9",1,"^:",19],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^Q","^S","^S","^T","^T","^U","^U"],"^V",["^J",["^W"]],"^X",["^ ","^Y","^S","^Z","^S","^[","^S","^10","^S","^11","^S","^12","^S","^13","^S"],"~:defs",["^ ","~$replace-all-footnote-links",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/links.cljc","^7",169,"^8",7,"^9",169,"^:",33,"~:arglists",["^16",["~$quote",["^16",[["~$text",["^ ","~:keys",["~$footnotes"],"^18","~$state"]]]]]]],"^K","^24","^6","markdown/links.cljc","^:",33,"~:method-params",["^16",[["^4R","~$p__74328"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^8",1,"~:variadic?",false,"^7",169,"~:ret-tag","~$cljs.core/IVector","^9",169,"~:max-fixed-arity",2,"~:fn-var",true,"^4P",["^16",["^4Q",["^16",[["^4R",["^ ","^4S",["^4T"],"^18","^4U"]]]]]]],"~$make-image-reference",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",193,"^8",7,"^9",193,"^:",27,"^4P",["^16",["^4Q",["^16",[["~$src","~$alt","~$title"]]]]]],"^K","^2Q","^6","markdown/links.cljc","^:",27,"^4V",["^16",[["^54","^55","^56"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",193,"^4[","^R","^9",193,"^51",3,"^52",true,"^4P",["^16",["^4Q",["^16",[["^54","^55","^56"]]]]]],"~$href",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",13,"^8",7,"^9",13,"^:",11,"^4P",["^16",["^4Q",["^16",[["^4R","~$link","^4U"]]]]]],"^K","^1P","^6","markdown/links.cljc","^:",11,"^4V",["^16",[["^4R","^58","^4U"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",13,"^4[","^50","^9",13,"^51",3,"^52",true,"^4P",["^16",["^4Q",["^16",[["^4R","^58","^4U"]]]]]],"~$img",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",22,"^8",7,"^9",22,"^:",10,"^4P",["^16",["^4Q",["^16",[["^55","~$url","^4U","~$&",["^56"]]]]]],"~:top-fn",["^ ","^4Z",true,"~:fixed-arity",3,"^51",3,"^4V",[["^16",["^55","^5:","^4U",["^56"]]]],"^4P",["^16",[["^55","^5:","^4U","~$&",["^56"]]]],"^4Y",["^16",[null]]]],"^K","^2=","^6","markdown/links.cljc","^:",10,"^5;",["^ ","^4Z",true,"^5<",3,"^51",3,"^4V",[["^16",["^55","^5:","^4U",["^56"]]]],"^4P",["^16",[["^55","^5:","^4U","~$&",["^56"]]]],"^4Y",["^16",[null]]],"^4V",[["^16",["^55","^5:","^4U",["^56"]]]],"^4X",null,"^5<",3,"^4Y",["^16",[null]],"^8",1,"^4Z",true,"~:methods",[["^ ","^5<",3,"^4Z",true,"~:tag","^50"]],"^7",22,"^4[","~$any","^9",22,"^51",3,"^52",true,"^4P",["^16",[["^55","^5:","^4U","~$&",["^56"]]]]],"~$parse-footnote-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",158,"^8",7,"^9",158,"^:",26,"^4P",["^16",["^4Q",["^16",[["~$line","^4T"]]]]]],"^K","^2K","^6","markdown/links.cljc","^:",26,"^4V",["^16",[["^5A","^4T"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",158,"^4[",["^J",[null,"^5?","~$clj-nil"]],"^9",158,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^5A","^4T"]]]]]],"~$implicit-reference-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",151,"^8",7,"^9",151,"^:",30,"^4P",["^16",["^4Q",["^16",[["^4R","^4U"]]]]]],"^K","^2O","^6","markdown/links.cljc","^:",30,"^4V",["^16",[["^4R","^4U"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",151,"^4[","^50","^9",151,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^4R","^4U"]]]]]],"~$parse-links",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",121,"^8",7,"^9",121,"^:",18,"^4P",["^16",["^4Q",["^16",[["~$references","~$links"]]]]]],"^K","^2>","^6","markdown/links.cljc","^:",18,"^4V",["^16",[["^5E","^5F"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",121,"^4[",["^J",[null,"~$clj","^5?"]],"^9",121,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^5E","^5F"]]]]]],"~$footnote-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",181,"^8",7,"^9",181,"^:",20,"^4P",["^16",["^4Q",["^16",[["^4R",["^ ","^4S",["~$code","~$codeblock","^4T"],"^18","^4U"]]]]]]],"^K","^1M","^6","markdown/links.cljc","^:",20,"^4V",["^16",[["^4R","~$p__74331"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",181,"^4[","^50","^9",181,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^4R",["^ ","^4S",["^5I","^5J","^4T"],"^18","^4U"]]]]]]],"~$reference-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",140,"^8",7,"^9",140,"^:",21,"^4P",["^16",["^4Q",["^16",[["^4R",["^ ","^4S",["^5I","^5J","^5E"],"^18","^4U"]]]]]]],"^K","^2X","^6","markdown/links.cljc","^:",21,"^4V",["^16",[["^4R","~$p__74325"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",140,"^4[","^50","^9",140,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^4R",["^ ","^4S",["^5I","^5J","^5E"],"^18","^4U"]]]]]]],"~$image-reference-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",197,"^8",7,"^9",197,"^:",27,"^4P",["^16",["^4Q",["^16",[["^4R",["^ ","^4S",["^5E"],"^18","^4U"]]]]]]],"^K","^2D","^6","markdown/links.cljc","^:",27,"^4V",["^16",[["^4R","~$p__74337"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",197,"^4[","^50","^9",197,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^4R",["^ ","^4S",["^5E"],"^18","^4U"]]]]]]],"~$make-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",47,"^8",7,"^9",47,"^:",16,"^4P",["^16",["^4Q",["^16",[["~$img?"]]]]]],"^K","^2T","^6","markdown/links.cljc","^:",16,"^4V",["^16",[["^5Q"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",47,"^4[","~$function","^9",47,"^51",1,"^52",true,"^4P",["^16",["^4Q",["^16",[["^5Q"]]]]]],"~$replace-footnote-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",164,"^8",7,"^9",164,"^:",28,"^4P",["^16",["^4Q",["^16",[["^4T","~$footnote"]]]]]],"^K","^2L","^6","markdown/links.cljc","^:",28,"^4V",["^16",[["^4T","^5T"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",164,"^4[","^R","^9",164,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^4T","^5T"]]]]]],"~$replace-reference-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",108,"^8",7,"^9",108,"^:",29,"^4P",["^16",["^4Q",["^16",[["^5E","~$reference"]]]]]],"^K","^1Z","^6","markdown/links.cljc","^:",29,"^4V",["^16",[["^5E","^5V"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",108,"^4[","^R","^9",108,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^5E","^5V"]]]]]],"~$handle-img-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",30,"^8",7,"^9",30,"^:",22,"^4P",["^16",["^4Q",["^16",[["~$xs","^4U"]]]]]],"^K","^22","^6","markdown/links.cljc","^:",22,"^4V",["^16",[["^5X","^4U"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",30,"^4[","^50","^9",30,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^5X","^4U"]]]]]],"~$parse-reference",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",96,"^8",7,"^9",96,"^:",22,"^4P",["^16",["^4Q",["^16",[["^5V","~$start"]]]]]],"^K","^2A","^6","markdown/links.cljc","^:",22,"^4V",["^16",[["^5V","^5Z"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",96,"^4[",["^J",[null,"^5?"]],"^9",96,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^5V","^5Z"]]]]]],"^5T",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",155,"^8",7,"^9",155,"^:",15,"^4P",["^16",["^4Q",["^16",[["^4R"]]]]]],"^K","^26","^6","markdown/links.cljc","^:",15,"^4V",["^16",[["^4R"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",155,"^4[",["^J",["^5G","^50","^5?","~$cljs.core/MetaFn","^5B"]],"^9",155,"^51",1,"^52",true,"^4P",["^16",["^4Q",["^16",[["^4R"]]]]]],"~$parse-reference-link",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",102,"^8",7,"^9",102,"^:",27,"^4P",["^16",["^4Q",["^16",[["^5A","^5E"]]]]]],"^K","^2:","^6","markdown/links.cljc","^:",27,"^4V",["^16",[["^5A","^5E"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",102,"^4[",["^J",[null,"^5?","^5B"]],"^9",102,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^5A","^5E"]]]]]],"^5V",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",93,"^8",7,"^9",93,"^:",16,"^4P",["^16",["^4Q",["^16",[["^4R"]]]]]],"^K","^2Y","^6","markdown/links.cljc","^:",16,"^4V",["^16",[["^4R"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",93,"^4[",["^J",["^5G","^50","^5?","^5[","^5B"]],"^9",93,"^51",1,"^52",true,"^4P",["^16",["^4Q",["^16",[["^4R"]]]]]],"^58",["^ ","^K","^1L","^6","markdown/links.cljc","^7",90,"^8",1,"^9",90,"^:",10,"^5",["^ ","^6","markdown/links.cljc","^7",90,"^8",6,"^9",90,"^:",10],"^5>","^5R"],"~$freeze-links",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",127,"^8",7,"^9",127,"^:",19,"^4P",["^16",["^4Q",["^16",[["^5E","^4R","^4U"]]]]]],"^K","^2@","^6","markdown/links.cljc","^:",19,"^4V",["^16",[["^5E","^4R","^4U"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",127,"^4[","^50","^9",127,"^51",3,"^52",true,"^4P",["^16",["^4Q",["^16",[["^5E","^4R","^4U"]]]]]],"~$encode-links",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",113,"^8",7,"^9",113,"^:",19,"^4P",["^16",["^4Q",["^16",[["^5F","~$i"]]]]]],"^K","^2J","^6","markdown/links.cljc","^:",19,"^4V",["^16",[["^5F","~$i"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",113,"^4[",["^J",["^5?","^5B"]],"^9",113,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^5F","~$i"]]]]]],"~$image",["^ ","^K","^1S","^6","markdown/links.cljc","^7",91,"^8",1,"^9",91,"^:",11,"^5",["^ ","^6","markdown/links.cljc","^7",91,"^8",6,"^9",91,"^:",11],"^5>","^5R"],"~$process-link-title",["^ ","^4O",null,"^5",["^ ","^6","markdown/links.cljc","^7",40,"^8",7,"^9",40,"^:",25,"^4P",["^16",["^4Q",["^16",[["^56","^4U"]]]]]],"^K","^1T","^6","markdown/links.cljc","^:",25,"^4V",["^16",[["^56","^4U"]]],"^4X",null,"^4Y",["^16",[null,null]],"^8",1,"^4Z",false,"^7",40,"^4[",["^J",["^5?","^5B"]],"^9",40,"^51",2,"^52",true,"^4P",["^16",["^4Q",["^16",[["^56","^4U"]]]]]]],"^14",["^ ","^T","^T"],"~:cljs.analyzer/constants",["^ ","^V",["^J",["~:codeblock","~:footnotes","~:unprocessed","~:else","~:frozen-strings","~:references","~:next-fn-id","~:code","~:processed","~:reference-links?"]],"~:order",["^6=","^66","^69","^6:","^6;","^68","^6<","^67","^6>","^6?"]],"^1:",["^ ","^W",["^J",[]]],"^1;",["^ "],"^1<",["^U","^T","^Q","^S"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2[",[["^6C","~:static-fns"],true,["^6C","~:shadow-tweaks"],null,["^6C","~:source-map-inline"],null,["^6C","~:elide-asserts"],false,["^6C","~:optimize-constants"],null,["^6C","^1A"],null,["^6C","~:external-config"],null,["^6C","~:tooling-config"],null,["^6C","~:emit-constants"],null,["^6C","~:load-tests"],null,["^6C","~:form-size-threshold"],null,["^6C","~:data-readers"],null,["^6C","~:infer-externs"],"~:auto",["^6C","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6C","~:fn-invoke-direct"],null,["^6C","~:source-map"],"/dev/null"]]]