["^ ","~:output",["^ ","~:js","goog.provide('markdown.transformers');\r\nmarkdown.transformers.heading_QMARK_ = (function markdown$transformers$heading_QMARK_(text,type){\r\nif(cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\" \",null], null), null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((4),text))){\r\nreturn null;\r\n} else {\r\nvar trimmed = (cljs.core.truth_(text)?clojure.string.trim(text):null);\r\nvar and__4115__auto__ = cljs.core.not_empty(trimmed);\r\nif(cljs.core.truth_(and__4115__auto__)){\r\nreturn cljs.core.every_QMARK_(cljs.core.PersistentHashSet.createAsIfByAssoc([type]),trimmed);\r\n} else {\r\nreturn and__4115__auto__;\r\n}\r\n}\r\n});\r\nmarkdown.transformers.h1_QMARK_ = (function markdown$transformers$h1_QMARK_(text){\r\nreturn markdown.transformers.heading_QMARK_(text,\"=\");\r\n});\r\nmarkdown.transformers.h2_QMARK_ = (function markdown$transformers$h2_QMARK_(text){\r\nreturn markdown.transformers.heading_QMARK_(text,\"-\");\r\n});\r\nmarkdown.transformers.empty_line = (function markdown$transformers$empty_line(text,p__74349){\r\nvar map__74350 = p__74349;\r\nvar map__74350__$1 = (((((!((map__74350 == null))))?(((((map__74350.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74350.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74350):map__74350);\r\nvar state = map__74350__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74350__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74350__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = code;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn codeblock;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4126__auto__ = markdown.transformers.h1_QMARK_(text);\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn markdown.transformers.h2_QMARK_(text);\r\n}\r\n})())?\"\":text),((clojure.string.blank_QMARK_(text))?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873)], 0)):state)], null);\r\n}\r\n});\r\nmarkdown.transformers.superscript = (function markdown$transformers$superscript(text,state){\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar tokens = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.contains_QMARK_,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"^\",null], null), null)),text);\r\nvar buf = cljs.core.PersistentVector.EMPTY;\r\nvar remaining = tokens;\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(remaining)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(buf),state], null);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(remaining),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"^\"], null))){\r\nvar G__74484 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(\"<sup>\"),cljs.core.second(remaining),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"</sup>\")], 0)));\r\nvar G__74485 = cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),remaining);\r\nbuf = G__74484;\r\nremaining = G__74485;\r\ncontinue;\r\n} else {\r\nvar G__74489 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.first(remaining));\r\nvar G__74490 = cljs.core.rest(remaining);\r\nbuf = G__74489;\r\nremaining = G__74490;\r\ncontinue;\r\n\r\n}\r\n}\r\nbreak;\r\n}\r\n}\r\n});\r\nmarkdown.transformers.heading = (function markdown$transformers$heading(text,p__74358){\r\nvar map__74359 = p__74358;\r\nvar map__74359__$1 = (((((!((map__74359 == null))))?(((((map__74359.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74359.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74359):map__74359);\r\nvar state = map__74359__$1;\r\nvar buf = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74359__$1,new cljs.core.Keyword(null,\"buf\",\"buf\",-213913340));\r\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74359__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74359__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74359__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar heading_anchors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74359__$1,new cljs.core.Keyword(null,\"heading-anchors\",\"heading-anchors\",1713527866));\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = codeblock;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn code;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(markdown.transformers.h1_QMARK_((function (){var or__4126__auto__ = buf;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn next_line;\r\n}\r\n})()))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<h1>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</h1>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873),true)], null);\r\n} else {\r\nif(cljs.core.truth_(markdown.transformers.h2_QMARK_((function (){var or__4126__auto__ = buf;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn next_line;\r\n}\r\n})()))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<h2>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</h2>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873),true)], null);\r\n} else {\r\nvar temp__5733__auto__ = markdown.common.make_heading(text,heading_anchors);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar heading = temp__5733__auto__;\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [heading,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818),true)], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.br = (function markdown$transformers$br(text,p__74367){\r\nvar map__74368 = p__74367;\r\nvar map__74368__$1 = (((((!((map__74368 == null))))?(((((map__74368.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74368.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74368):map__74368);\r\nvar state = map__74368__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74368__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74368__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",\" \"], null),cljs.core.take_last((2),text))) && (cljs.core.not((function (){var or__4126__auto__ = code;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn lists;\r\n}\r\n})()))))?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((2),text))),\"<br />\"].join(''):text),state], null);\r\n});\r\nmarkdown.transformers.autourl_transformer = (function markdown$transformers$autourl_transformer(text,p__74371){\r\nvar map__74372 = p__74371;\r\nvar map__74372__$1 = (((((!((map__74372 == null))))?(((((map__74372.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74372.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74372):map__74372);\r\nvar state = map__74372__$1;\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74372__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar frozen_strings = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74372__$1,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560));\r\nif(cljs.core.truth_(code)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar currently_frozen = cljs.core.volatile_BANG_(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),frozen_strings], null));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.replace(text,/<https?:\\/\\/[-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#\\/%=~_()|]>/,(function (p1__74370_SHARP_){\r\nvar vec__74374 = markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.subs.cljs$core$IFn$_invoke$arity$3(p1__74370_SHARP_,(1),(cljs.core.count(p1__74370_SHARP_) - (1))),cljs.core.deref(currently_frozen)], 0));\r\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74374,(0),null);\r\nvar frozen_strings__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74374,(1),null);\r\ncljs.core.vreset_BANG_(currently_frozen,frozen_strings__$1);\r\n\r\nreturn [\"<a href=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(url),\"\\\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(url),\"</a>\"].join('');\r\n})),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([state,cljs.core.deref(currently_frozen)], 0))], null);\r\n}\r\n});\r\nmarkdown.transformers.autoemail_transformer = (function markdown$transformers$autoemail_transformer(text,state){\r\nvar left_pad = (function (s){\r\nvar G__74378 = s;\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(s))){\r\nreturn [\"0\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__74378)].join('');\r\n} else {\r\nreturn G__74378;\r\n}\r\n});\r\nvar encoder = (cljs.core.truth_(new cljs.core.Keyword(null,\"clojurescript\",\"clojurescript\",-299769403).cljs$core$IFn$_invoke$arity$1(state))?(function (c){\r\nreturn [\"&#x\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(left_pad(c.charCodeAt((0)).toString((16)))),\";\"].join('');\r\n}):(function (c){\r\nreturn markdown.transformers._STAR_formatter_STAR_.call(null,\"&#x%02x;\",(c | (0)));\r\n}));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\r\n}\r\n})())?text:clojure.string.replace(text,/<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>/,(function (p1__74377_SHARP_){\r\nvar encoded = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2(encoder,cljs.core.subs.cljs$core$IFn$_invoke$arity$3(p1__74377_SHARP_,(1),(cljs.core.count(p1__74377_SHARP_) - (1)))));\r\nreturn [\"<a href=\\\"mailto:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(encoded),\"\\\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(encoded),\"</a>\"].join('');\r\n}))),state], null);\r\n});\r\nmarkdown.transformers.set_line_state = (function markdown$transformers$set_line_state(text,p__74381){\r\nvar map__74382 = p__74381;\r\nvar map__74382__$1 = (((((!((map__74382 == null))))?(((((map__74382.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74382.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74382):map__74382);\r\nvar state = map__74382__$1;\r\nvar inline_heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74382__$1,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc_in(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284),new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818)], null),inline_heading)], null);\r\n});\r\nmarkdown.transformers.clear_line_state = (function markdown$transformers$clear_line_state(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284))], null);\r\n});\r\nmarkdown.transformers.paragraph_text = (function markdown$transformers$paragraph_text(last_line_empty_QMARK_,text){\r\nif(cljs.core.truth_(((cljs.core.not(last_line_empty_QMARK_))?cljs.core.not_empty(text):false))){\r\nreturn [\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join('');\r\n} else {\r\nreturn text;\r\n}\r\n});\r\nmarkdown.transformers.open_paragraph = (function markdown$transformers$open_paragraph(text,p__74386){\r\nvar map__74387 = p__74386;\r\nvar map__74387__$1 = (((((!((map__74387 == null))))?(((((map__74387.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74387.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74387):map__74387);\r\nvar state = map__74387__$1;\r\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\r\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\r\nvar blockquote = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190));\r\nvar heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873));\r\nvar hr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067));\r\nvar temp = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar inline_heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818));\r\nvar last_line_empty_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527));\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74387__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nif(cljs.core.truth_((function (){var and__4115__auto__ = paragraph;\r\nif(cljs.core.truth_(and__4115__auto__)){\r\nreturn lists;\r\n} else {\r\nreturn and__4115__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"</p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\r\n} else {\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = heading;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nvar or__4126__auto____$1 = inline_heading;\r\nif(cljs.core.truth_(or__4126__auto____$1)){\r\nreturn or__4126__auto____$1;\r\n} else {\r\nvar or__4126__auto____$2 = hr;\r\nif(cljs.core.truth_(or__4126__auto____$2)){\r\nreturn or__4126__auto____$2;\r\n} else {\r\nvar or__4126__auto____$3 = code;\r\nif(cljs.core.truth_(or__4126__auto____$3)){\r\nreturn or__4126__auto____$3;\r\n} else {\r\nvar or__4126__auto____$4 = lists;\r\nif(cljs.core.truth_(or__4126__auto____$4)){\r\nreturn or__4126__auto____$4;\r\n} else {\r\nreturn blockquote;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(paragraph)){\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = eof;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn cljs.core.empty_QMARK_(clojure.string.trim(text));\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.transformers.paragraph_text(last_line_empty_QMARK_,text)),\"</p>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.paragraph_text(last_line_empty_QMARK_,text),state], null);\r\n}\r\n} else {\r\nif(cljs.core.truth_(((cljs.core.not(eof))?(((!(clojure.string.blank_QMARK_(text))))?(function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818).cljs$core$IFn$_invoke$arity$1(temp);\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn last_line_empty_QMARK_;\r\n}\r\n})():false):false))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),false], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n\r\n}\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.close_paragraph = (function markdown$transformers$close_paragraph(text,p__74392){\r\nvar map__74393 = p__74392;\r\nvar map__74393__$1 = (((((!((map__74393 == null))))?(((((map__74393.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74393.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74393):map__74393);\r\nvar state = map__74393__$1;\r\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74393__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\r\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74393__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\r\nif(cljs.core.truth_((function (){var and__4115__auto__ = paragraph;\r\nif(cljs.core.truth_(and__4115__auto__)){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"`\",\"`\",\"`\"], null),cljs.core.take_last((3),(function (){var G__74395 = next_line;\r\nif((G__74395 == null)){\r\nreturn null;\r\n} else {\r\nreturn clojure.string.trim(G__74395);\r\n}\r\n})()));\r\n} else {\r\nreturn and__4115__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</p>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n});\r\nmarkdown.transformers.paragraph = (function markdown$transformers$paragraph(text,state){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(markdown.transformers.close_paragraph,markdown.transformers.open_paragraph(text,state));\r\n});\r\nmarkdown.transformers.code = (function markdown$transformers$code(text,p__74397){\r\nvar map__74399 = p__74397;\r\nvar map__74399__$1 = (((((!((map__74399 == null))))?(((((map__74399.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74399.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74399):map__74399);\r\nvar state = map__74399__$1;\r\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74399__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74399__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74399__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74399__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74399__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = lists;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn codeblock;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(code)){\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = eof;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"    \",clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.take.cljs$core$IFn$_invoke$arity$2((4),text)));\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"</code></pre>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"code\",\"code\",1586293142),new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527)], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",markdown.common.escape_code(clojure.string.replace_first(text,/    /,\"\"))].join(''),state], null);\r\n}\r\n} else {\r\nif(cljs.core.truth_(paragraph)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.empty_QMARK_(clojure.string.trim(text))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar num_spaces = cljs.core.count(cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,\" \"),text));\r\nif((num_spaces > (3))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<pre><code>\",markdown.common.escape_code(clojure.string.replace_first(text,/    /,\"\"))].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175),true], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n\r\n}\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.codeblock = (function markdown$transformers$codeblock(text,p__74404){\r\nvar map__74405 = p__74404;\r\nvar map__74405__$1 = (((((!((map__74405 == null))))?(((((map__74405.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74405.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74405):map__74405);\r\nvar state = map__74405__$1;\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74405__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar codeblock_end = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74405__$1,new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736));\r\nvar indented_code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74405__$1,new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175));\r\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74405__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74405__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar trimmed = clojure.string.trim(text);\r\nvar next_line_closes_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"`\",\"`\",\"`\"], null),cljs.core.take_last((3),(function (){var G__74407 = next_line;\r\nif((G__74407 == null)){\r\nreturn null;\r\n} else {\r\nreturn clojure.string.trim(G__74407);\r\n}\r\n})()));\r\nif(cljs.core.truth_((function (){var and__4115__auto__ = lists;\r\nif(cljs.core.truth_(and__4115__auto__)){\r\nreturn codeblock_end;\r\n} else {\r\nreturn and__4115__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736)], 0))], null);\r\n} else {\r\nif(cljs.core.truth_(codeblock_end)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),true),new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736)], 0))], null);\r\n} else {\r\nif(cljs.core.truth_(((next_line_closes_QMARK_)?codeblock:false))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[markdown.common.escape_code([cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.first(clojure.string.split.cljs$core$IFn$_invoke$arity$2(next_line,/```/))))].join('')),\"</code></pre>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"skip-next-line?\",\"skip-next-line?\",1683617749),cljs.core.not(lists),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736),true,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),cljs.core.not(lists)], 0))], null);\r\n} else {\r\nif(((cljs.core.not(indented_code)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"`\",\"`\",\"`\"], null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),trimmed))))){\r\nvar vec__74408 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"\\n\"),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),trimmed));\r\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74408,(0),null);\r\nvar code = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74408,(1),null);\r\nvar lang__$1 = clojure.string.trim(clojure.string.join.cljs$core$IFn$_invoke$arity$1(lang));\r\nvar s = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.rest(code));\r\nvar formatter = new cljs.core.Keyword(null,\"code-style\",\"code-style\",-2144009586).cljs$core$IFn$_invoke$arity$1(state);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<pre><code\",(cljs.core.truth_(cljs.core.not_empty(lang__$1))?[\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(formatter)?(formatter.cljs$core$IFn$_invoke$arity$1 ? formatter.cljs$core$IFn$_invoke$arity$1(lang__$1) : formatter.call(null,lang__$1)):[\"class=\\\"\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(lang__$1),\"\\\"\"].join('')))].join(''):null),\">\",markdown.common.escape_code(((cljs.core.empty_QMARK_(s))?s:[cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\"\\n\"].join(''))),((next_line_closes_QMARK_)?\"</code></pre>\":null)].join(''),((next_line_closes_QMARK_)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"skip-next-line?\",\"skip-next-line?\",1683617749),true], 0)):cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),true], 0)))], null);\r\n} else {\r\nif(cljs.core.truth_(codeblock)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[markdown.common.escape_code(text),\"\\n\"].join(''),state], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n\r\n}\r\n}\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.hr = (function markdown$transformers$hr(text,state){\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(((((cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"*\",null], null), null),text))) || (cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"-\",null], null), null),text))) || (cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"_\",null], null), null),text))))) && ((cljs.core.count(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\" \",null], null), null),text)) > (2))))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"<hr/>\",cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067),true)], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n}\r\n});\r\n/**\r\n * Check for blockquotes and signal to blockquote-2 function with\r\n *   states blockquote-start and blockquote-end so that tags can be added.\r\n *   This approach enables lists to be included in blockquotes.\r\n */\r\nmarkdown.transformers.blockquote_1 = (function markdown$transformers$blockquote_1(text,p__74416){\r\nvar map__74417 = p__74416;\r\nvar map__74417__$1 = (((((!((map__74417 == null))))?(((((map__74417.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74417.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74417):map__74417);\r\nvar state = map__74417__$1;\r\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74417__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\r\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74417__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\r\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74417__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74417__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar trimmed = clojure.string.trim(text);\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = code;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn codeblock;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190).cljs$core$IFn$_invoke$arity$1(state))){\r\nif(cljs.core.truth_((function (){var or__4126__auto__ = eof;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn cljs.core.empty_QMARK_(trimmed);\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),false], 0))], null);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",trimmed)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?\"</p>\":null),\"<p>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\r\n} else {\r\nif((((((trimmed).length) >= (2))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">-\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(trimmed,(0),(2)))))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?\"</p>\":null),\"<footer>\",cljs.core.subs.cljs$core$IFn$_invoke$arity$2(text,(2)),\"</footer>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),false)], null);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(trimmed,(0),(1)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?null:\"<p>\"),cljs.core.subs.cljs$core$IFn$_invoke$arity$2(text,(1)),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?null:\"<p>\"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\r\n\r\n}\r\n}\r\n}\r\n}\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",cljs.core.first(text))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(text)),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),true,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n\r\n}\r\n}\r\n});\r\n/**\r\n * Check for change in blockquote states and add start or end tags.\r\n *   Closing a blockquote with a list in it is a bit more complex,\r\n *   as the list is not closed until the following blank line.\r\n */\r\nmarkdown.transformers.blockquote_2 = (function markdown$transformers$blockquote_2(text,p__74421){\r\nvar map__74422 = p__74421;\r\nvar map__74422__$1 = (((((!((map__74422 == null))))?(((((map__74422.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__74422.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__74422):map__74422);\r\nvar state = map__74422__$1;\r\nvar blockquote_start = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74422__$1,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935));\r\nvar blockquote_end = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74422__$1,new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964));\r\nvar blockquote_paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74422__$1,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682));\r\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__74422__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\r\nvar not_in_list = ((cljs.core.not(lists)) || (cljs.core.empty_QMARK_(lists)));\r\nif(cljs.core.truth_(blockquote_start)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<blockquote><p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935))], null);\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4115__auto__ = blockquote_end;\r\nif(cljs.core.truth_(and__4115__auto__)){\r\nreturn not_in_list;\r\n} else {\r\nreturn and__4115__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),(cljs.core.truth_(blockquote_paragraph)?\"</p>\":null),\"</blockquote>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964)], 0))], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n\r\n}\r\n}\r\n});\r\nmarkdown.transformers.footer = (function markdown$transformers$footer(footnotes){\r\nif(cljs.core.empty_QMARK_(new cljs.core.Keyword(null,\"processed\",\"processed\",800622264).cljs$core$IFn$_invoke$arity$1(footnotes))){\r\nreturn \"\";\r\n} else {\r\nreturn (function (p1__74424_SHARP_){\r\nreturn [\"<ol class='footnotes'>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__74424_SHARP_),\"</ol>\"].join('');\r\n})(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (footnotes__$1,p__74425){\r\nvar vec__74426 = p__74425;\r\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74426,(0),null);\r\nvar label = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74426,(1),null);\r\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(footnotes__$1),\"<li id='fn-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"'>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\" \",label))),\"<a href='#fnref\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"'>&#8617;</a></li>\"].join('');\r\n}),\"\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.sorted_map(),new cljs.core.Keyword(null,\"processed\",\"processed\",800622264).cljs$core$IFn$_invoke$arity$1(footnotes))));\r\n}\r\n});\r\n/**\r\n * Given a line of metadata header text return either a list containing a parsed\r\n *   and normalizd key and the original text of the value, or if no header is found\r\n *   (this is a continuation or new value from a pervious header key) simply\r\n *   return the text. If a blank or invalid line is found return nil.\r\n */\r\nmarkdown.transformers.parse_metadata_line = (function markdown$transformers$parse_metadata_line(line){\r\nif(cljs.core.truth_(line)){\r\nvar vec__74429 = cljs.core.re_matches(/^([0-9A-Za-z_-]*):(.*)$/,line);\r\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74429,(0),null);\r\nvar key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74429,(1),null);\r\nvar val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74429,(2),null);\r\nvar vec__74432 = cljs.core.re_matches(/^    (.*)$/,line);\r\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74432,(0),null);\r\nvar next_val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74432,(1),null);\r\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(clojure.string.trim(line),\"\")){\r\nif(cljs.core.truth_(key)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case(key)),val], null);\r\n} else {\r\nif(cljs.core.truth_(next_val)){\r\nreturn line;\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Given a list of maps which contain a single key/value, flatten them all into\r\n *   a single map with all the leading spaces removed. If an empty list is provided\r\n *   then return nil.\r\n */\r\nmarkdown.transformers.flatten_metadata = (function markdown$transformers$flatten_metadata(metadata){\r\nif((cljs.core.count(metadata) > (0))){\r\nvar acc = cljs.core.PersistentArrayMap.EMPTY;\r\nvar remain = metadata;\r\nvar prev_key = null;\r\nwhile(true){\r\nif((!(cljs.core.empty_QMARK_(remain)))){\r\nvar data = cljs.core.first(remain);\r\nvar vec__74441 = ((cljs.core.sequential_QMARK_(data))?data:new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prev_key,data], null));\r\nvar key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74441,(0),null);\r\nvar val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74441,(1),null);\r\nvar prev_val = cljs.core.get.cljs$core$IFn$_invoke$arity$3(acc,key,cljs.core.PersistentVector.EMPTY);\r\nvar postfix = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",\" \"], null),cljs.core.take_last((2),val)))?\"\\n\":\"\");\r\nvar norm_val = [clojure.string.trim(val),postfix].join('');\r\nvar new_val = (((!(cljs.core.empty_QMARK_(norm_val))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(prev_val,norm_val):prev_val);\r\nvar G__74576 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([acc,cljs.core.PersistentArrayMap.createAsIfByAssoc([key,new_val])], 0));\r\nvar G__74577 = cljs.core.rest(remain);\r\nvar G__74578 = key;\r\nacc = G__74576;\r\nremain = G__74577;\r\nprev_key = G__74578;\r\ncontinue;\r\n} else {\r\nreturn acc;\r\n}\r\nbreak;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.transformers.parse_wiki_metadata_headers = (function markdown$transformers$parse_wiki_metadata_headers(lines_seq){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,line){\r\nvar temp__5733__auto__ = markdown.transformers.parse_metadata_line(line);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar parsed = temp__5733__auto__;\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,parsed);\r\n} else {\r\nreturn cljs.core.reduced(markdown.transformers.flatten_metadata(acc));\r\n}\r\n}),cljs.core.PersistentVector.EMPTY,lines_seq);\r\n});\r\nmarkdown.transformers.parse_yaml_metadata_headers = (function markdown$transformers$parse_yaml_metadata_headers(lines_seq){\r\nthrow (new Error(\"YAML is unsupported in ClojureScript mode\"));\r\n});\r\nmarkdown.transformers.parse_edn_metadata_headers = (function markdown$transformers$parse_edn_metadata_headers(lines_seq){\r\nreturn cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.not,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.re_matches,/\\s*/)),lines_seq)));\r\n});\r\n/**\r\n * Given a sequence of lines from a markdown document, attempt to parse a\r\n *   metadata header if it exists. Accepts wiki, yaml, and edn formats.\r\n */\r\nmarkdown.transformers.parse_metadata_headers = (function markdown$transformers$parse_metadata_headers(lines_seq){\r\nif(cljs.core.sequential_QMARK_(lines_seq)){\r\n} else {\r\nthrow (new Error(\"Assert failed: (sequential? lines-seq)\"));\r\n}\r\n\r\nif(cljs.core.every_QMARK_(cljs.core.string_QMARK_,lines_seq)){\r\n} else {\r\nthrow (new Error(\"Assert failed: (every? string? lines-seq)\"));\r\n}\r\n\r\nif(cljs.core.truth_(cljs.core.re_matches(/--- */,cljs.core.first(lines_seq)))){\r\nreturn markdown.transformers.parse_yaml_metadata_headers(lines_seq);\r\n} else {\r\nif(cljs.core.truth_(cljs.core.re_matches(/\\w+: .*/,cljs.core.first(lines_seq)))){\r\nreturn markdown.transformers.parse_wiki_metadata_headers(lines_seq);\r\n} else {\r\nif(cljs.core.truth_(cljs.core.re_matches(/\\{.*/,cljs.core.first(lines_seq)))){\r\nreturn markdown.transformers.parse_edn_metadata_headers(lines_seq);\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n}\r\n});\r\nmarkdown.transformers.transformer_vector = cljs.core.PersistentVector.fromArray([markdown.transformers.set_line_state,markdown.transformers.empty_line,markdown.common.inhibit,markdown.common.escape_inhibit_separator,markdown.transformers.code,markdown.transformers.codeblock,markdown.common.escaped_chars,markdown.common.inline_code,markdown.transformers.autoemail_transformer,markdown.transformers.autourl_transformer,markdown.links.image,markdown.links.image_reference_link,markdown.links.link,markdown.links.implicit_reference_link,markdown.links.reference_link,markdown.links.footnote_link,markdown.transformers.hr,markdown.transformers.blockquote_1,markdown.lists.li,markdown.transformers.heading,markdown.transformers.blockquote_2,markdown.common.italics,markdown.common.bold_italic,markdown.common.em,markdown.common.strong,markdown.common.bold,markdown.common.strikethrough,markdown.transformers.superscript,markdown.tables.table,markdown.transformers.paragraph,markdown.transformers.br,markdown.common.thaw_strings,markdown.common.dashes,markdown.transformers.clear_line_state], true);\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/transformers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.transformers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^Q","~$markdown.tables","^R","~$goog","^S","~$markdown.lists","^T","~$string","~$clojure.string","~$markdown.links","^W","^V","^V","~$cljs.reader","^X","~$edn","^X","~$markdown.common","^Z"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$italics","^Z","~$separator","^Z","~$make-heading","^Z","~$dashes","^Z","~$thaw-strings","^Z","~$inhibit","^Z","~$implicit-reference-link","^W","~$bold","^Z","~$freeze-string","^Z","~$footnote-link","^W","~$escape-code","^Z","~$table","^R","~$strong","^Z","~$li","^T","~$reference-link","^W","~$image-reference-link","^W","~$em","^Z","~$escaped-chars","^Z","~$inline-code","^Z","~$strikethrough","^Z","~$bold-italic","^Z","~$link","^W","~$escape-inhibit-separator","^Z","~$image","^W"],"~:require-macros",["^ ","^Q","^Q","^X","^X","^Y","^X"],"~:form",["~#list",["~$ns","^L",["^1L",["^10",["^V","~:as","^U"],["^X","^1N","^Y"],["^W","~:refer",["^1G","^1I","^1@","^1A","^18","^1;"]],["^T","^1O",["^1?"]],["^R","^1O",["^1="]],["^Z","^1O",["^1<","^1C","^1:","^13","^16","^1>","^19","^1F","^1B","^12","^1E","^1D","^1H","^17","^14","^15"]]]]]],"~:flags",["^ ","^10",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^S","^Q","^V","^X","^W","^T","^R","^Z"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","markdown/transformers.cljc"],"~:compiled-at",1597165959319,"~:resource-name","markdown/transformers.cljc","~:warnings",[],"~:source","(ns markdown.transformers\n  (:require [clojure.string :as string]\n            #?(:clj  [clojure.edn :as edn]\n               :cljs [cljs.reader :as edn])\n            [markdown.links\n             :refer [link\n                     image\n                     reference-link\n                     image-reference-link\n                     implicit-reference-link\n                     footnote-link]]\n            [markdown.lists :refer [li]]\n            [markdown.tables :refer [table]]\n            [markdown.common\n             :refer\n             [escape-code\n              escaped-chars\n              freeze-string\n              separator\n              thaw-strings\n              strong\n              bold\n              bold-italic\n              em\n              italics\n              strikethrough\n              inline-code\n              escape-inhibit-separator\n              inhibit\n              make-heading\n              dashes]]\n            #?(:clj [clj-yaml.core :as yaml])))\n\n(declare ^:dynamic *formatter*)\n\n(defn heading? [text type]\n  (when-not (every? #{\\space} (take 4 text))\n    (let [trimmed (if text (string/trim text))]\n      (and (not-empty trimmed) (every? #{type} trimmed)))))\n\n(defn h1? [text]\n  (heading? text \\=))\n\n(defn h2? [text]\n  (heading? text \\-))\n\n(defn empty-line [text {:keys [code codeblock] :as state}]\n  (if (or code codeblock)\n    [text state]\n    [(if (or (h1? text) (h2? text)) \"\" text)\n     (if (string/blank? text) (dissoc state :hr :heading) state)]))\n\n(defn superscript [text state]\n  (if (:code state)\n    [text state]\n    (let [tokens (partition-by (partial contains? #{\\^ \\space}) text)]\n      (loop [buf       []\n             remaining tokens]\n        (cond\n          (empty? remaining)\n          [(string/join buf) state]\n\n          (= (first remaining) [\\^])\n          (recur (into buf (concat (seq \"<sup>\") (second remaining) (seq \"</sup>\")))\n                 (drop 2 remaining))\n\n          :default\n          (recur (into buf (first remaining)) (rest remaining)))))))\n\n(defn heading [text {:keys [buf next-line code codeblock heading-anchors] :as state}]\n  (cond\n    (or codeblock code)\n    [text state]\n\n    (h1? (or buf next-line))\n    [(str \"<h1>\" text \"</h1>\") (assoc state :heading true)]\n\n    (h2? (or buf next-line))\n    [(str \"<h2>\" text \"</h2>\") (assoc state :heading true)]\n\n    :else\n    (if-let [heading (make-heading text heading-anchors)]\n      [heading (assoc state :inline-heading true)]\n      [text state])))\n\n(defn br [text {:keys [code lists] :as state}]\n  [(if (and (= [\\space \\space] (take-last 2 text))\n            (not (or code lists)))\n     (str (apply str (drop-last 2 text)) \"<br />\")\n     text)\n   state])\n\n(defn autourl-transformer [text {:keys [code frozen-strings] :as state}]\n  (if code\n    [text state]\n    (let [currently-frozen (volatile! {:frozen-strings frozen-strings})]\n      [(string/replace\n         text\n         #\"<https?://[-A-Za-z0-9+&@#/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#/%=~_()|]>\"\n         #(let [[url frozen-strings] (freeze-string (subs % 1 (dec (count %))) @currently-frozen)]\n            (vreset! currently-frozen frozen-strings)\n            (str \"<a href=\\\"\" url \"\\\">\" url \"</a>\")))\n       (merge state @currently-frozen)])))\n\n(defn autoemail-transformer [text state]\n  (let [left-pad (fn [s]\n                   (cond->> s\n                            (= 1 (count s)) (str \"0\")))\n        encoder  (if (:clojurescript state)\n                   (fn [c] (str \"&#x\" (-> c (.charCodeAt 0) (.toString 16) left-pad) \";\"))\n                   (fn [c] (*formatter* \"&#x%02x;\" (int c))))]\n    [(if (or (:code state) (:codeblock state))\n       text\n       (string/replace\n         text\n         #\"<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>\"\n         #(let [encoded (->> (subs % 1 (dec (count %)))\n                             (map encoder)\n                             (apply str))]\n            (str \"<a href=\\\"mailto:\" encoded \"\\\">\" encoded \"</a>\"))))\n     state]))\n\n(defn set-line-state [text {:keys [inline-heading] :as state}]\n  [text\n   (-> state\n       (dissoc :inline-heading)\n       (assoc-in [:temp :inline-heading] inline-heading))])\n\n(defn clear-line-state [text state]\n  [text (dissoc state :temp)])\n\n(defn paragraph-text [last-line-empty? text]\n  (if (and (not last-line-empty?) (not-empty text))\n    (str \" \" text)\n    text))\n\n(defn open-paragraph\n  [text {:keys [eof heading inline-heading temp hr code lists blockquote paragraph last-line-empty?] :as state}]\n  (cond\n    (and paragraph lists)\n    [(str \"</p>\" text) (dissoc state :paragraph)]\n\n    (or heading inline-heading hr code lists blockquote)\n    [text state]\n\n    paragraph\n    (if (or eof (empty? (string/trim text)))\n      [(str (paragraph-text last-line-empty? text) \"</p>\") (dissoc state :paragraph)]\n      [(paragraph-text last-line-empty? text) state])\n\n    (and (not eof) (not (string/blank? text)) (or (:inline-heading temp) last-line-empty?))\n    [(str \"<p>\" text) (assoc state :paragraph true :last-line-empty? false)]\n\n    :default\n    [text state]))\n\n(defn close-paragraph [text {:keys [next-line paragraph] :as state}]\n  (if (and paragraph (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim))))\n    [(str text \"</p>\") (dissoc state :paragraph)]\n    [text state]))\n\n(defn paragraph [text state]\n  (apply close-paragraph (open-paragraph text state)))\n\n(defn code [text {:keys [eof lists code codeblock paragraph] :as state}]\n  (cond\n    (or lists codeblock)\n    [text state]\n\n    code\n    (if (or eof (not= \"    \" (string/join (take 4 text))))\n      [(str \"</code></pre>\" text) (dissoc state :indented-code :code :last-line-empty?)]\n      [(str \"\\n\" (escape-code (string/replace-first text #\"    \" \"\"))) state])\n\n    paragraph\n    [text state]\n\n    (empty? (string/trim text))\n    [text state]\n\n    :default\n    (let [num-spaces (count (take-while (partial = \\space) text))]\n      (if (> num-spaces 3)\n        [(str \"<pre><code>\" (escape-code (string/replace-first text #\"    \" \"\")))\n         (assoc state :code true :indented-code true)]\n        [text state]))))\n\n(defn codeblock [text {:keys [codeblock codeblock-end indented-code next-line lists] :as state}]\n  (let [trimmed           (string/trim text)\n        next-line-closes? (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim)))]\n    (cond\n      (and lists codeblock-end)\n      [\"\" (dissoc state :code :codeblock :codeblock-end)]\n\n      codeblock-end\n      [text (-> state\n                (assoc :last-line-empty? true)\n                (dissoc :code :codeblock :codeblock-end))]\n\n      (and next-line-closes? codeblock)\n      [(str (escape-code (str text \"\\n\" (apply str (first (string/split next-line #\"```\"))))) \"</code></pre>\")\n       (assoc state :skip-next-line? (not lists)\n                    :codeblock-end true\n                    :last-line-empty? (not lists))]\n\n      (and\n        (not indented-code)\n        (= [\\` \\` \\`] (take 3 trimmed)))\n      (let [[lang code] (split-with (partial not= \\newline) (drop 3 trimmed))\n            lang      (string/trim (string/join lang))\n            s         (apply str (rest code))\n            formatter (:code-style state)]\n        [(str \"<pre><code\" (if (not-empty lang)\n                             (str \" \"\n                                  (if formatter\n                                    (formatter lang)\n                                    (str \"class=\\\"\" (string/join lang) \"\\\"\")))) \">\"\n              (escape-code (if (empty? s) s (str s \"\\n\")))\n              (when next-line-closes? \"</code></pre>\"))\n         (if next-line-closes?\n           (assoc state :codeblock-end true :skip-next-line? true)\n           (assoc state :code true :codeblock true))])\n\n      codeblock\n      [(str (escape-code text) \"\\n\") state]\n\n      :default\n      [text state])))\n\n(defn hr [text state]\n  (if (:code state)\n    [text state]\n    (if (and\n          (or (empty? (drop-while #{\\* \\space} text))\n              (empty? (drop-while #{\\- \\space} text))\n              (empty? (drop-while #{\\_ \\space} text)))\n          (> (count (remove #{\\space} text)) 2))\n      [(str \"<hr/>\") (assoc state :hr true)]\n      [text state])))\n\n(defn blockquote-1\n  \"Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes.\"\n  [text {:keys [eof code codeblock lists] :as state}]\n  (let [trimmed (string/trim text)]\n    (cond\n      (or code codeblock)\n      [text state]\n\n      (:blockquote state)\n      (cond (or eof (empty? trimmed))\n            [text (assoc state :blockquote-end true :blockquote false)]\n\n            (= \">\" trimmed)\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<p>\") (assoc state :blockquote-paragraph true)]\n\n            (and (>= (count trimmed) 2) (= \">-\" (subs trimmed 0 2)))\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<footer>\" (subs text 2) \"</footer>\") (assoc state :blockquote-paragraph false)]\n\n            (= \">\" (subs trimmed 0 1))\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") (subs text 1) \" \") (assoc state :blockquote-paragraph true)]\n\n            :default\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") text \" \") (assoc state :blockquote-paragraph true)])\n\n      :default\n      (if (= \\> (first text))\n        [(str (string/join (rest text)) \" \")\n         (assoc state :blockquote-start true :blockquote true :blockquote-paragraph true)]\n        [text state]))))\n\n(defn blockquote-2\n  \"Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line.\"\n  [text {:keys [blockquote-start blockquote-end blockquote-paragraph lists] :as state}]\n  (let [not-in-list (or (not lists) (empty? lists))]\n    (cond blockquote-start\n          [(str \"<blockquote><p>\" text)\n           (dissoc state :blockquote-start)]\n\n          (and blockquote-end not-in-list)\n          [(str text (when blockquote-paragraph \"</p>\") \"</blockquote>\")\n           (dissoc state :blockquote :blockquote-paragraph :blockquote-end)]\n\n          :default\n          [text state])))\n\n(defn footer [footnotes]\n  (if (empty? (:processed footnotes))\n    \"\"\n    (->> (:processed footnotes)\n         (into (sorted-map))\n         (reduce\n           (fn [footnotes [id label]]\n             (str footnotes\n                  \"<li id='fn-\" id \"'>\"\n                  (apply str (interpose \" \" label))\n                  \"<a href='#fnref\" id \"'>&#8617;</a></li>\"))\n           \"\")\n         (#(str \"<ol class='footnotes'>\" % \"</ol>\")))))\n\n(defn parse-metadata-line\n  \"Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil.\"\n  [line]\n  (when line\n    (let [[_ key val] (re-matches #\"^([0-9A-Za-z_-]*):(.*)$\" line)\n          [_ next-val] (re-matches #\"^    (.*)$\" line)]\n      (when (not= (string/trim line) \"\")\n        (cond\n          key [(keyword (string/lower-case key)) val]\n          next-val line)))))\n\n(defn flatten-metadata\n  \"Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil.\"\n  [metadata]\n  (when (pos? (count metadata))\n    (loop [acc      {}\n           remain   metadata\n           prev-key nil]\n      (if (not (empty? remain))\n        (let [data     (first remain)\n              [key val] (if (sequential? data) data [prev-key data])\n              prev-val (get acc key [])\n              postfix  (if (= [\\space \\space] (take-last 2 val)) \"\\n\" \"\")\n              norm-val (str (string/trim val) postfix)\n              new-val  (if-not (empty? norm-val)\n                         (conj prev-val norm-val)\n                         prev-val)]\n          (recur (merge acc {key new-val}) (rest remain) key))\n        acc))))\n\n\n(defn parse-wiki-metadata-headers\n  [lines-seq]\n  (reduce\n    (fn [acc line]\n      (if-let [parsed (parse-metadata-line line)]\n        (conj acc parsed)\n        (reduced (flatten-metadata acc))))\n    [] lines-seq))\n\n(defn parse-yaml-metadata-headers\n  [lines-seq]\n  #?(:clj\n     (->> lines-seq\n          ;; leave off opening ---\n          (drop 1)\n          ;; take lines until we see the closing ---\n          (take-while (comp not (partial re-matches #\"---\\s*\")))\n          ;; join together and parse\n          (string/join \"\\n\")\n          yaml/parse-string)\n     :cljs\n     (throw (js/Error. \"YAML is unsupported in ClojureScript mode\"))))\n\n(defn parse-edn-metadata-headers\n  [lines-seq]\n  (->> lines-seq\n       ;; take sequences until you hit an empty line\n       (take-while (comp not (partial re-matches #\"\\s*\")))\n       ;; join together and parse\n       (string/join \"\\n\")\n       edn/read-string))\n\n(defn parse-metadata-headers\n  \"Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats.\"\n  [lines-seq]\n  {:pre [(sequential? lines-seq)\n         (every? string? lines-seq)]}\n  (cond\n    ;; Treat as yaml\n    (re-matches #\"--- *\" (first lines-seq))\n    (parse-yaml-metadata-headers lines-seq)\n    ;; Treat as wiki\n    (re-matches #\"\\w+: .*\" (first lines-seq))\n    (parse-wiki-metadata-headers lines-seq)\n    ;; Treat as edn\n    (re-matches #\"\\{.*\" (first lines-seq))\n    (parse-edn-metadata-headers lines-seq)))\n\n(def transformer-vector\n  [set-line-state\n   empty-line\n   inhibit\n   escape-inhibit-separator\n   code\n   codeblock\n   escaped-chars\n   inline-code\n   autoemail-transformer\n   autourl-transformer\n   image\n   image-reference-link\n   link\n   implicit-reference-link\n   reference-link\n   footnote-link\n   hr\n   blockquote-1\n   li\n   heading\n   blockquote-2\n   italics\n   bold-italic\n   em\n   strong\n   bold\n   strikethrough\n   superscript\n   table\n   paragraph\n   br\n   thaw-strings\n   dashes\n   clear-line-state])\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAiCA,AAAA,AAEA,AAAA,AAAMA,AAAUC,AAAKC;AAArB,AACE,AAAU,AAAA,AAAA,AAACC,AAAiB,AAAA,AAACC,AAAOH;AAApC;;AAAA,AACE,AAAMI,AAAQ,AAAA,AAAIJ,AAAK,AAACK,AAAYL;AAApC,AACE,AAAAM,AAAK,AAACC,AAAUH;AAAhB,AAAA,AAAAE;AAAyB,AAAA,AAACJ,AAASD,AAAMG;;AAAzCE;;;;AAEN,AAAA,AAAME,AAAKR;AAAX,AACE,AAAA,AAACD,AAASC;;AAEZ,AAAA,AAAMS,AAAKT;AAAX,AACE,AAAA,AAACD,AAASC;;AAEZ,AAAA,AAAAU,AAAMM,AAAYhB;AAAlB,AAAA,AAAAW,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAmDQ;AAAnD,AAAAJ,AAAAJ,AAAA,AAA+BM;AAA/B,AAAAF,AAAAJ,AAAA,AAAoCO;AAApC,AACE,AAAI,AAAAE,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAASF;;;AAAb,AACGlB,AAAKmB;;AADR,AAEG,AAAI,AAAAC,AAAI,AAACZ,AAAIR;AAAT,AAAA,AAAAoB;AAAAA;;AAAe,AAACX,AAAIT;;AAAxB,AAAkCA,AAClC,AAAI,AAACqB,AAAcrB,AAAM,AAAA,AAAA,AAACsB,AAAOH,AAAoBA;;;AAE1D,AAAA,AAAMI,AAAavB,AAAKmB;AAAxB,AACE,AAAI,AAAA,AAAOA;AAAX,AACGnB,AAAKmB;;AACN,AAAMK,AAAO,AAACC,AAAa,AAAA,AAAA,AAAA,AAACC,AAAQC,AAAwB3B;AAA5D,AACE,AAAA,AAAO4B;AACAC,AAAUL;;AADjB,AAEE,AACE,AAACM,AAAOD;AADV,AAEG,AAACE,AAAYH,AAAKT;;AAFrB,AAIE,AAAA,AAAA,AAACa,AAAE,AAACC,AAAMJ;AACV,AAAO,AAACK,AAAKN,AAAI,AAACO,AAAO,AAAA,AAACC,AAAa,AAACC,AAAOR,AAAW,AAAA,AAACO;AACpD,AAAA,AAACE,AAAOT;;;;;AANjB,AASE,AAAO,AAACK,AAAKN,AAAI,AAACK,AAAMJ;AAAY,AAACU,AAAKV;;;;;;;;;;;AAEpD,AAAA,AAAAW,AAAME,AAAS1C;AAAf,AAAA,AAAAyC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7B,AAAA,AAAA6B,AAAA,AAAA,AAAA,AAAA,AAAA5B,AAAAC,AAAA2B,AAAAA;AAAAA,AAA8EtB;AAA9E,AAAAJ,AAAA0B,AAAA,AAA4Bb;AAA5B,AAAAb,AAAA0B,AAAA,AAAgCE;AAAhC,AAAA5B,AAAA0B,AAAA,AAA0CxB;AAA1C,AAAAF,AAAA0B,AAAA,AAA+CvB;AAA/C,AAAAH,AAAA0B,AAAA,AAAyDG;AAAzD,AACE,AACE,AAAAxB,AAAIF;AAAJ,AAAA,AAAAE;AAAAA;;AAAcH;;;AADhB,AAEGjB,AAAKmB;;AAFR,AAIE,AAACX,AAAI,AAAAY,AAAIQ;AAAJ,AAAA,AAAAR;AAAAA;;AAAQuB;;;AAJf,AAKG,AAAA,AAAA,AAAY3C,AAAc,AAAA,AAAA,AAAC6C,AAAM1B;;AALpC,AAOE,AAACV,AAAI,AAAAW,AAAIQ;AAAJ,AAAA,AAAAR;AAAAA;;AAAQuB;;;AAPf,AAQG,AAAA,AAAA,AAAY3C,AAAc,AAAA,AAAA,AAAC6C,AAAM1B;;AARpC,AAWE,AAAA2B,AAAiB,AAACE,AAAahD,AAAK4C;AAApC,AAAA,AAAAE;AAAA,AAAAA,AAASC;AAAT,AAAA,AACGA,AAAQ,AAAA,AAAA,AAACF,AAAM1B;;AADlB,AAEGnB,AAAKmB;;;;;;;AAEZ,AAAA,AAAA8B,AAAME,AAAInD;AAAV,AAAA,AAAAkD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtC,AAAA,AAAAsC,AAAA,AAAA,AAAA,AAAA,AAAArC,AAAAC,AAAAoC,AAAAA;AAAAA,AAAuC/B;AAAvC,AAAAJ,AAAAmC,AAAA,AAAuBjC;AAAvB,AAAAF,AAAAmC,AAAA,AAA4BE;AAA5B,AAAA,AACG,AAAI,AAAK,AAAA,AAAA,AAAA,AAACpB,AAAkB,AAAA,AAACqB,AAAYrD,AAChC,AAACsD,AAAI,AAAAlC,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAASgC;;AACrB,AAAA,AAAK,AAACvC,AAAM0C,AAAI,AAAA,AAACC,AAAYxD,AAC7BA,AACFmB;;AAEH,AAAA,AAAAsC,AAAME,AAAqB3D;AAA3B,AAAA,AAAA0D,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9C,AAAA,AAAA8C,AAAA,AAAA,AAAA,AAAA,AAAA7C,AAAAC,AAAA4C,AAAAA;AAAAA,AAAiEvC;AAAjE,AAAAJ,AAAA2C,AAAA,AAAwCzC;AAAxC,AAAAF,AAAA2C,AAAA,AAA6CE;AAA7C,AACE,AAAI3C;AAAJ,AACGjB,AAAKmB;;AACN,AAAM0C,AAAiB,AAAA,AAAA,AAACC,AAA2BF;AAAnD,AAAA,AACG,AAAA,AAAA,AAAAG,AAACC,AACChE;AADF,AAGG,AAAAiE,AAA2B,AAAA,AAAAG,AAACC,AAAc,AAAAN,AAAA,AAACO,AAAS,AAAA,AAAK,AAAAP,AAACQ,AAAYV;AAAtE,AAAAK,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAWL;AAAX,AACE,AAACY,AAAQX,AAAiBD;;AAC1B,AAAA,AAAA,AAAA,AAAkBO,AAAUA;AACjC,AAAA,AAAAC,AAACK,AAAMtD,AAAO0C;;;AAErB,AAAA,AAAMa,AAAuB1E,AAAKmB;AAAlC,AACE,AAAMwD,AAAS,AAAKC;AAAL,AACE,AAAAC,AAASD;AAAT,AAAA,AACS,AAAA,AAAC5C,AAAI,AAACuC,AAAMK;AAAI,AAAA,AAAAC;;AADzBA;;;AAEXC,AAAS,AAAI,AAAA,AAAgB3D,AAClB,AAAK4D;AAAL,AAAQ,AAAA,AAAA,AAAW,AAAIA,AAAE,AAAA,AAAgB,AAAA,AAAeJ;AACxD,AAAKI;AAAL,AAAQ,AAAA,AAACC,AAAuB,AAAA,AAAKD;;AALtD,AAAA,AAMG,AAAI,AAAA3D,AAAI,AAAA,AAAOD;AAAX,AAAA,AAAAC;AAAAA;;AAAkB,AAAA,AAAYD;;AAChCnB,AACA,AAAA,AAAA,AAAAiF,AAACjB,AACChE;AADF,AAGG,AAAMkF,AAAa,AAAAD,AAAA,AAACX,AAAS,AAAA,AAAK,AAAAW,AAACV,AAChB,AAACY,AAAIL,AACL,AAACjE,AAAM0C;AAF1B,AAGE,AAAA,AAAA,AAAA,AAAyB2B,AAAcA;AAC9C/D;;AAEL,AAAA,AAAAiE,AAAME,AAAgBtF;AAAtB,AAAA,AAAAqF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzE,AAAA,AAAAyE,AAAA,AAAA,AAAA,AAAA,AAAAxE,AAAAC,AAAAuE,AAAAA;AAAAA,AAAuDlE;AAAvD,AAAAJ,AAAAsE,AAAA,AAAmCE;AAAnC,AAAA,AACGvF,AACImB,AACA,AAAA,AAACG,AACD,AAAA,AAAA,AAAA,AAACkE,AAAiCD;;AAEzC,AAAA,AAAME,AAAkBzF,AAAKmB;AAA7B,AAAA,AACGnB,AAAK,AAAA,AAACsB,AAAOH;;AAEhB,AAAA,AAAMuE,AAAgBC,AAAiB3F;AAAvC,AACE,AAAI,AAAA,AAAK,AAACsD,AAAIqC,AAAkB,AAACpF,AAAUP;AACzC,AAAA,AAASA;;AACTA;;;AAEJ,AAAA,AAAA4F,AAAME,AACH9F;AADH,AAAA,AAAA6F,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjF,AAAA,AAAAiF,AAAA,AAAA,AAAA,AAAA,AAAAhF,AAAAC,AAAA+E,AAAAA;AAAAA,AACyG1E;AADzG,AAAAJ,AAAA8E,AAAA,AACgBE;AADhB,AAAAhF,AAAA8E,AAAA,AACyEM;AADzE,AAAApF,AAAA8E,AAAA,AAC8DK;AAD9D,AAAAnF,AAAA8E,AAAA,AACoB9C;AADpB,AAAAhC,AAAA8E,AAAA,AACgDI;AADhD,AAAAlF,AAAA8E,AAAA,AAC2CG;AAD3C,AAAAjF,AAAA8E,AAAA,AACwDzC;AADxD,AAAArC,AAAA8E,AAAA,AAC4BN;AAD5B,AAAAxE,AAAA8E,AAAA,AACmFF;AADnF,AAAA5E,AAAA8E,AAAA,AACmD5E;AADnD,AAEE,AACE,AAAAX,AAAK6F;AAAL,AAAA,AAAA7F;AAAe8C;;AAAf9C;;;AADF,AAEG,AAAA,AAAYN,AAAM,AAAA,AAACsB,AAAOH;;AAF7B,AAIE,AAAAC,AAAI2B;AAAJ,AAAA,AAAA3B;AAAAA;;AAAA,AAAAA,AAAYmE;AAAZ,AAAA,AAAAnE;AAAAA;;AAAA,AAAAA,AAA2B6E;AAA3B,AAAA,AAAA7E;AAAAA;;AAAA,AAAAA,AAA8BH;AAA9B,AAAA,AAAAG;AAAAA;;AAAA,AAAAA,AAAmCgC;AAAnC,AAAA,AAAAhC;AAAAA;;AAAyC8E;;;;;;;AAJ3C,AAKGlG,AAAKmB;;AALR,AAOEgF;AACA,AAAI,AAAA/E,AAAI2E;AAAJ,AAAA,AAAA3E;AAAAA;;AAAQ,AAACU,AAAO,AAACzB,AAAYL;;;AAAjC,AACG,AAAA,AAAK,AAAC0F,AAAeC,AAAiB3F,AAAc,AAAA,AAACsB,AAAOH;;AAD/D,AAEG,AAACuE,AAAeC,AAAiB3F,AAAMmB;;;AAV5C,AAYE,AAAA,AAAK,AAACmC,AAAIyC,AAAK,AAAK,AAAC1E,AAAcrB,AAAO,AAAAoB,AAAI,AAAA,AAAiB4E;AAArB,AAAA,AAAA5E;AAAAA;;AAA2BuE;;AAArE,AAAA;AAZF,AAaG,AAAA,AAAW3F,AAAM,AAAA,AAAA,AAAA,AAAA,AAAC6C,AAAM1B;;AAb3B,AAAA,AAgBGnB,AAAKmB;;;;;;;AAEV,AAAA,AAAAiF,AAAME,AAAiBtG;AAAvB,AAAA,AAAAqG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzF,AAAA,AAAAyF,AAAA,AAAA,AAAA,AAAA,AAAAxF,AAAAC,AAAAuF,AAAAA;AAAAA,AAA6DlF;AAA7D,AAAAJ,AAAAsF,AAAA,AAAoC1D;AAApC,AAAA5B,AAAAsF,AAAA,AAA8CF;AAA9C,AACE,AAAI,AAAA7F,AAAK6F;AAAL,AAAA,AAAA7F;AAAe,AAAA,AAAA,AAAA,AAAA,AAAC0B,AAAa,AAAA,AAACqB,AAAY,AAAAkD,AAAQ5D;AAAR,AAAA,AAAA,AAAA4D,AAAA;AAAA;;AAAA,AAAAA,AAAkBlG;;;;AAA5DC;;;AAAJ,AACG,AAAA,AAAKN,AAAa,AAAA,AAACsB,AAAOH;;AAD7B,AAEGnB,AAAKmB;;;AAEV,AAAA,AAAMqF,AAAWxG,AAAKmB;AAAtB,AACE,AAACN,AAAMyF,AAAgB,AAACR,AAAe9F,AAAKmB;;AAE9C,AAAA,AAAAsF,AAAME,AAAM3G;AAAZ,AAAA,AAAA0G,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9F,AAAA,AAAA8F,AAAA,AAAA,AAAA,AAAA,AAAA7F,AAAAC,AAAA4F,AAAAA;AAAAA,AAAiEvF;AAAjE,AAAAJ,AAAA2F,AAAA,AAAyBX;AAAzB,AAAAhF,AAAA2F,AAAA,AAA6BtD;AAA7B,AAAArC,AAAA2F,AAAA,AAAmCzF;AAAnC,AAAAF,AAAA2F,AAAA,AAAwCxF;AAAxC,AAAAH,AAAA2F,AAAA,AAAkDP;AAAlD,AACE,AACE,AAAA/E,AAAIgC;AAAJ,AAAA,AAAAhC;AAAAA;;AAAUF;;;AADZ,AAEGlB,AAAKmB;;AAFR,AAIEF;AACA,AAAI,AAAAG,AAAI2E;AAAJ,AAAA,AAAA3E;AAAAA;;AAAQ,AAAA,AAACwF,AAAY,AAAC7E,AAAY,AAAA,AAAC5B,AAAOH;;;AAA9C,AACG,AAAA,AAAqBA,AAAM,AAAA,AAAA,AAAA,AAACsB,AAAOH;;AADtC,AAEG,AAAA,AAAU,AAAC0F,AAAY,AAAA,AAAA,AAACC,AAAqB9G,AAAmBmB;;;AAPrE,AASEgF;AATF,AAUGnG,AAAKmB;;AAVR,AAYE,AAACW,AAAO,AAACzB,AAAYL;AAZvB,AAaGA,AAAKmB;;AAbR,AAgBE,AAAM4F,AAAW,AAACxC,AAAM,AAACyC,AAAW,AAAA,AAACtF,AAAQuF,AAAUjH;AAAvD,AACE,AAAI,AAAA,AAAG+G;AAAP,AACG,AAAA,AAAmB,AAACF,AAAY,AAAA,AAAA,AAACC,AAAqB9G,AACtD,AAAA,AAAA,AAAA,AAAA,AAAC6C,AAAM1B;;AAFV,AAGGnB,AAAKmB;;;;;;;;AAEd,AAAA,AAAA+F,AAAME,AAAWpH;AAAjB,AAAA,AAAAmH,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvG,AAAA,AAAAuG,AAAA,AAAA,AAAA,AAAA,AAAAtG,AAAAC,AAAAqG,AAAAA;AAAAA,AAAyFhG;AAAzF,AAAAJ,AAAAoG,AAAA,AAA8BjG;AAA9B,AAAAH,AAAAoG,AAAA,AAAwCE;AAAxC,AAAAtG,AAAAoG,AAAA,AAAsDG;AAAtD,AAAAvG,AAAAoG,AAAA,AAAoExE;AAApE,AAAA5B,AAAAoG,AAAA,AAA8E/D;AAA9E,AACE,AAAMhD,AAAkB,AAACC,AAAYL;AAC/BuH,AAAkB,AAAA,AAAA,AAAA,AAAA,AAACvF,AAAa,AAAA,AAACqB,AAAY,AAAAmE,AAAQ7E;AAAR,AAAA,AAAA,AAAA6E,AAAA;AAAA;;AAAA,AAAAA,AAAkBnH;;;AADrE,AAEE,AACE,AAAAC,AAAK8C;AAAL,AAAA,AAAA9C;AAAW+G;;AAAX/G;;;AADF,AAAA,AAEM,AAAA,AAAA,AAAA,AAACgB,AAAOH;;AAFd,AAIEkG;AAJF,AAKGrH,AAASmB,AACA,AAAA,AAAA,AAAC0B,AACD,AAAA,AAAA,AAAA,AAACvB;;AAPb,AASE,AAAA,AAAKiG,AAAkBrG;AATzB,AAUG,AAAA,AAAK,AAAC2F,AAAY,AAAA,AAAK7G,AAAU,AAACa,AAAM0C,AAAI,AAACtB,AAAM,AAAA,AAACwF,AAAa9E,AACjE,AAAA,AAAA,AAAA,AAAA,AAACE,AAAM1B,AAAuB,AAACmC,AAAIF,AAEJ,AAACE,AAAIF;;AAbvC,AAeE,AACE,AAACE,AAAIgE,AACL,AAAA,AAAA,AAAA,AAAA,AAACtF,AAAa,AAAA,AAAC7B,AAAOC;AACxB,AAAAsH,AAAkB,AAACE,AAAW,AAAA,AAAClG,AAAQmG,AAAe,AAAA,AAACvF,AAAOlC;AAA9D,AAAA8D,AAAAwD,AAAA,AAAA,AAAOC;AAAP,AAAAzD,AAAAwD,AAAA,AAAA,AAAYzG;AACN0G,AAAU,AAACtH,AAAY,AAAC0B,AAAY4F;AACpC/C,AAAU,AAAC/D,AAAM0C,AAAI,AAAChB,AAAKtB;AAC3B6G,AAAU,AAAA,AAAa3G;AAH7B,AAAA,AAIG,AAAA,AAAA,AAAkB,AAAA,AAAI,AAACZ,AAAUoH,AACb,AAAA,AACK,AAAIG,AACF,AAACA,AAAAA,AAAAA,AAAUH,AAAAA,AACX,AAAA,AAAA,AAAgB,AAAC5F,AAAY4F,AACnD,AAACd,AAAY,AAAI,AAAC/E,AAAO8C,AAAGA,AAAE,AAAA,AAAKA,AACnC,AAAA,AAAA,AAAA,AAAM2C,AACX,AAAIA,AACF,AAAA,AAAA,AAAA,AAAA,AAAC1E,AAAM1B,AACP,AAAA,AAAA,AAAA,AAAA,AAAC0B,AAAM1B;;AA/Bd,AAiCED;AAjCF,AAkCG,AAAA,AAAK,AAAC2F,AAAY7G,AAAYmB;;AAlCjC,AAAA,AAqCGnB,AAAKmB;;;;;;;;AAEZ,AAAA,AAAM4G,AAAI/H,AAAKmB;AAAf,AACE,AAAI,AAAA,AAAOA;AAAX,AACGnB,AAAKmB;;AACN,AAAI,AACE,AAAI,AAACW,AAAO,AAAA,AAAA,AAAA,AAACkG,AAAwBhI,AACjC,AAAC8B,AAAO,AAAA,AAAA,AAAA,AAACkG,AAAwBhI,AACjC,AAAC8B,AAAO,AAAA,AAAA,AAAA,AAACkG,AAAwBhI,AACrC,AAAA,AAAG,AAACuE,AAAM,AAAA,AAAA,AAAC0D,AAAiBjI;AAJlC,AAKG,AAAc,AAAA,AAAA,AAAC6C,AAAM1B;;AALxB,AAMGnB,AAAKmB;;;;AAEZ;;;;;AAAA,AAAA+G,AAAME,AAIHpI;AAJH,AAAA,AAAAmI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvH,AAAA,AAAAuH,AAAA,AAAA,AAAA,AAAA,AAAAtH,AAAAC,AAAAqH,AAAAA;AAAAA,AAI8ChH;AAJ9C,AAAAJ,AAAAoH,AAAA,AAIgBpC;AAJhB,AAAAhF,AAAAoH,AAAA,AAIoBlH;AAJpB,AAAAF,AAAAoH,AAAA,AAIyBjH;AAJzB,AAAAH,AAAAoH,AAAA,AAImC/E;AAJnC,AAKE,AAAMhD,AAAQ,AAACC,AAAYL;AAA3B,AACE,AACE,AAAAoB,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAASF;;;AADX,AAEGlB,AAAKmB;;AAFR,AAIE,AAAA,AAAaA;AACb,AAAM,AAAAC,AAAI2E;AAAJ,AAAA,AAAA3E;AAAAA;;AAAQ,AAACU,AAAO1B;;;AAAtB,AACOJ,AAAK,AAAA,AAAA,AAAA,AAAA,AAAC6C,AAAM1B;;AADnB,AAGM,AAAA,AAACa,AAAM5B;AAHb,AAIO,AAAA,AAAK,AAAA,AAAA,AAAA,AAAM,AAAA,AAAuBe,AAAsB,AAAA,AAAA,AAAC0B,AAAM1B;;AAJtE,AAMM,AAAK,AAAA,AAAI,AAAOf,AAAY,AAAA,AAAC4B,AAAO,AAAA,AAAA,AAACsC,AAAKlE;AANhD,AAOO,AAAA,AAAA,AAAK,AAAA,AAAA,AAAA,AAAM,AAAA,AAAuBe,AAA0B,AAAA,AAACmD,AAAKtE,AAAqB,AAAA,AAAA,AAAC6C,AAAM1B;;AAPrG,AASM,AAAA,AAACa,AAAM,AAAA,AAAA,AAACsC,AAAKlE;AATnB,AAUO,AAAA,AAAK,AAAA,AAAA,AAAA,AAAU,AAAA,AAAuBe,AAAc,AAAA,AAACmD,AAAKtE,AAAa,AAAA,AAAA,AAAC6C,AAAM1B;;AAVrF,AAAA,AAaO,AAAA,AAAK,AAAA,AAAA,AAAA,AAAU,AAAA,AAAuBA,AAAcnB,AAAU,AAAA,AAAA,AAAC6C,AAAM1B;;;;;;;AAlB9E,AAqBE,AAAI,AAAA,AAACa,AAAK,AAACC,AAAMjC;AAAjB,AACG,AAAA,AAAK,AAAC+B,AAAY,AAACQ,AAAKvC,AACxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC6C,AAAM1B;;AAFV,AAGGnB,AAAKmB;;;;;;AAEd;;;;;AAAA,AAAAkH,AAAME,AAIHvI;AAJH,AAAA,AAAAsI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1H,AAAA,AAAA0H,AAAA,AAAA,AAAA,AAAA,AAAAzH,AAAAC,AAAAwH,AAAAA;AAAAA,AAIgFnH;AAJhF,AAAAJ,AAAAuH,AAAA,AAIgBE;AAJhB,AAAAzH,AAAAuH,AAAA,AAIiCG;AAJjC,AAAA1H,AAAAuH,AAAA,AAIgDI;AAJhD,AAAA3H,AAAAuH,AAAA,AAIqElF;AAJrE,AAKE,AAAMuF,AAAY,AAAI,AAACrF,AAAIF,AAAO,AAACtB,AAAOsB;AAA1C,AACE,AAAMoF;AAAN,AACO,AAAA,AAAuBxI,AACvB,AAAA,AAACsB,AAAOH;;AAFf,AAIM,AAAAb,AAAKmI;AAAL,AAAA,AAAAnI;AAAoBqI;;AAApBrI;;;AAJN,AAKO,AAAA,AAAKN,AAAK,AAAA,AAAA,AAAA,AAAM0I,AAChB,AAAA,AAAA,AAAA,AAACpH,AAAOH;;AANf,AAAA,AASOnB,AAAKmB;;;;;AAEhB,AAAA,AAAMyH,AAAQC;AAAd,AACE,AAAI,AAAC/G,AAAO,AAAA,AAAY+G;AAAxB;;AAWO,AAAA,AAAAQ;AAAA,AAAE,AAAA,AAAAA,AAAA;AAPF,AAACN,AACC,AAAAC,AAAKH;AAAL,AAAA,AAAAI,AAAAD;AAAA,AAAA9E,AAAA+E,AAAA,AAAA,AAAgBC;AAAhB,AAAAhF,AAAA+E,AAAA,AAAA,AAAmBE;AAAnB,AACE,AAAA,AAAA,AAAA,AAAA,AAAKN,AACcK,AACd,AAACrI,AAAM0C,AAAI,AAAA,AAAC6F,AAAcD,AACRD;AAP3B,AAAA,AAAYL,AACZ,AAAC3G,AAAK,AAAC4G,AACP;;;AAST;;;;;;AAAA,AAAMQ,AAKHC;AALH,AAME,AAAMA;AAAN,AACE,AAAAC,AAAkB,AAAA,AAACK,AAAsCN;AAAzD,AAAArF,AAAAsF,AAAA,AAAA,AAAOE;AAAP,AAAAxF,AAAAsF,AAAA,AAAA,AAASG;AAAT,AAAAzF,AAAAsF,AAAA,AAAA,AAAaI;AAAbH,AACmB,AAAA,AAACI,AAAyBN;AAD7C,AAAArF,AAAAuF,AAAA,AAAA,AACOC;AADP,AAAAxF,AAAAuF,AAAA,AAAA,AACSK;AADT,AAEE,AAAM,AAAA,AAAClD,AAAK,AAACvG,AAAYkJ;AAAzB,AACE,AACEI;AADF,AACO,AAACI,AAAQ,AAACC,AAAkBL,AAAMC;;AADzC,AAEEE;AAASP;;AAFX;;;;AADF;;;AAHJ;;;AAQF;;;;;AAAA,AAAMU,AAIHC;AAJH,AAKE,AAAM,AAAA,AAAM,AAAC3F,AAAM2F;AAAnB,AACE,AAAA,AAAOC;AACAC,AAASF;AADhB,AAEOG;;AAFP,AAGE,AAAI,AAAK,AAACvI,AAAOsI;AACf,AAAMG,AAAS,AAACtI,AAAMmI;AAAtBE,AACgB,AAAA,AAAI,AAACE,AAAYD,AAAMA,AAAMF,AAASE;AADtD,AAAArG,AAAAoG,AAAA,AAAA,AACOX;AADP,AAAAzF,AAAAoG,AAAA,AAAA,AACWV;AACLa,AAAS,AAAA,AAAC1J,AAAIoJ,AAAIR;AAClBe,AAAS,AAAA,AAAA,AAAI,AAAA,AAAA,AAAA,AAAC1I,AAAkB,AAAA,AAACqB,AAAYuG;AAC7Ce,AAAS,AAAK,AAACtK,AAAYuJ,AAAKc;AAChCE,AAAS,AAAA,AAAQ,AAAC9I,AAAO6I,AACd,AAACE,AAAKJ,AAASE,AACfF;AAPjB,AAQE,AAAO,AAAA,AAAChG,AAAM0F,AAAKR,AAAIiB;AAAU,AAACrI,AAAK6H;AAAQT;;;;;;AACjDQ;;;;;AAdN;;;AAiBF,AAAA,AAAMW,AACHC;AADH,AAEE,AAAChC,AACC,AAAKoB,AAAIZ;AAAT,AACE,AAAAzG,AAAgB,AAACwG,AAAoBC;AAArC,AAAA,AAAAzG;AAAA,AAAAA,AAASkI;AAAT,AACE,AAACH,AAAKV,AAAIa;;AACV,AAACC,AAAQ,AAAChB,AAAiBE;;AAJjC,AAKKY;;AAEP,AAAA,AAAMG,AACHH;AADH,AAYK,AAAO,AAAAI,AAAA;;AAEZ,AAAA,AAAMC,AACHL;AADH,AAEE,AAAKA,AAEA,AAAC/D,AAAW,AAACqE,AAAK/H,AAAI,AAAA,AAAC5B,AAAQmI,AAE/B,AAAA,AAAC9H,AACDuJ;;AAEP;;;;AAAA,AAAMC,AAGHR;AAHH,AAAA,AAIS,AAACP,AAAYO;AAJtB;AAAA,AAAA,AAAA,AAAAI,AAAA;;;AAAA,AAKS,AAACjL,AAAOsL,AAAQT;AALzB;AAAA,AAAA,AAAA,AAAAI,AAAA;;;AAME,AAEE,AAAA,AAACtB,AAAoB,AAAC5H,AAAM8I;AAC5B,AAACG,AAA4BH;;AAH/B,AAKE,AAAA,AAAClB,AAAsB,AAAC5H,AAAM8I;AAC9B,AAACD,AAA4BC;;AAN/B,AAQE,AAAA,AAAClB,AAAmB,AAAC5H,AAAM8I;AAC3B,AAACK,AAA2BL;;AAT9B;;;;;AAWF,AAAA,AAAKU,AACFnG,AACAtE,AACA0K,AACAC,AACAhF,AACAS,AACAwE,AACAC,AACAnH,AACAf,AACAmI,AACAC,AACAC,AACAC,AACAC,AACAC,AACApE,AACAK,AACAgE,AACA1J,AACA6F,AACA8D,AACAC,AACAC,AACAC,AACAC,AACAC,AACAnL,AACAoL,AACAnG,AACArD,AACAyJ,AACAC,AACApH","names",["markdown.transformers/heading?","text","type","cljs.core/every?","cljs.core.take","trimmed","clojure.string/trim","and__4115__auto__","cljs.core/not-empty","markdown.transformers/h1?","markdown.transformers/h2?","p__74349","map__74350","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","markdown.transformers/empty-line","code","codeblock","state","or__4126__auto__","clojure.string/blank?","cljs.core.dissoc","markdown.transformers/superscript","tokens","cljs.core.partition_by","cljs.core.partial","cljs.core/contains?","buf","remaining","cljs.core/empty?","clojure.string.join","cljs.core._EQ_","cljs.core/first","cljs.core.into","cljs.core.concat","cljs.core/seq","cljs.core/second","cljs.core.drop","cljs.core/rest","p__74358","map__74359","markdown.transformers/heading","next-line","heading-anchors","cljs.core.assoc","temp__5733__auto__","heading","markdown.common/make-heading","p__74367","map__74368","markdown.transformers/br","lists","cljs.core/take-last","cljs.core/not","cljs.core/str","cljs.core.drop_last","p__74371","map__74372","markdown.transformers/autourl-transformer","frozen-strings","currently-frozen","cljs.core/volatile!","p1__74370#","clojure.string/replace","vec__74374","cljs.core.nth","url","cljs.core/deref","markdown.common.freeze_string","cljs.core.subs","cljs.core/count","cljs.core/vreset!","cljs.core.merge","markdown.transformers/autoemail-transformer","left-pad","s","G__74378","encoder","c","markdown.transformers/*formatter*","p1__74377#","encoded","cljs.core.map","p__74381","map__74382","markdown.transformers/set-line-state","inline-heading","cljs.core/assoc-in","markdown.transformers/clear-line-state","markdown.transformers/paragraph-text","last-line-empty?","p__74386","map__74387","markdown.transformers/open-paragraph","eof","temp","hr","blockquote","paragraph","p__74392","map__74393","markdown.transformers/close-paragraph","G__74395","markdown.transformers/paragraph","p__74397","map__74399","markdown.transformers/code","cljs.core.not_EQ_","markdown.common/escape-code","clojure.string/replace-first","num-spaces","cljs.core.take_while","cljs.core/=","p__74404","map__74405","markdown.transformers/codeblock","codeblock-end","indented-code","next-line-closes?","G__74407","clojure.string.split","vec__74408","lang","cljs.core/split-with","cljs.core/not=","formatter","markdown.transformers/hr","cljs.core.drop_while","cljs.core.remove","p__74416","map__74417","markdown.transformers/blockquote-1","p__74421","map__74422","markdown.transformers/blockquote-2","blockquote-start","blockquote-end","blockquote-paragraph","not-in-list","markdown.transformers/footer","footnotes","cljs.core/sorted-map","cljs.core.reduce","p__74425","vec__74426","id","label","cljs.core.interpose","p1__74424#","markdown.transformers/parse-metadata-line","line","vec__74429","vec__74432","_","key","val","cljs.core/re-matches","next-val","cljs.core.keyword","clojure.string/lower-case","markdown.transformers/flatten-metadata","metadata","acc","remain","prev-key","vec__74441","data","cljs.core/sequential?","prev-val","postfix","norm-val","new-val","cljs.core.conj","markdown.transformers/parse-wiki-metadata-headers","lines-seq","parsed","cljs.core/reduced","markdown.transformers/parse-yaml-metadata-headers","js/Error","markdown.transformers/parse-edn-metadata-headers","cljs.core.comp","cljs.reader.read_string","markdown.transformers/parse-metadata-headers","cljs.core/string?","markdown.transformers/transformer-vector","markdown.common/inhibit","markdown.common/escape-inhibit-separator","markdown.common/escaped-chars","markdown.common/inline-code","markdown.links/image","markdown.links/image-reference-link","markdown.links/link","markdown.links/implicit-reference-link","markdown.links/reference-link","markdown.links/footnote-link","markdown.lists/li","markdown.common/italics","markdown.common/bold-italic","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.tables/table","markdown.common/thaw-strings","markdown.common/dashes"]],"~:used-vars",["^J",["~$markdown.transformers/flatten-metadata","~$clojure.string/replace-first","~$clojure.string/join","~$cljs.core/comp","~$cljs.core/rest","~$markdown.links/link","~$cljs.core/keyword","~$markdown.links/footnote-link","~$markdown.transformers/heading?","~$markdown.common/bold-italic","~$cljs.core/str","~$markdown.transformers/close-paragraph","~$cljs.core/sequential?","~$markdown.transformers/codeblock","~$markdown.transformers/h1?","~$markdown.transformers/hr","~$markdown.common/escaped-chars","~$clojure.string/split","~$clojure.string/blank?","~$markdown.transformers/autoemail-transformer","~$cljs.core/=","~$markdown.links/image","~$markdown.common/escape-code","~$cljs.core/re-matches","~$cljs.core/partial","~$cljs.core/take-while","~$markdown.transformers/clear-line-state","~$markdown.transformers/paragraph-text","~$cljs.core/drop-while","~$markdown.transformers/parse-metadata-line","~$markdown.common/bold","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/take","~$markdown.common/escape-inhibit-separator","~$cljs.core/vreset!","~$cljs.core/not=","~$cljs.core/string?","~$cljs.core/dissoc","~$cljs.core/concat","~$markdown.common/em","~$markdown.transformers/open-paragraph","~$cljs.core/empty?","~$markdown.common/strikethrough","~$cljs.core/into","~$markdown.transformers/parse-yaml-metadata-headers","~$cljs.core/conj","~$markdown.transformers/superscript","~$markdown.transformers/*formatter*","~$markdown.common/thaw-strings","~$markdown.common/dashes","~$markdown.transformers/blockquote-1","~$markdown.tables/table","~$markdown.common/inhibit","~$markdown.transformers/set-line-state","~$cljs.core/remove","~$cljs.core/drop-last","~$cljs.core/not-empty","~$markdown.links/image-reference-link","~$markdown.transformers/code","~$markdown.common/strong","~$markdown.transformers/transformer-vector","~$cljs.core/reduced","~$cljs.core/second","~$clojure.string/replace","~$markdown.common/italics","~$markdown.common/inline-code","~$clojure.string/lower-case","~$cljs.core/sorted-map","~$markdown.transformers/br","~$markdown.transformers/blockquote-2","~$cljs.core/not","~$markdown.transformers/parse-metadata-headers","~$cljs.core/assoc","~$cljs.core/interpose","~$markdown.links/implicit-reference-link","~$markdown.transformers/h2?","~$cljs.core/assoc-in","~$cljs.reader/read-string","~$clojure.string/trim","~$markdown.transformers/parse-wiki-metadata-headers","~$markdown.transformers/empty-line","~$markdown.transformers/footer","~$cljs.core/take-last","~$markdown.transformers/autourl-transformer","~$cljs.core/first","~$cljs.core/subs","~$cljs.core/merge","~$cljs.core/every?","~$markdown.transformers/heading","~$markdown.links/reference-link","~$js/Error","~$markdown.lists/li","~$markdown.transformers/parse-edn-metadata-headers","~$markdown.transformers/paragraph","~$cljs.core/drop"]]],"~:cache-keys",["~#cmap",[["^1T","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^1T","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^V","~$goog.string"]]],["^1T","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","~$goog.array","~$goog.asserts"]]],["^1T","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4G","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1T","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4H","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4K"]]],["^1T","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4H"]]],["^1T","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","markdown/transformers.cljc"],["c28b65ccc617b6c356403c4c3d9a9e0ca9bd4dd7","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^V","^X","^W","^T","^R","^Z"]]],["^1T","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4F","~$goog.string.StringBuffer"]]],["^1T","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q"]]],["^1T","markdown/common.cljc"],["c28b65ccc617b6c356403c4c3d9a9e0ca9bd4dd7","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^V"]]],["^1T","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^4S","^4T","^4U","^4R","^4G","^4F","^4W"]]],["^1T","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4H"]]],"~:SHADOW-TIMESTAMP",[1596134675000,1596134675000,1594142852000],["^1T","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4H","~$goog.reflect"]]],["^1T","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4H","~$goog.html.trustedtypes","^4N","^4O","^4P","^4Q"]]],["^1T","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4G","^4H","~$goog.html.SafeUrl","^4P","^4Q","^4K"]]],["^1T","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4H","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4[","^4M","~$goog.html.uncheckedconversions","^4P","^4K"]]],["^1T","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1T","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4G","^4H","~$goog.dom.TagName","~$goog.dom.tags","^53","^54","~$goog.html.SafeStyleSheet","^4[","^4M","^4Z","^4N","^4O","~$goog.labs.userAgent.browser","^4J","^4P","^4Q","^4K"]]],["^1T","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4J"]]],["^1T","cljs/reader.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^4J","^4V","~$cljs.tools.reader.edn","^4W"]]],["^1T","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1T","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4G","^4H","^4F","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1T","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","markdown/tables.cljc"],["c28b65ccc617b6c356403c4c3d9a9e0ca9bd4dd7","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^V"]]],["^1T","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",[]]],["^1T","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4G","^4J"]]],["^1T","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^4S","^V","~$cljs.tools.reader.impl.inspect"]]],["^1T","markdown/lists.cljc"],["c28b65ccc617b6c356403c4c3d9a9e0ca9bd4dd7","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^V","^Z"]]],["^1T","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^4F","^4W"]]],["^1T","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","~$goog.dom.safe","^55","^4P","^4K"]]],["^1T","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4K"]]],["^1T","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^4T","^4F","^4W"]]],["^1T","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4G","^4H","^51","~$goog.math"]]],["^1T","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4H","^52","^53","^54","^5:","^4[","^4M","^4P","^4K"]]],["^1T","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^4R","^4S","^4T"]]],["^1T","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S"]]],["^1T","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","~$goog.math.Long","~$goog.math.Integer","^4F","^4J","^4G","~$goog.Uri","^4W"]]],["^1T","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4H","^4Z","^4P","^4Q"]]],["^1T","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4G","^4H","^54","^4J","^4P","^4Q","^4K"]]],["^1T","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4Y"]]],["^1T","markdown/links.cljc"],["c28b65ccc617b6c356403c4c3d9a9e0ca9bd4dd7","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^Q","^V","^Z"]]],["^1T","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4G","^4H","^4F"]]],["^1T","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4A",["^ ","^4B",null,"^4C",["^J",[]],"^4D",["^S","^4H","^4Q"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/reader.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1594134806000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1594142858000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/transformers.cljc","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S","^T","^T","^U","^V","^W","^W","^V","^V","^X","^X","^Y","^X","^Z","^Z"],"^[",["^J",["^10"]],"~:shadow/js-access-global",["^J",["Error"]],"^11",["^ ","^12","^Z","^13","^Z","^14","^Z","^15","^Z","^16","^Z","^17","^Z","^18","^W","^19","^Z","^1:","^Z","^1;","^W","^1<","^Z","^1=","^R","^1>","^Z","^1?","^T","^1@","^W","^1A","^W","^1B","^Z","^1C","^Z","^1D","^Z","^1E","^Z","^1F","^Z","^1G","^W","^1H","^Z","^1I","^W"],"~:defs",["^ ","~$parse-wiki-metadata-headers",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",340,"^8",7,"^9",340,"^:",34,"~:arglists",["^1L",["~$quote",["^1L",[["~$lines-seq"]]]]]],"^K","^3[","^6","markdown/transformers.cljc","^:",34,"~:method-params",["^1L",[["^6A"]]],"~:protocol-impl",null,"~:arglists-meta",["^1L",[null,null]],"^8",1,"~:variadic?",false,"^7",340,"~:ret-tag",["^J",[null,"~$any"]],"^9",340,"~:max-fixed-arity",1,"~:fn-var",true,"^6?",["^1L",["^6@",["^1L",[["^6A"]]]]]],"~$h2?",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",44,"^8",7,"^9",44,"^:",10,"^6?",["^1L",["^6@",["^1L",[["~$text"]]]]]],"^K","^3W","^6","markdown/transformers.cljc","^:",10,"^6B",["^1L",[["^6K"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",44,"^6F",["^J",[null,"~$boolean","~$clj-nil"]],"^9",44,"^6H",1,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K"]]]]]],"~$*formatter*",["^ ","^5",["^ ","^6","markdown/transformers.cljc","^7",34,"^8",20,"^9",34,"^:",31,"~:dynamic",true,"~:declared",true],"^K","^3;","^6","markdown/transformers.cljc","^:",31,"^8",1,"^6O",true,"^7",34,"^6P",true,"^9",34,"~:tag","^6G"],"~$parse-yaml-metadata-headers",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",349,"^8",7,"^9",349,"^:",34,"^6?",["^1L",["^6@",["^1L",[["^6A"]]]]]],"^K","^38","^6","markdown/transformers.cljc","^:",34,"^6B",["^1L",[["^6A"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",349,"^6F","~$ignore","^9",349,"^6H",1,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6A"]]]]]],"~$paragraph",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",162,"^8",7,"^9",162,"^:",16,"^6?",["^1L",["^6@",["^1L",[["^6K","~$state"]]]]]],"^K","^4=","^6","markdown/transformers.cljc","^:",16,"^6B",["^1L",[["^6K","^6U"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",162,"^6F","^6G","^9",162,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K","^6U"]]]]]],"~$close-paragraph",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",157,"^8",7,"^9",157,"^:",22,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","~:keys",["~$next-line","^6T"],"^1N","^6U"]]]]]]],"^K","^2?","^6","markdown/transformers.cljc","^:",22,"^6B",["^1L",[["^6K","~$p__74392"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",157,"^6F","~$cljs.core/IVector","^9",157,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^6X","^6T"],"^1N","^6U"]]]]]]],"~$blockquote-1",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",241,"^8",7,"^9",241,"^:",19,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["~$eof","~$code","~$codeblock","~$lists"],"^1N","^6U"]]]]]],"~:doc","Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."],"^K","^3>","^6","markdown/transformers.cljc","^:",19,"^6B",["^1L",[["^6K","~$p__74416"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",241,"^6F","^6Z","^9",241,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^70","^71","^72","^73"],"^1N","^6U"]]]]]],"^74","Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."],"~$heading",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",70,"^8",7,"^9",70,"^:",14,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["~$buf","^6X","^71","^72","~$heading-anchors"],"^1N","^6U"]]]]]]],"^K","^48","^6","markdown/transformers.cljc","^:",14,"^6B",["^1L",[["^6K","~$p__74358"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",70,"^6F","^6Z","^9",70,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^77","^6X","^71","^72","^78"],"^1N","^6U"]]]]]]],"~$superscript",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",53,"^8",7,"^9",53,"^:",18,"^6?",["^1L",["^6@",["^1L",[["^6K","^6U"]]]]]],"^K","^3:","^6","markdown/transformers.cljc","^:",18,"^6B",["^1L",[["^6K","^6U"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",53,"^6F","^6Z","^9",53,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K","^6U"]]]]]],"~$autourl-transformer",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",93,"^8",7,"^9",93,"^:",26,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^71","~$frozen-strings"],"^1N","^6U"]]]]]]],"^K","^43","^6","markdown/transformers.cljc","^:",26,"^6B",["^1L",[["^6K","~$p__74371"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",93,"^6F","^6Z","^9",93,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^71","^7<"],"^1N","^6U"]]]]]]],"~$h1?",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",41,"^8",7,"^9",41,"^:",10,"^6?",["^1L",["^6@",["^1L",[["^6K"]]]]]],"^K","^2B","^6","markdown/transformers.cljc","^:",10,"^6B",["^1L",[["^6K"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",41,"^6F",["^J",[null,"^6L","^6M"]],"^9",41,"^6H",1,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K"]]]]]],"^72",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",188,"^8",7,"^9",188,"^:",16,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^72","~$codeblock-end","~$indented-code","^6X","^73"],"^1N","^6U"]]]]]]],"^K","^2A","^6","markdown/transformers.cljc","^:",16,"^6B",["^1L",[["^6K","~$p__74404"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",188,"^6F","^6Z","^9",188,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^72","^7?","^7@","^6X","^73"],"^1N","^6U"]]]]]]],"~$flatten-metadata",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",318,"^8",7,"^9",318,"^:",23,"^6?",["^1L",["^6@",["^1L",[["~$metadata"]]]]],"^74","Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."],"^K","^24","^6","markdown/transformers.cljc","^:",23,"^6B",["^1L",[["^7C"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",318,"^6F",["^J",["^6G","^6M"]],"^9",318,"^6H",1,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^7C"]]]]],"^74","Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."],"~$hr",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",230,"^8",7,"^9",230,"^:",9,"^6?",["^1L",["^6@",["^1L",[["^6K","^6U"]]]]]],"^K","^2C","^6","markdown/transformers.cljc","^:",9,"^6B",["^1L",[["^6K","^6U"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",230,"^6F","^6Z","^9",230,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K","^6U"]]]]]],"~$transformer-vector",["^ ","^K","^3H","^6","markdown/transformers.cljc","^7",389,"^8",1,"^9",389,"^:",24,"^5",["^ ","^6","markdown/transformers.cljc","^7",389,"^8",6,"^9",389,"^:",24],"^6Q","^6Z"],"~$autoemail-transformer",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",105,"^8",7,"^9",105,"^:",28,"^6?",["^1L",["^6@",["^1L",[["^6K","^6U"]]]]]],"^K","^2G","^6","markdown/transformers.cljc","^:",28,"^6B",["^1L",[["^6K","^6U"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",105,"^6F","^6Z","^9",105,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K","^6U"]]]]]],"~$parse-metadata-line",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",304,"^8",7,"^9",304,"^:",26,"^6?",["^1L",["^6@",["^1L",[["~$line"]]]]],"^74","Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."],"^K","^2Q","^6","markdown/transformers.cljc","^:",26,"^6B",["^1L",[["^7H"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",304,"^6F",["^J",[null,"^6Z","^6M"]],"^9",304,"^6H",1,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^7H"]]]]],"^74","Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."],"~$blockquote-2",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",273,"^8",7,"^9",273,"^:",19,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["~$blockquote-start","~$blockquote-end","~$blockquote-paragraph","^73"],"^1N","^6U"]]]]]],"^74","Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."],"^K","^3Q","^6","markdown/transformers.cljc","^:",19,"^6B",["^1L",[["^6K","~$p__74421"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",273,"^6F","^6Z","^9",273,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^7J","^7K","^7L","^73"],"^1N","^6U"]]]]]],"^74","Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."],"~$empty-line",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",47,"^8",7,"^9",47,"^:",17,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^71","^72"],"^1N","^6U"]]]]]]],"^K","^40","^6","markdown/transformers.cljc","^:",17,"^6B",["^1L",[["^6K","~$p__74349"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",47,"^6F","^6Z","^9",47,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^71","^72"],"^1N","^6U"]]]]]]],"~$open-paragraph",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",137,"^8",7,"^9",137,"^:",21,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^70","^76","~$inline-heading","~$temp","^7D","^71","^73","~$blockquote","^6T","~$last-line-empty?"],"^1N","^6U"]]]]]]],"^K","^34","^6","markdown/transformers.cljc","^:",21,"^6B",["^1L",[["^6K","~$p__74386"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",137,"^6F","^6Z","^9",137,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^70","^76","^7Q","^7R","^7D","^71","^73","^7S","^6T","^7T"],"^1N","^6U"]]]]]]],"~$footer",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",290,"^8",7,"^9",290,"^:",13,"^6?",["^1L",["^6@",["^1L",[["~$footnotes"]]]]]],"^K","^41","^6","markdown/transformers.cljc","^:",13,"^6B",["^1L",[["^7W"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",290,"^6F","^U","^9",290,"^6H",1,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^7W"]]]]]],"~$parse-edn-metadata-headers",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",363,"^8",7,"^9",363,"^:",33,"^6?",["^1L",["^6@",["^1L",[["^6A"]]]]]],"^K","^4<","^6","markdown/transformers.cljc","^:",33,"^6B",["^1L",[["^6A"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",363,"^6F",["^J",["^6G","^6M"]],"^9",363,"^6H",1,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6A"]]]]]],"~$heading?",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",36,"^8",7,"^9",36,"^:",15,"^6?",["^1L",["^6@",["^1L",[["^6K","~$type"]]]]]],"^K","^2<","^6","markdown/transformers.cljc","^:",15,"^6B",["^1L",[["^6K","^7Z"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",36,"^6F",["^J",[null,"^6L","^6M"]],"^9",36,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K","^7Z"]]]]]],"~$set-line-state",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",123,"^8",7,"^9",123,"^:",21,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^7Q"],"^1N","^6U"]]]]]]],"^K","^3A","^6","markdown/transformers.cljc","^:",21,"^6B",["^1L",[["^6K","~$p__74381"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",123,"^6F","^6Z","^9",123,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^7Q"],"^1N","^6U"]]]]]]],"~$clear-line-state",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",129,"^8",7,"^9",129,"^:",23,"^6?",["^1L",["^6@",["^1L",[["^6K","^6U"]]]]]],"^K","^2N","^6","markdown/transformers.cljc","^:",23,"^6B",["^1L",[["^6K","^6U"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",129,"^6F","^6Z","^9",129,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K","^6U"]]]]]],"^71",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",165,"^8",7,"^9",165,"^:",11,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^70","^73","^71","^72","^6T"],"^1N","^6U"]]]]]]],"^K","^3F","^6","markdown/transformers.cljc","^:",11,"^6B",["^1L",[["^6K","~$p__74397"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",165,"^6F","^6Z","^9",165,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^70","^73","^71","^72","^6T"],"^1N","^6U"]]]]]]],"~$parse-metadata-headers",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",372,"^8",7,"^9",372,"^:",29,"^6?",["^1L",["^6@",["^1L",[["^6A"]]]]],"^74","Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats."],"^K","^3S","^6","markdown/transformers.cljc","^:",29,"^6B",["^1L",[["^6A"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",372,"^6F",["^J",[null,"^6G","^6M"]],"^9",372,"^6H",1,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6A"]]]]],"^74","Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists. Accepts wiki, yaml, and edn formats."],"~$br",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",86,"^8",7,"^9",86,"^:",9,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^71","^73"],"^1N","^6U"]]]]]]],"^K","^3P","^6","markdown/transformers.cljc","^:",9,"^6B",["^1L",[["^6K","~$p__74367"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",86,"^6F","^6Z","^9",86,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^6K",["^ ","^6W",["^71","^73"],"^1N","^6U"]]]]]]],"~$paragraph-text",["^ ","^6>",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",132,"^8",7,"^9",132,"^:",21,"^6?",["^1L",["^6@",["^1L",[["^7T","^6K"]]]]]],"^K","^2O","^6","markdown/transformers.cljc","^:",21,"^6B",["^1L",[["^7T","^6K"]]],"^6C",null,"^6D",["^1L",[null,null]],"^8",1,"^6E",false,"^7",132,"^6F",["^J",[null,"^U"]],"^9",132,"^6H",2,"^6I",true,"^6?",["^1L",["^6@",["^1L",[["^7T","^6K"]]]]]]],"^1J",["^ ","^Q","^Q","^X","^X","^Y","^X"],"~:cljs.analyzer/constants",["^ ","^[",["^J",["~:next-line","~:codeblock","~:indented-code","~:blockquote-paragraph","~:hr","~:temp","~:lists","~:buf","~:blockquote-end","~:clojurescript","~:inline-heading","~:else","~:last-line-empty?","~:default","~:frozen-strings","~:code-style","~:codeblock-end","~:skip-next-line?","~:code","~:blockquote-start","~:processed","~:heading-anchors","~:eof","~:paragraph","~:blockquote","~:heading"]],"~:order",["^8J","^89","^8<","^8Q","^8E","^8?","^88","^8M","^8C","^8B","^8>","^8F","^8A","^8=","^8N","^8O","^8P","^8D","^8:","^8H","^8I","^8G","^8@","^8;","^8K","^8L"]],"^1P",["^ ","^10",["^J",[]]],"^1Q",["^ "],"^1R",["^S","^Q","^V","^X","^W","^T","^R","^Z"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^4@",[["^8U","~:static-fns"],true,["^8U","~:shadow-tweaks"],null,["^8U","~:source-map-inline"],null,["^8U","~:elide-asserts"],false,["^8U","~:optimize-constants"],null,["^8U","^1W"],null,["^8U","~:external-config"],null,["^8U","~:tooling-config"],null,["^8U","~:emit-constants"],null,["^8U","~:load-tests"],null,["^8U","~:form-size-threshold"],null,["^8U","~:data-readers"],null,["^8U","~:infer-externs"],"~:auto",["^8U","^1Y"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8U","~:fn-invoke-direct"],null,["^8U","~:source-map"],"/dev/null"]]]