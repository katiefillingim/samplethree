["^ ","~:output",["^ ","~:js","goog.provide('markdown.common');\r\nmarkdown.common._STAR_inhibit_separator_STAR_ = null;\r\nmarkdown.common.escape_delimiter = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$((254))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$((491)))].join('');\r\nmarkdown.common.gen_token = (function markdown$common$gen_token(n){\r\nreturn [markdown.common.escape_delimiter,cljs.core.str.cljs$core$IFn$_invoke$arity$1(n),markdown.common.escape_delimiter].join('');\r\n});\r\n/**\r\n * Freezes an output string.  Converts to a placeholder token and puts that into the output.\r\n *   Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\r\n *   So that it can be unfrozen later.\r\n */\r\nmarkdown.common.freeze_string = (function markdown$common$freeze_string(var_args){\r\nvar args__4742__auto__ = [];\r\nvar len__4736__auto___74136 = arguments.length;\r\nvar i__4737__auto___74137 = (0);\r\nwhile(true){\r\nif((i__4737__auto___74137 < len__4736__auto___74136)){\r\nargs__4742__auto__.push((arguments[i__4737__auto___74137]));\r\n\r\nvar G__74142 = (i__4737__auto___74137 + (1));\r\ni__4737__auto___74137 = G__74142;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\r\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\r\n});\r\n\r\n(markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar state = cljs.core.last(args);\r\nvar token = markdown.common.gen_token(cljs.core.count(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state)));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token,cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),token], null),cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.flatten(cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(args))))], null);\r\n}));\r\n\r\n(markdown.common.freeze_string.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(markdown.common.freeze_string.cljs$lang$applyTo = (function (seq74090){\r\nvar self__4724__auto__ = this;\r\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq74090));\r\n}));\r\n\r\n/**\r\n * Recursively replaces the frozen strings in the output with the original text.\r\n */\r\nmarkdown.common.thaw_string = (function markdown$common$thaw_string(text,state){\r\nwhile(true){\r\nvar temp__5733__auto__ = cljs.core.re_seq(cljs.core.re_pattern([markdown.common.escape_delimiter,\"\\\\d+\",markdown.common.escape_delimiter].join('')),text);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar matches = temp__5733__auto__;\r\nvar G__74153 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (text,state,matches,temp__5733__auto__){\r\nreturn (function (s,r){\r\nreturn clojure.string.replace(s,cljs.core.re_pattern(r),((function (text,state,matches,temp__5733__auto__){\r\nreturn (function (p1__74091_SHARP_){\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state),p1__74091_SHARP_,p1__74091_SHARP_);\r\n});})(text,state,matches,temp__5733__auto__))\r\n);\r\n});})(text,state,matches,temp__5733__auto__))\r\n,text,matches);\r\nvar G__74154 = cljs.core.update.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),((function (text,state,matches,temp__5733__auto__){\r\nreturn (function (p1__74092_SHARP_){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,p1__74092_SHARP_,matches);\r\n});})(text,state,matches,temp__5733__auto__))\r\n);\r\ntext = G__74153;\r\nstate = G__74154;\r\ncontinue;\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Terminally encoded strings are ones that we've determined should no longer be processed or evaluated\r\n */\r\nmarkdown.common.thaw_strings = (function markdown$common$thaw_strings(text,state){\r\nif((!(cljs.core.empty_QMARK_(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state))))){\r\nreturn markdown.common.thaw_string(text,state);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n});\r\nmarkdown.common.escape_code = (function markdown$common$escape_code(s){\r\nreturn clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(s,/&/,\"&amp;\"),/\\*/,\"&#42;\"),/\\^/,\"&#94;\"),/\\_/,\"&#95;\"),/\\~/,\"&#126;\"),/\\</,\"&lt;\"),/\\>/,\"&gt;\"),/\\[/,\"&#91;\"),/\\]/,\"&#93;\"),/\\(/,\"&#40;\"),/\\)/,\"&#41;\"),/\\\"/,\"&quot;\");\r\n});\r\nmarkdown.common.escaped_chars = (function markdown$common$escaped_chars(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\r\n}\r\n})())?text:clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(text,/\\\\\\\\/,\"&#92;\"),/\\\\`/,\"&#8216;\"),/\\\\\\*/,\"&#42;\"),/\\\\_/,\"&#95;\"),/\\\\\\{/,\"&#123;\"),/\\\\\\}/,\"&#125;\"),/\\\\\\[/,\"&#91;\"),/\\\\\\]/,\"&#93;\"),/\\\\\\(/,\"&#40;\"),/\\\\\\)/,\"&#41;\"),/\\\\#/,\"&#35;\"),/\\\\\\+/,\"&#43;\"),/\\\\-/,\"&#45;\"),/\\\\\\./,\"&#46;\"),/\\\\!/,\"&#33;\"),/\\\\\\^/,\"&#94;\")),state], null);\r\n});\r\nmarkdown.common.open_html_tags = (function markdown$common$open_html_tags(open_QMARK_,token_seq){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"open\",\"open\",-1763596448),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (state,token){\r\nvar G__74095 = token;\r\nswitch (G__74095) {\r\ncase \"<\":\r\nreturn new cljs.core.Keyword(null,\"open\",\"open\",-1763596448);\r\n\r\nbreak;\r\ncase \">\":\r\nreturn new cljs.core.Keyword(null,\"closed\",\"closed\",-919675359);\r\n\r\nbreak;\r\ndefault:\r\nreturn state;\r\n\r\n}\r\n}),(cljs.core.truth_(open_QMARK_)?new cljs.core.Keyword(null,\"open\",\"open\",-1763596448):new cljs.core.Keyword(null,\"closed\",\"closed\",-919675359)),token_seq));\r\n});\r\n/**\r\n * Return a transformer to\r\n * - find all the chunks of the string delimited by the `separator',\r\n * - wrap the output with the `open' and `close' markers, and\r\n * - apply the `transformer' to the text inside the chunk.\r\n */\r\nmarkdown.common.make_separator = (function markdown$common$make_separator(var_args){\r\nvar G__74099 = arguments.length;\r\nswitch (G__74099) {\r\ncase 3:\r\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 4:\r\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3 = (function (separator,open,close){\r\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(separator,open,close,cljs.core.identity);\r\n}));\r\n\r\n(markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4 = (function (separator,open,close,transformer){\r\nvar separator__$1 = cljs.core.seq(separator);\r\nreturn (function (text,state){\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n} else {\r\nvar out = cljs.core.PersistentVector.EMPTY;\r\nvar buf = cljs.core.PersistentVector.EMPTY;\r\nvar tokens = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,cljs.core.first(separator__$1)),cljs.core.seq(text));\r\nvar cur_state = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),false,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911),false], 0));\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(tokens)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.into.cljs$core$IFn$_invoke$arity$2((cljs.core.truth_(new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576).cljs$core$IFn$_invoke$arity$1(cur_state))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(out,separator__$1):out),buf)),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cur_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576))], null);\r\n} else {\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576).cljs$core$IFn$_invoke$arity$1(cur_state))){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(tokens),separator__$1)){\r\nvar vec__74110 = (((transformer === cljs.core.identity))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [buf,cur_state], null):(function (){var vec__74113 = (function (){var G__74116 = clojure.string.join.cljs$core$IFn$_invoke$arity$1(buf);\r\nvar G__74117 = cur_state;\r\nreturn (transformer.cljs$core$IFn$_invoke$arity$2 ? transformer.cljs$core$IFn$_invoke$arity$2(G__74116,G__74117) : transformer.call(null,G__74116,G__74117));\r\n})();\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74113,(0),null);\r\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74113,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq(s),new_state], null);\r\n})());\r\nvar new_buf = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74110,(0),null);\r\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__74110,(1),null);\r\nvar G__74242 = cljs.core.vec(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.seq(open),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new_buf,cljs.core.seq(close)], 0)));\r\nvar G__74243 = cljs.core.PersistentVector.EMPTY;\r\nvar G__74244 = cljs.core.rest(tokens);\r\nvar G__74245 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),false);\r\nout = G__74242;\r\nbuf = G__74243;\r\ntokens = G__74244;\r\ncur_state = G__74245;\r\ncontinue;\r\n} else {\r\nvar G__74246 = out;\r\nvar G__74247 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.first(tokens));\r\nvar G__74248 = cljs.core.rest(tokens);\r\nvar G__74249 = cur_state;\r\nout = G__74246;\r\nbuf = G__74247;\r\ntokens = G__74248;\r\ncur_state = G__74249;\r\ncontinue;\r\n}\r\n} else {\r\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(tokens),separator__$1)) && (cljs.core.not(new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911).cljs$core$IFn$_invoke$arity$1(cur_state))))){\r\nvar G__74256 = out;\r\nvar G__74257 = buf;\r\nvar G__74258 = cljs.core.rest(tokens);\r\nvar G__74259 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cur_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),true);\r\nout = G__74256;\r\nbuf = G__74257;\r\ntokens = G__74258;\r\ncur_state = G__74259;\r\ncontinue;\r\n} else {\r\nvar G__74260 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(tokens));\r\nvar G__74261 = buf;\r\nvar G__74262 = cljs.core.rest(tokens);\r\nvar G__74263 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cur_state,new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911),markdown.common.open_html_tags(new cljs.core.Keyword(null,\"in-tag?\",\"in-tag?\",1693672911).cljs$core$IFn$_invoke$arity$1(cur_state),cljs.core.first(tokens)));\r\nout = G__74260;\r\nbuf = G__74261;\r\ntokens = G__74262;\r\ncur_state = G__74263;\r\ncontinue;\r\n\r\n}\r\n}\r\n}\r\nbreak;\r\n}\r\n}\r\n});\r\n}));\r\n\r\n(markdown.common.make_separator.cljs$lang$maxFixedArity = 4);\r\n\r\nmarkdown.common.escape_code_transformer = (function markdown$common$escape_code_transformer(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.common.escape_code(text),state], null);\r\n});\r\nmarkdown.common.separator = (function markdown$common$separator(escape_QMARK_,text,open,close,separator,state){\r\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(separator,open,close,(cljs.core.truth_(escape_QMARK_)?markdown.common.escape_code_transformer:cljs.core.identity))(text,state);\r\n});\r\nmarkdown.common.strong = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"**\",\"<strong>\",\"</strong>\");\r\nmarkdown.common.bold_italic = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"***\",\"<b><i>\",\"</i></b>\");\r\nmarkdown.common.bold = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"__\",\"<b>\",\"</b>\");\r\nmarkdown.common.em = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"*\",\"<em>\",\"</em>\");\r\nmarkdown.common.italics = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"_\",\"<i>\",\"</i>\");\r\nmarkdown.common.strikethrough = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"~~\",\"<del>\",\"</del>\");\r\nmarkdown.common.inline_code = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(\"`\",\"<code>\",\"</code>\",markdown.common.escape_code_transformer);\r\nmarkdown.common.inhibit = (function markdown$common$inhibit(text,state){\r\nif(cljs.core.truth_(markdown.common._STAR_inhibit_separator_STAR_)){\r\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(markdown.common._STAR_inhibit_separator_STAR_,\"\",\"\",markdown.common.freeze_string)(text,state);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\r\n}\r\n});\r\nmarkdown.common.escape_inhibit_separator = (function markdown$common$escape_inhibit_separator(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_(markdown.common._STAR_inhibit_separator_STAR_)?clojure.string.replace(text,clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(markdown.common._STAR_inhibit_separator_STAR_,markdown.common._STAR_inhibit_separator_STAR_)),clojure.string.join.cljs$core$IFn$_invoke$arity$1(markdown.common._STAR_inhibit_separator_STAR_)):text),state], null);\r\n});\r\nmarkdown.common.heading_text = (function markdown$common$heading_text(text){\r\nreturn clojure.string.trim(clojure.string.replace(clojure.string.replace(text,/^([ ]+)?[#]+/,\"\"),/[#]+$/,\"\"));\r\n});\r\nmarkdown.common.heading_level = (function markdown$common$heading_level(text){\r\nvar num_hashes = cljs.core.count(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__74124_SHARP_){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\" \",p1__74124_SHARP_);\r\n}),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__74125_SHARP_){\r\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"#\",p1__74125_SHARP_)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\" \",p1__74125_SHARP_)));\r\n}),cljs.core.seq(text))));\r\nif((num_hashes > (0))){\r\nreturn num_hashes;\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.common.make_heading = (function markdown$common$make_heading(text,heading_anchors){\r\nvar temp__5735__auto__ = markdown.common.heading_level(text);\r\nif(cljs.core.truth_(temp__5735__auto__)){\r\nvar heading = temp__5735__auto__;\r\nvar text__$1 = markdown.common.heading_text(text);\r\nreturn [\"<h\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(heading),(cljs.core.truth_(heading_anchors)?[\" id=\\\"\",clojure.string.replace(clojure.string.lower_case(text__$1),\" \",\"&#95;\"),\"\\\"\"].join(''):null),\">\",text__$1,\"</h\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(heading),\">\"].join('');\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nmarkdown.common.dashes = (function markdown$common$dashes(text,state){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\r\n}\r\n})())?text:clojure.string.replace(clojure.string.replace(clojure.string.replace(text,/\\-\\-\\-/,\"&mdash;\"),/\\-\\-/,\"&ndash;\"),/<code>.*<\\/code>/,(function (s){\r\nreturn clojure.string.replace(clojure.string.replace(s,/&mdash;/,\"---\"),/&ndash;/,\"--\");\r\n}))),state], null);\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/common.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.common","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^Q","~$string","^Q","~$cljs.core","^S","~$goog","^T"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^L",["^Z",["^V",["^Q","~:as","^R"]]]]],"~:flags",["^ ","^V",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^Q"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","markdown/common.cljc"],"~:compiled-at",1597165958919,"~:resource-name","markdown/common.cljc","~:warnings",[],"~:source","(ns markdown.common\n  (:require [clojure.string :as string]))\n\n(declare ^{:dynamic true} *substring*)\n\n(def ^:dynamic *inhibit-separator* nil)\n\n(def escape-delimiter (str (char 254) (char 491)))\n\n(defn gen-token [n]\n  (str escape-delimiter n escape-delimiter))\n\n(defn freeze-string\n  \"Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.\"\n  [& args]\n  (let [state (last args)\n        token (gen-token (count (:frozen-strings state)))]\n    [token (assoc-in state\n                     [:frozen-strings token]\n                     (reduce str (flatten (drop-last args))))]))\n\n(defn thaw-string\n  \"Recursively replaces the frozen strings in the output with the original text.\"\n  [text state]\n  (if-let [matches (re-seq (re-pattern (str escape-delimiter \"\\\\d+\" escape-delimiter)) text)]\n    (recur\n      (reduce\n        (fn [s r]\n          (string/replace s (re-pattern r) #(get (:frozen-strings state) % %)))\n        text matches)\n      (update state :frozen-strings #(apply dissoc % matches)))\n    [text state]))\n\n(defn thaw-strings\n  \"Terminally encoded strings are ones that we've determined should no longer be processed or evaluated\"\n  [text state]\n  (if-not (empty? (:frozen-strings state))\n    (thaw-string text state)\n    [text state]))\n\n(defn escape-code [s]\n  (-> s\n      (string/replace #\"&\" \"&amp;\")\n      (string/replace #\"\\*\" \"&#42;\")\n      (string/replace #\"\\^\" \"&#94;\")\n      (string/replace #\"\\_\" \"&#95;\")\n      (string/replace #\"\\~\" \"&#126;\")\n      (string/replace #\"\\<\" \"&lt;\")\n      (string/replace #\"\\>\" \"&gt;\")\n      ;(string/replace #\"\\/\" \"&frasl;\") ;screws up ClojureScript compiling\n      (string/replace #\"\\[\" \"&#91;\")\n      (string/replace #\"\\]\" \"&#93;\")\n      (string/replace #\"\\(\" \"&#40;\")\n      (string/replace #\"\\)\" \"&#41;\")\n      (string/replace #\"\\\"\" \"&quot;\")))\n\n(defn escaped-chars [text state]\n  [(if (or (:code state) (:codeblock state))\n     text\n     (-> text\n         (string/replace #\"\\\\\\\\\" \"&#92;\")\n         (string/replace #\"\\\\`\" \"&#8216;\")\n         (string/replace #\"\\\\\\*\" \"&#42;\")\n         (string/replace #\"\\\\_\" \"&#95;\")\n         (string/replace #\"\\\\\\{\" \"&#123;\")\n         (string/replace #\"\\\\\\}\" \"&#125;\")\n         (string/replace #\"\\\\\\[\" \"&#91;\")\n         (string/replace #\"\\\\\\]\" \"&#93;\")\n         (string/replace #\"\\\\\\(\" \"&#40;\")\n         (string/replace #\"\\\\\\)\" \"&#41;\")\n         (string/replace #\"\\\\#\" \"&#35;\")\n         (string/replace #\"\\\\\\+\" \"&#43;\")\n         (string/replace #\"\\\\-\" \"&#45;\")\n         (string/replace #\"\\\\\\.\" \"&#46;\")\n         (string/replace #\"\\\\!\" \"&#33;\")\n         (string/replace #\"\\\\\\^\" \"&#94;\")))\n   state])\n\n(defn open-html-tags [open? token-seq]\n  (= :open (reduce (fn [state token]\n                     (case token\n                       \\< :open\n                       \\> :closed\n                       state))\n                   (if open? :open :closed)\n                   token-seq)))\n\n(defn make-separator\n  \"Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk.\"\n  ([separator open close]\n   (make-separator separator open close identity))\n  ([separator open close transformer]\n   (let [separator (seq separator)]  ;; allow char seq or string\n     (fn [text state]\n       (if (:code state)\n         [text state]\n         (loop [out       []\n                buf       []\n                tokens    (partition-by (partial = (first separator)) (seq text))\n                cur-state (assoc state :found-token false :in-tag? false)]\n           (cond\n             (empty? tokens)\n             [(string/join (into (if (:found-token cur-state) (into out separator) out) buf))\n              (dissoc cur-state :found-token)]\n\n             (:found-token cur-state)\n             (if (= (first tokens) separator)\n               (let [[new-buf new-state]\n                     (if (identical? transformer identity)\n                       ;; Skip the buf->string->buf conversions in the common\n                       ;; case.\n                       [buf cur-state]\n                       (let [[s new-state] (transformer (string/join buf) cur-state)]\n                         [(seq s) new-state]))]\n                 (recur (vec (concat out (seq open) new-buf (seq close)))\n                        []\n                        (rest tokens)\n                        (assoc new-state :found-token false)))\n               (recur out\n                      (into buf (first tokens))\n                      (rest tokens)\n                      cur-state))\n\n             (and (= (first tokens) separator) (not (:in-tag? cur-state)))\n             (recur out buf (rest tokens) (assoc cur-state :found-token true))\n\n             :default\n             (recur (into out (first tokens)) buf (rest tokens) (assoc cur-state :in-tag? (open-html-tags (:in-tag? cur-state) (first tokens)))))))))))\n\n(defn escape-code-transformer [text state]\n  [(escape-code text) state])\n\n;; Not used any more internally; kept around just in case third party code\n;; depends on this.\n(defn separator [escape? text open close separator state]\n  ((make-separator separator open close (if escape? escape-code-transformer identity))\n   text state))\n\n(def strong (make-separator \"**\" \"<strong>\" \"</strong>\"))\n\n(def bold-italic (make-separator \"***\" \"<b><i>\" \"</i></b>\"))\n\n(def bold (make-separator \"__\" \"<b>\" \"</b>\"))\n\n(def em (make-separator \"*\" \"<em>\" \"</em>\"))\n\n(def italics (make-separator \"_\" \"<i>\" \"</i>\"))\n\n(def strikethrough (make-separator \"~~\" \"<del>\" \"</del>\"))\n\n(def inline-code (make-separator \"`\" \"<code>\" \"</code>\" escape-code-transformer))\n\n(defn inhibit [text state]\n  (if *inhibit-separator*\n    ((make-separator *inhibit-separator* \"\" \"\" freeze-string)\n     text state)\n    [text state]))\n\n(defn escape-inhibit-separator [text state]\n  [(if *inhibit-separator*\n     (string/replace text\n                     (string/join (concat *inhibit-separator* *inhibit-separator*))\n                     (string/join *inhibit-separator*))\n     text)\n   state])\n\n(defn heading-text [text]\n  (-> (clojure.string/replace text #\"^([ ]+)?[#]+\" \"\")\n      (clojure.string/replace #\"[#]+$\" \"\")\n      string/trim))\n\n(defn heading-level [text]\n  (let [num-hashes (count (filter #(not= \\space %) (take-while #(or (= \\# %) (= \\space %)) (seq text))))]\n    (if (pos? num-hashes) num-hashes)))\n\n(defn make-heading [text heading-anchors]\n  (when-let [heading (heading-level text)]\n    (let [text (heading-text text)]\n      ;; We do not need to process the id string, HTML5 ids can contain anything except the space character.\n      ;; (https://www.w3.org/TR/html5/dom.html#the-id-attribute)\n      (str \"<h\" heading (when heading-anchors (str \" id=\\\"\" (-> text string/lower-case (string/replace \" \" \"&#95;\")) \"\\\"\")) \">\"\n           text \"</h\" heading \">\"))))\n\n(defn dashes [text state]\n  [(if (or (:code state) (:codeblock state))\n     text\n     (-> text\n         (string/replace #\"\\-\\-\\-\" \"&mdash;\")\n         (string/replace #\"\\-\\-\" \"&ndash;\")\n         (string/replace #\"<code>.*</code>\"\n                         (fn [s](-> s\n                                    (string/replace #\"&mdash;\" \"---\")\n                                    (string/replace #\"&ndash;\" \"--\"))))))\n   state])\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.common/*inhibit-separator*","markdown.common/escape-delimiter","cljs.core/char","markdown.common/gen-token","n","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","markdown.common/freeze-string","seq74090","self__4724__auto__","cljs.core/seq","args","state","cljs.core/last","token","cljs.core/count","cljs.core/assoc-in","cljs.core.reduce","cljs.core/str","cljs.core/flatten","cljs.core.drop_last","markdown.common/thaw-string","text","temp__5733__auto__","matches","cljs.core/re-seq","cljs.core/re-pattern","s","r","p1__74091#","clojure.string/replace","cljs.core.get","p1__74092#","cljs.core.update","cljs.core.apply","cljs.core/dissoc","markdown.common/thaw-strings","cljs.core/empty?","markdown.common/escape-code","markdown.common/escaped-chars","or__4126__auto__","markdown.common/open-html-tags","open?","token-seq","cljs.core._EQ_","G__74095","G__74099","markdown.common/make-separator","js/Error","separator","open","close","markdown.common.make_separator","cljs.core/identity","transformer","out","buf","tokens","cljs.core.partition_by","cljs.core.partial","cljs.core/=","cljs.core/first","cur-state","cljs.core.assoc","clojure.string.join","cljs.core.into","cljs.core.dissoc","vec__74110","cljs.core.nth","new-buf","new-state","vec__74113","G__74116","G__74117","cljs.core/vec","cljs.core.concat","cljs.core/rest","cljs.core/not","markdown.common/escape-code-transformer","markdown.common/separator","escape?","markdown.common/strong","markdown.common/bold-italic","markdown.common/bold","markdown.common/em","markdown.common/italics","markdown.common/strikethrough","markdown.common/inline-code","markdown.common/inhibit","markdown.common/escape-inhibit-separator","markdown.common/heading-text","clojure.string/trim","markdown.common/heading-level","num-hashes","p1__74124#","cljs.core.filter","cljs.core.not_EQ_","p1__74125#","cljs.core.take_while","markdown.common/make-heading","heading-anchors","temp__5735__auto__","heading","clojure.string/lower-case","markdown.common/dashes"]],"~:used-vars",["^J",["~$cljs.core/char","~$clojure.string/join","~$cljs.core/rest","~$markdown.common/bold-italic","~$cljs.core/str","~$markdown.common/freeze-string","~$markdown.common/escaped-chars","~$cljs.core/=","~$markdown.common/thaw-string","~$markdown.common/escape-code","~$markdown.common/escape-code-transformer","~$markdown.common/*inhibit-separator*","~$markdown.common/bold","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/identity","~$markdown.common/escape-inhibit-separator","~$cljs.core/dissoc","~$cljs.core/concat","~$markdown.common/em","~$cljs.core/empty?","~$markdown.common/strikethrough","~$markdown.common/heading-level","~$cljs.core/into","~$cljs.core/re-pattern","~$cljs.core/update","~$markdown.common/thaw-strings","~$markdown.common/dashes","~$markdown.common/escape-delimiter","~$markdown.common/inhibit","~$markdown.common/make-separator","~$cljs.core/get","~$markdown.common/heading-text","~$cljs.core/flatten","~$cljs.core/drop-last","~$markdown.common/gen-token","~$markdown.common/strong","~$clojure.string/replace","~$markdown.common/italics","~$markdown.common/inline-code","~$clojure.string/lower-case","~$cljs.core/vec","~$markdown.common/separator","~$markdown.common/open-html-tags","~$cljs.core/not","~$cljs.core/assoc","~$cljs.core/assoc-in","~$clojure.string/trim","~$markdown.common/make-heading","~$cljs.core/first","~$markdown.common/*substring*","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^15","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^15","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","~$goog.array","~$goog.asserts"]]],["^15","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2Q","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^15","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2R","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2U"]]],["^15","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2R"]]],["^15","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","markdown/common.cljc"],["c28b65ccc617b6c356403c4c3d9a9e0ca9bd4dd7","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^S","^Q"]]],["^15","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2R"]]],"~:SHADOW-TIMESTAMP",[1596134675000,1596134675000,1594142852000],["^15","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2R","~$goog.reflect"]]],["^15","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2R","~$goog.html.trustedtypes","^2X","^2Y","^2Z","^2["]]],["^15","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2Q","^2R","~$goog.html.SafeUrl","^2Z","^2[","^2U"]]],["^15","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2R","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^33","^2W","~$goog.html.uncheckedconversions","^2Z","^2U"]]],["^15","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^15","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2Q","^2R","~$goog.dom.TagName","~$goog.dom.tags","^37","^38","~$goog.html.SafeStyleSheet","^33","^2W","^32","^2X","^2Y","~$goog.labs.userAgent.browser","^2T","^2Z","^2[","^2U"]]],["^15","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2T"]]],["^15","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2Q","^2R","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",[]]],["^15","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2Q","^2T"]]],["^15","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^S","^3B","~$goog.string.StringBuffer"]]],["^15","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","~$goog.dom.safe","^39","^2Z","^2U"]]],["^15","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2U"]]],["^15","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2Q","^2R","^35","~$goog.math"]]],["^15","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2R","^36","^37","^38","^3>","^33","^2W","^2Z","^2U"]]],["^15","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T"]]],["^15","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","~$goog.math.Long","~$goog.math.Integer","^3B","^2T","^2Q","~$goog.Uri","^3H"]]],["^15","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2R","^32","^2Z","^2["]]],["^15","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2Q","^2R","^38","^2T","^2Z","^2[","^2U"]]],["^15","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^31"]]],["^15","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2Q","^2R","^3B"]]],["^15","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^T","^2R","^2["]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1594134806000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1592834825000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1594142852000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1594142850000,"jar:file:/C:/Users/BlackHammer09/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1594142858000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/common.cljc","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"^U",["^J",["^V"]],"~:shadow/js-access-global",["^J",["Error"]],"^W",null,"~:defs",["^ ","~$italics",["^ ","^K","^2<","^6","markdown/common.cljc","^7",152,"^8",1,"^9",152,"^:",13,"^5",["^ ","^6","markdown/common.cljc","^7",152,"^8",6,"^9",152,"^:",13],"~:tag","~$any"],"~$separator",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/common.cljc","^7",140,"^8",7,"^9",140,"^:",16,"~:arglists",["^Z",["~$quote",["^Z",[["~$escape?","~$text","~$open","~$close","^4B","~$state"]]]]]],"^K","^2@","^6","markdown/common.cljc","^:",16,"~:method-params",["^Z",[["^4F","^4G","^4H","^4I","^4B","^4J"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^8",1,"~:variadic?",false,"^7",140,"~:ret-tag","^4A","^9",140,"~:max-fixed-arity",6,"~:fn-var",true,"^4D",["^Z",["^4E",["^Z",[["^4F","^4G","^4H","^4I","^4B","^4J"]]]]]],"~$make-heading",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",181,"^8",7,"^9",181,"^:",19,"^4D",["^Z",["^4E",["^Z",[["^4G","~$heading-anchors"]]]]]],"^K","^2F","^6","markdown/common.cljc","^:",19,"^4K",["^Z",[["^4G","^4S"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",181,"^4O",["^J",["^R","~$clj-nil"]],"^9",181,"^4P",2,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G","^4S"]]]]]],"~$*substring*",["^ ","^5",["^ ","^6","markdown/common.cljc","^7",4,"^8",27,"^9",4,"^:",38,"~:dynamic",true,"~:declared",true],"^K","^2H","^6","markdown/common.cljc","^:",38,"^8",1,"^4V",true,"^7",4,"^4W",true,"^9",4,"^4@","^4A"],"~$dashes",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",189,"^8",7,"^9",189,"^:",13,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]],"^K","^21","^6","markdown/common.cljc","^:",13,"^4K",["^Z",[["^4G","^4J"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",189,"^4O","~$cljs.core/IVector","^9",189,"^4P",2,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]],"~$thaw-strings",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",36,"^8",7,"^9",36,"^:",19,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]],"~:doc","Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"],"^K","^20","^6","markdown/common.cljc","^:",19,"^4K",["^Z",[["^4G","^4J"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",36,"^4O","^4Y","^9",36,"^4P",2,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]],"^4[","Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"],"~$escape-delimiter",["^ ","^K","^22","^6","markdown/common.cljc","^7",8,"^8",1,"^9",8,"^:",22,"^5",["^ ","^6","markdown/common.cljc","^7",8,"^8",6,"^9",8,"^:",22],"^4@","^R"],"~$inhibit",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",158,"^8",7,"^9",158,"^:",14,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]],"^K","^23","^6","markdown/common.cljc","^:",14,"^4K",["^Z",[["^4G","^4J"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",158,"^4O",["^J",["^4Y","^4A"]],"^9",158,"^4P",2,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]],"~$heading-text",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",172,"^8",7,"^9",172,"^:",19,"^4D",["^Z",["^4E",["^Z",[["^4G"]]]]]],"^K","^26","^6","markdown/common.cljc","^:",19,"^4K",["^Z",[["^4G"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",172,"^4O","^R","^9",172,"^4P",1,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G"]]]]]],"~$*inhibit-separator*",["^ ","^5",["^ ","^6","markdown/common.cljc","^7",6,"^8",16,"^9",6,"^:",35,"^4V",true],"^K","^1L","^6","markdown/common.cljc","^:",35,"^8",1,"^4V",true,"^7",6,"^9",6,"^4@","^4A"],"~$bold",["^ ","^K","^1M","^6","markdown/common.cljc","^7",148,"^8",1,"^9",148,"^:",10,"^5",["^ ","^6","markdown/common.cljc","^7",148,"^8",6,"^9",148,"^:",10],"^4@","^4A"],"~$freeze-string",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",13,"^8",7,"^9",13,"^:",20,"^4D",["^Z",["^4E",["^Z",[["~$&","~$args"]]]]],"^4[","Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.","~:top-fn",["^ ","^4N",true,"~:fixed-arity",0,"^4P",0,"^4K",[["^Z",["^56"]]],"^4D",["^Z",[["~$&","^56"]]],"^4M",["^Z",[null]]]],"^K","^1F","^6","markdown/common.cljc","^:",20,"^57",["^ ","^4N",true,"^58",0,"^4P",0,"^4K",[["^Z",["^56"]]],"^4D",["^Z",[["~$&","^56"]]],"^4M",["^Z",[null]]],"^4K",[["^Z",["^56"]]],"^4L",null,"^58",0,"^4M",["^Z",[null]],"^8",1,"^4N",true,"~:methods",[["^ ","^58",0,"^4N",true,"^4@","^4Y"]],"^7",13,"^4O","^4A","^9",13,"^4P",0,"^4Q",true,"^4D",["^Z",[["~$&","^56"]]],"^4[","Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later."],"~$thaw-string",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",24,"^8",7,"^9",24,"^:",18,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]],"^4[","Recursively replaces the frozen strings in the output with the original text."],"^K","^1I","^6","markdown/common.cljc","^:",18,"^4K",["^Z",[["^4G","^4J"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",24,"^4O","^4Y","^9",24,"^4P",2,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]],"^4[","Recursively replaces the frozen strings in the output with the original text."],"~$make-separator",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",90,"^8",7,"^9",90,"^:",21,"^4D",["^Z",["^4E",["^Z",[["^4B","^4H","^4I"],["^4B","^4H","^4I","~$transformer"]]]]],"^4[","Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk.","^57",["^ ","^4N",false,"^58",4,"^4P",4,"^4K",[["^4B","^4H","^4I"],["^4B","^4H","^4I","^5<"]],"^4D",["^Z",[["^4B","^4H","^4I"],["^4B","^4H","^4I","^5<"]]],"^4M",["^Z",[null,null]]]],"^K","^24","^6","markdown/common.cljc","^:",21,"^57",["^ ","^4N",false,"^58",4,"^4P",4,"^4K",[["^4B","^4H","^4I"],["^4B","^4H","^4I","^5<"]],"^4D",["^Z",[["^4B","^4H","^4I"],["^4B","^4H","^4I","^5<"]]],"^4M",["^Z",[null,null]]],"^4K",[["^4B","^4H","^4I"],["^4B","^4H","^4I","^5<"]],"^4L",null,"^58",4,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^59",[["^ ","^58",3,"^4N",false,"^4@","^4A"],["^ ","^58",4,"^4N",false,"^4@","~$function"]],"^7",90,"^9",90,"^4P",4,"^4Q",true,"^4D",["^Z",[["^4B","^4H","^4I"],["^4B","^4H","^4I","^5<"]]],"^4[","Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk."],"~$escape-code",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",43,"^8",7,"^9",43,"^:",18,"^4D",["^Z",["^4E",["^Z",[["~$s"]]]]]],"^K","^1J","^6","markdown/common.cljc","^:",18,"^4K",["^Z",[["~$s"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",43,"^4O","^R","^9",43,"^4P",1,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["~$s"]]]]]],"~$gen-token",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",10,"^8",7,"^9",10,"^:",16,"^4D",["^Z",["^4E",["^Z",[["~$n"]]]]]],"^K","^29","^6","markdown/common.cljc","^:",16,"^4K",["^Z",[["~$n"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",10,"^4O","^R","^9",10,"^4P",1,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["~$n"]]]]]],"~$strong",["^ ","^K","^2:","^6","markdown/common.cljc","^7",144,"^8",1,"^9",144,"^:",12,"^5",["^ ","^6","markdown/common.cljc","^7",144,"^8",6,"^9",144,"^:",12],"^4@","^4A"],"~$escape-code-transformer",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",135,"^8",7,"^9",135,"^:",30,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]],"^K","^1K","^6","markdown/common.cljc","^:",30,"^4K",["^Z",[["^4G","^4J"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",135,"^4O","^4Y","^9",135,"^4P",2,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]],"~$em",["^ ","^K","^1U","^6","markdown/common.cljc","^7",150,"^8",1,"^9",150,"^:",8,"^5",["^ ","^6","markdown/common.cljc","^7",150,"^8",6,"^9",150,"^:",8],"^4@","^4A"],"~$heading-level",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",177,"^8",7,"^9",177,"^:",20,"^4D",["^Z",["^4E",["^Z",[["^4G"]]]]]],"^K","^1X","^6","markdown/common.cljc","^:",20,"^4K",["^Z",[["^4G"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",177,"^4O",["^J",["~$number","^4T"]],"^9",177,"^4P",1,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G"]]]]]],"~$escaped-chars",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",59,"^8",7,"^9",59,"^:",20,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]],"^K","^1G","^6","markdown/common.cljc","^:",20,"^4K",["^Z",[["^4G","^4J"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",59,"^4O","^4Y","^9",59,"^4P",2,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]],"~$open-html-tags",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",81,"^8",7,"^9",81,"^:",21,"^4D",["^Z",["^4E",["^Z",[["~$open?","~$token-seq"]]]]]],"^K","^2A","^6","markdown/common.cljc","^:",21,"^4K",["^Z",[["^5G","^5H"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",81,"^4O","~$boolean","^9",81,"^4P",2,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^5G","^5H"]]]]]],"~$inline-code",["^ ","^K","^2=","^6","markdown/common.cljc","^7",156,"^8",1,"^9",156,"^:",17,"^5",["^ ","^6","markdown/common.cljc","^7",156,"^8",6,"^9",156,"^:",17],"^4@","^5="],"~$strikethrough",["^ ","^K","^1W","^6","markdown/common.cljc","^7",154,"^8",1,"^9",154,"^:",19,"^5",["^ ","^6","markdown/common.cljc","^7",154,"^8",6,"^9",154,"^:",19],"^4@","^4A"],"~$bold-italic",["^ ","^K","^1D","^6","markdown/common.cljc","^7",146,"^8",1,"^9",146,"^:",17,"^5",["^ ","^6","markdown/common.cljc","^7",146,"^8",6,"^9",146,"^:",17],"^4@","^4A"],"~$escape-inhibit-separator",["^ ","^4C",null,"^5",["^ ","^6","markdown/common.cljc","^7",164,"^8",7,"^9",164,"^:",31,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]],"^K","^1R","^6","markdown/common.cljc","^:",31,"^4K",["^Z",[["^4G","^4J"]]],"^4L",null,"^4M",["^Z",[null,null]],"^8",1,"^4N",false,"^7",164,"^4O","^4Y","^9",164,"^4P",2,"^4Q",true,"^4D",["^Z",["^4E",["^Z",[["^4G","^4J"]]]]]]],"^X",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^J",["~:open","~:codeblock","~:closed","~:default","~:frozen-strings","~:found-token","~:in-tag?","~:code"]],"~:order",["^5S","^5V","^5P","^5O","^5Q","^5T","^5U","^5R"]],"^11",["^ ","^V",["^J",[]]],"^12",["^ "],"^13",["^T","^S","^Q"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2K",[["^5Z","~:static-fns"],true,["^5Z","~:shadow-tweaks"],null,["^5Z","~:source-map-inline"],null,["^5Z","~:elide-asserts"],false,["^5Z","~:optimize-constants"],null,["^5Z","^18"],null,["^5Z","~:external-config"],null,["^5Z","~:tooling-config"],null,["^5Z","~:emit-constants"],null,["^5Z","~:load-tests"],null,["^5Z","~:form-size-threshold"],null,["^5Z","~:data-readers"],null,["^5Z","~:infer-externs"],"~:auto",["^5Z","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5Z","~:fn-invoke-direct"],null,["^5Z","~:source-map"],"/dev/null"]]]