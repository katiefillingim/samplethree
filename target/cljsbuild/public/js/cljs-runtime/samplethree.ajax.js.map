{"version":3,"sources":["samplethree/ajax.cljs"],"mappings":";AAOA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA0BM;AAA1B,AACE,AAACC,AAAI,AAAA,AAACC,AAAoBF;;AAE5B,AAAA,AAAMG,AAAiBC;AAAvB,AACE,AAAI,AAACL,AAAWK;AACVA,AACA,AAAA,AAAA,AAAAC,AAACC;AAAD,AAAkB,AAAA,AAAA,AAAAD,AAACE,AAAsBC;;;AAC7CJ;;;AAGJ,AAAA,AAAMK,AAAYC;AAAlB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACH,AAGwB,AAAA,AAACI,AAAqBC,AACtB,AAAA,AAACC,AAAqBC,AACxCJ;;AAET,AAAA,AAAMK;AAAN,AACE,AAACC,AAAMC,AACAC,AACA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAC+BhB;AAD/B,AAAA,AAAAgB,AAAAA,AAACC,AAAAA,AAAAA","names":["p__75319","map__75320","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","samplethree.ajax/local-uri?","uri","cljs.core/not","cljs.core/re-find","samplethree.ajax/default-headers","request","p1__75327#","cljs.core.update","cljs.core.merge","js/csrfToken","samplethree.ajax/as-transit","opts","cognitect.transit.reader","luminus-transit.time/time-deserialization-handlers","cognitect.transit.writer","luminus-transit.time/time-serialization-handlers","samplethree.ajax/load-interceptors!","cljs.core.swap_BANG_","ajax.core/default-interceptors","cljs.core/conj","G__75329","ajax.core/to-interceptor"],"sourcesContent":["(ns samplethree.ajax\r\n  (:require\r\n    [ajax.core :as ajax]\r\n    [luminus-transit.time :as time]\r\n    [cognitect.transit :as transit]\r\n    [re-frame.core :as rf]))\r\n\r\n(defn local-uri? [{:keys [uri]}]\r\n  (not (re-find #\"^\\w+?://\" uri)))\r\n\r\n(defn default-headers [request]\r\n  (if (local-uri? request)\r\n    (-> request\r\n        (update :headers #(merge {\"x-csrf-token\" js/csrfToken} %)))\r\n    request))\r\n\r\n;; injects transit serialization config into request options\r\n(defn as-transit [opts]\r\n  (merge {:raw             false\r\n          :format          :transit\r\n          :response-format :transit\r\n          :reader          (transit/reader :json time/time-deserialization-handlers)\r\n          :writer          (transit/writer :json time/time-serialization-handlers)}\r\n         opts))\r\n\r\n(defn load-interceptors! []\r\n  (swap! ajax/default-interceptors\r\n         conj\r\n         (ajax/to-interceptor {:name \"default headers\"\r\n                               :request default-headers})))\r\n"]}